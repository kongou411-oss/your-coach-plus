// ===== Community Growth Features =====
// „Ç≥„Éü„É•„Éã„ÉÜ„Ç£ËÇ≤Êàê„Ç∑„Çπ„ÉÜ„É†Ôºà„É°„É≥„Çø„ÉºÂà∂Â∫¶„ÄÅ„Éô„Çπ„Éà„Ç¢„É≥„Çµ„Éº„ÄÅ„ÉÜ„Éº„Éû„Çπ„Éö„Éº„ÇπÔºâ

// „É°„É≥„Çø„ÉºÂà∂Â∫¶
const MentorSystem = {
    // „É°„É≥„Çø„Éº„Å´„Å™„Çã„Åü„ÇÅ„ÅÆÊù°‰ª∂
    canBecomeMentor: (userProfile, userStats) => {
        return (
            userStats.usageDays >= 30 && // 30Êó•‰ª•‰∏ä„ÅÆÂà©Áî®
            userStats.helpfulAnswers >= 10 && // 10Âõû‰ª•‰∏ä„ÅÆÊúâÁõä„Å™ÂõûÁ≠î
            userStats.averageScore >= 80 // Âπ≥ÂùáÂàÜÊûê„Çπ„Ç≥„Ç¢80ÁÇπ‰ª•‰∏ä
        );
    },

    // „É°„É≥„Çø„ÉºÁî≥Ë´ã
    applyForMentor: async (userId, userProfile) => {
        const application = {
            userId: userId,
            appliedAt: new Date().toISOString(),
            status: 'pending',
            motivation: '', // „É¶„Éº„Ç∂„Éº„ÅåÂÖ•Âäõ
            expertise: [], // ÂæóÊÑèÂàÜÈáé
            profile: userProfile
        };

        // LocalStorage„Å´‰øùÂ≠òÔºàÂÆüÈöõ„ÅØFirestore„Å∏Ôºâ
        const applications = JSON.parse(localStorage.getItem('mentor_applications') || '[]');
        applications.push(application);
        localStorage.setItem('mentor_applications', JSON.stringify(applications));

        showFeedback('„É°„É≥„Çø„ÉºÁî≥Ë´ã„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü„ÄÇÊâøË™ç„Åæ„Åß„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ', 'success');
    },

    // „É°„É≥„Çø„Éº„Éê„ÉÉ„Ç∏„ÇíÂèñÂæó
    getMentorBadge: (mentorLevel) => {
        const badges = {
            bronze: { icon: 'ü•â', name: '„Éñ„É≠„É≥„Ç∫„É°„É≥„Çø„Éº', color: 'orange' },
            silver: { icon: 'ü•à', name: '„Ç∑„É´„Éê„Éº„É°„É≥„Çø„Éº', color: 'gray' },
            gold: { icon: 'ü•á', name: '„Ç¥„Éº„É´„Éâ„É°„É≥„Çø„Éº', color: 'yellow' }
        };
        return badges[mentorLevel] || null;
    }
};

// „Éô„Çπ„Éà„Ç¢„É≥„Çµ„ÉºÊ©üËÉΩ
const BestAnswerSystem = {
    // „Éô„Çπ„Éà„Ç¢„É≥„Çµ„Éº„ÇíÈÅ∏Êäû
    markAsBestAnswer: async (postId, answerId, questionAuthorId) => {
        // ÊäïÁ®ø„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
        const posts = JSON.parse(localStorage.getItem(STORAGE_KEYS.COMMUNITY_POSTS) || '[]');
        const post = posts.find(p => p.id === postId);

        if (post && post.userId === questionAuthorId) {
            // „Éô„Çπ„Éà„Ç¢„É≥„Çµ„Éº„Çí„Éû„Éº„ÇØ
            post.bestAnswerId = answerId;
            localStorage.setItem(STORAGE_KEYS.COMMUNITY_POSTS, JSON.stringify(posts));

            // ÂõûÁ≠îËÄÖ„Å´„Éù„Ç§„É≥„Éà„Çí‰ªò‰∏é
            BestAnswerSystem.awardPoints(answerId, 10);

            showFeedback('„Éô„Çπ„Éà„Ç¢„É≥„Çµ„Éº„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„ÅüÔºÅ', 'success');
        }
    },

    // „Éù„Ç§„É≥„Éà„Çí‰ªò‰∏é
    awardPoints: (userId, points) => {
        const userPoints = JSON.parse(localStorage.getItem('user_points') || '{}');
        userPoints[userId] = (userPoints[userId] || 0) + points;
        localStorage.setItem('user_points', JSON.stringify(userPoints));
    },

    // „É¶„Éº„Ç∂„Éº„ÅÆ„Éù„Ç§„É≥„Éà„ÇíÂèñÂæó
    getUserPoints: (userId) => {
        const userPoints = JSON.parse(localStorage.getItem('user_points') || '{}');
        return userPoints[userId] || 0;
    }
};

// „ÉÜ„Éº„ÉûÂà•„Çπ„Éö„Éº„ÇπÔºà„Çµ„Éº„ÇØ„É´Ê©üËÉΩÔºâ
const ThemeSpaces = {
    // „Çπ„Éö„Éº„Çπ‰∏ÄË¶ß
    spaces: [
        {
            id: 'bulk',
            name: '„Éê„É´„ÇØ„Ç¢„ÉÉ„ÉóÈÉ®',
            description: 'Á≠ãËÇâ„ÇíÂ¢ó„ÇÑ„Åó„Å¶‰Ωì„ÇíÂ§ß„Åç„Åè„Åó„Åü„ÅÑ‰∫∫„Åü„Å°„ÅÆÈõÜ„Åæ„Çä',
            icon: 'üí™',
            color: 'blue',
            memberCount: 0
        },
        {
            id: 'diet',
            name: '„ÉÄ„Ç§„Ç®„ÉÉ„ÉàÈÉ®',
            description: 'ËÑÇËÇ™„ÇíËêΩ„Å®„Åó„Å¶Âºï„ÅçÁ∑†„ÇÅ„Åü„ÅÑ‰∫∫„Åü„Å°„ÅÆÈõÜ„Åæ„Çä',
            icon: 'üî•',
            color: 'red',
            memberCount: 0
        },
        {
            id: 'strength',
            name: '„Éë„ÉØ„Éº„É™„Éï„ÉÜ„Ç£„É≥„Ç∞ÈÉ®',
            description: 'BIG3„ÅÆË®òÈå≤„Çí‰º∏„Å∞„Åó„Åü„ÅÑ‰∫∫„Åü„Å°„ÅÆÈõÜ„Åæ„Çä',
            icon: '‚ö°',
            color: 'yellow',
            memberCount: 0
        },
        {
            id: 'nutrition',
            name: 'Ê†ÑÈ§äÂ≠¶ÈÉ®',
            description: 'È£ü‰∫ã„Å®„Çµ„Éó„É™„É°„É≥„Éà„Å´„Å§„ÅÑ„Å¶Ê∑±„ÅèÂ≠¶„Å≥„Åü„ÅÑ‰∫∫„Åü„Å°„ÅÆÈõÜ„Åæ„Çä',
            icon: 'ü•ó',
            color: 'green',
            memberCount: 0
        },
        {
            id: 'beginners',
            name: 'ÂàùÂøÉËÄÖ„ÅÆÈÉ®Â±ã',
            description: '„Éà„É¨„Éº„Éã„É≥„Ç∞ÂàùÂøÉËÄÖ„ÅåÂÆâÂøÉ„Åó„Å¶Ë≥™Âïè„Åß„Åç„ÇãÂ†¥ÊâÄ',
            icon: 'üå±',
            color: 'emerald',
            memberCount: 0
        },
        {
            id: 'women',
            name: 'Â•≥ÊÄßÂ∞ÇÁî®„Çπ„Éö„Éº„Çπ',
            description: 'Â•≥ÊÄßÁâπÊúâ„ÅÆÊÇ©„Åø„ÇÑÁõÆÊ®ô„Å´„Å§„ÅÑ„Å¶Ë©±„Åõ„ÇãÂ†¥ÊâÄ',
            icon: 'üë©',
            color: 'pink',
            memberCount: 0
        }
    ],

    // „Çπ„Éö„Éº„Çπ„Å´ÂèÇÂä†
    joinSpace: async (userId, spaceId) => {
        const memberships = JSON.parse(localStorage.getItem('space_memberships') || '{}');
        if (!memberships[userId]) {
            memberships[userId] = [];
        }

        if (!memberships[userId].includes(spaceId)) {
            memberships[userId].push(spaceId);
            localStorage.setItem('space_memberships', JSON.stringify(memberships));

            showFeedback('„Çπ„Éö„Éº„Çπ„Å´ÂèÇÂä†„Åó„Åæ„Åó„ÅüÔºÅ', 'success');
        }
    },

    // „Çπ„Éö„Éº„Çπ„Åã„ÇâÈÄÄÂá∫
    leaveSpace: async (userId, spaceId) => {
        const memberships = JSON.parse(localStorage.getItem('space_memberships') || '{}');
        if (memberships[userId]) {
            memberships[userId] = memberships[userId].filter(id => id !== spaceId);
            localStorage.setItem('space_memberships', JSON.stringify(memberships));

            showFeedback('„Çπ„Éö„Éº„Çπ„Åã„ÇâÈÄÄÂá∫„Åó„Åæ„Åó„Åü', 'success');
        }
    },

    // „É¶„Éº„Ç∂„Éº„ÅÆÂèÇÂä†„Çπ„Éö„Éº„Çπ„ÇíÂèñÂæó
    getUserSpaces: (userId) => {
        const memberships = JSON.parse(localStorage.getItem('space_memberships') || '{}');
        return memberships[userId] || [];
    },

    // „Çπ„Éö„Éº„Çπ„ÅÆ„É°„É≥„Éê„ÉºÊï∞„ÇíÊõ¥Êñ∞
    updateMemberCounts: () => {
        const memberships = JSON.parse(localStorage.getItem('space_memberships') || '{}');
        const counts = {};

        Object.values(memberships).forEach(spaces => {
            spaces.forEach(spaceId => {
                counts[spaceId] = (counts[spaceId] || 0) + 1;
            });
        });

        ThemeSpaces.spaces.forEach(space => {
            space.memberCount = counts[space.id] || 0;
        });
    }
};

// „Çπ„Éö„Éº„ÇπÈÅ∏ÊäûÁîªÈù¢„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const ThemeSpaceSelector = ({ userId, onClose }) => {
    const [userSpaces, setUserSpaces] = useState(ThemeSpaces.getUserSpaces(userId));

    useEffect(() => {
        ThemeSpaces.updateMemberCounts();
    }, []);

    const toggleSpace = async (spaceId) => {
        if (userSpaces.includes(spaceId)) {
            await ThemeSpaces.leaveSpace(userId, spaceId);
            setUserSpaces(prev => prev.filter(id => id !== spaceId));
        } else {
            await ThemeSpaces.joinSpace(userId, spaceId);
            setUserSpaces(prev => [...prev, spaceId]);
        }
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                <div className="sticky top-0 bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 rounded-t-2xl flex justify-between items-center z-10">
                    <h3 className="text-lg font-bold flex items-center gap-2">
                        <Icon name="Users" size={20} />
                        „ÉÜ„Éº„ÉûÂà•„Çπ„Éö„Éº„Çπ
                    </h3>
                    <button
                        onClick={onClose}
                        className="p-2 hover:bg-white hover:bg-opacity-20 rounded-full transition"
                    >
                        <Icon name="X" size={20} />
                    </button>
                </div>

                <div className="p-6 space-y-6">
                    <div className="text-center space-y-2">
                        <p className="text-gray-600">
                            ÂÖ±ÈÄö„ÅÆÁõÆÊ®ô„ÇíÊåÅ„Å§‰ª≤Èñì„Å®‰∫§ÊµÅ„Åó„Åæ„Åó„Çá„ÅÜ
                        </p>
                        <p className="text-sm text-gray-500">
                            Ë§áÊï∞„ÅÆ„Çπ„Éö„Éº„Çπ„Å´ÂèÇÂä†„Åß„Åç„Åæ„Åô
                        </p>
                    </div>

                    <div className="grid gap-4">
                        {ThemeSpaces.spaces.map(space => {
                            const isMember = userSpaces.includes(space.id);
                            return (
                                <button
                                    key={space.id}
                                    onClick={() => toggleSpace(space.id)}
                                    className={`p-4 rounded-xl border-2 text-left transition hover:shadow-lg ${
                                        isMember
                                            ? `border-${space.color}-500 bg-${space.color}-50`
                                            : 'border-gray-200 hover:border-gray-300'
                                    }`}
                                >
                                    <div className="flex items-start justify-between">
                                        <div className="flex items-start gap-3 flex-1">
                                            <span className="text-3xl">{space.icon}</span>
                                            <div>
                                                <h4 className="font-bold text-lg flex items-center gap-2">
                                                    {space.name}
                                                    {isMember && (
                                                        <span className="text-xs bg-green-100 text-green-700 px-2 py-0.5 rounded-full">
                                                            ÂèÇÂä†‰∏≠
                                                        </span>
                                                    )}
                                                </h4>
                                                <p className="text-sm text-gray-600 mt-1">{space.description}</p>
                                                <p className="text-xs text-gray-500 mt-2">
                                                    <Icon name="Users" size={12} className="inline mr-1" />
                                                    {space.memberCount}‰∫∫„ÅåÂèÇÂä†‰∏≠
                                                </p>
                                            </div>
                                        </div>
                                        <Icon
                                            name={isMember ? "Check" : "Plus"}
                                            size={20}
                                            className={isMember ? "text-green-600" : "text-gray-400"}
                                        />
                                    </div>
                                </button>
                            );
                        })}
                    </div>

                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h5 className="font-bold text-blue-900 mb-2 flex items-center gap-2">
                            <Icon name="Info" size={16} />
                            „Çπ„Éö„Éº„Çπ„Åß„Åß„Åç„Çã„Åì„Å®
                        </h5>
                        <ul className="text-sm text-blue-800 space-y-1">
                            <li>‚Ä¢ Âêå„ÅòÁõÆÊ®ô„ÇíÊåÅ„Å§‰ª≤Èñì„Å®Ë≥™Âïè„ÉªÂõûÁ≠î</li>
                            <li>‚Ä¢ ÊàêÊûúÂ†±Âëä„ÇÑÈÄ≤Êçó„ÅÆÂÖ±Êúâ</li>
                            <li>‚Ä¢ „É°„É≥„Éê„ÉºÈôêÂÆö„ÅÆTipsÂÖ±Êúâ</li>
                            <li>‚Ä¢ „É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥„ÅÆÁ∂≠ÊåÅ</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    );
};

// „É°„É≥„Çø„ÉºÁî≥Ë´ãÁîªÈù¢„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const MentorApplicationForm = ({ userId, userProfile, userStats, onClose }) => {
    const [motivation, setMotivation] = useState('');
    const [expertise, setExpertise] = useState([]);

    const expertiseOptions = [
        'Á≠ãÂäõ„Éà„É¨„Éº„Éã„É≥„Ç∞',
        'ÊúâÈÖ∏Á¥†ÈÅãÂãï',
        'È£ü‰∫ãÁÆ°ÁêÜ',
        '„Çµ„Éó„É™„É°„É≥„Éà',
        '„ÉÄ„Ç§„Ç®„ÉÉ„Éà',
        '„Éê„É´„ÇØ„Ç¢„ÉÉ„Éó',
        '„Éú„Éá„Ç£„É°„Ç§„ÇØ',
        'ÂàùÂøÉËÄÖ„Çµ„Éù„Éº„Éà'
    ];

    const canApply = MentorSystem.canBecomeMentor(userProfile, userStats);

    const submitApplication = () => {
        if (!motivation.trim()) {
            showFeedback('ÂøóÊúõÂãïÊ©ü„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
            return;
        }

        if (expertise.length === 0) {
            showFeedback('ÂæóÊÑèÂàÜÈáé„Çí1„Å§‰ª•‰∏äÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
            return;
        }

        MentorSystem.applyForMentor(userId, {
            ...userProfile,
            motivation,
            expertise
        });

        onClose();
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-2xl w-full max-w-lg max-h-[90vh] overflow-y-auto">
                <div className="sticky top-0 bg-gradient-to-r from-yellow-600 to-orange-600 text-white p-4 rounded-t-2xl flex justify-between items-center z-10">
                    <h3 className="text-lg font-bold flex items-center gap-2">
                        <Icon name="Award" size={20} />
                        „É°„É≥„Çø„ÉºÁî≥Ë´ã
                    </h3>
                    <button
                        onClick={onClose}
                        className="p-2 hover:bg-white hover:bg-opacity-20 rounded-full transition"
                    >
                        <Icon name="X" size={20} />
                    </button>
                </div>

                <div className="p-6 space-y-6">
                    {!canApply ? (
                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                            <h4 className="font-bold text-yellow-900 mb-3">„É°„É≥„Çø„Éº„Å´„Å™„Çã„Åü„ÇÅ„ÅÆÊù°‰ª∂</h4>
                            <ul className="space-y-2 text-sm text-yellow-800">
                                <li className="flex items-center gap-2">
                                    <Icon
                                        name={userStats.usageDays >= 30 ? "CheckCircle" : "Circle"}
                                        size={16}
                                        className={userStats.usageDays >= 30 ? "text-green-600" : "text-gray-400"}
                                    />
                                    30Êó•‰ª•‰∏ä„ÅÆÂà©Áî® ÔºàÁèæÂú®: {userStats.usageDays}Êó•Ôºâ
                                </li>
                                <li className="flex items-center gap-2">
                                    <Icon
                                        name={userStats.helpfulAnswers >= 10 ? "CheckCircle" : "Circle"}
                                        size={16}
                                        className={userStats.helpfulAnswers >= 10 ? "text-green-600" : "text-gray-400"}
                                    />
                                    10Âõû‰ª•‰∏ä„ÅÆÊúâÁõä„Å™ÂõûÁ≠î ÔºàÁèæÂú®: {userStats.helpfulAnswers}ÂõûÔºâ
                                </li>
                                <li className="flex items-center gap-2">
                                    <Icon
                                        name={userStats.averageScore >= 80 ? "CheckCircle" : "Circle"}
                                        size={16}
                                        className={userStats.averageScore >= 80 ? "text-green-600" : "text-gray-400"}
                                    />
                                    Âπ≥ÂùáÂàÜÊûê„Çπ„Ç≥„Ç¢80ÁÇπ‰ª•‰∏ä ÔºàÁèæÂú®: {userStats.averageScore}ÁÇπÔºâ
                                </li>
                            </ul>
                            <p className="mt-4 text-sm text-yellow-800">
                                Êù°‰ª∂„ÇíÊ∫Ä„Åü„Åô„Å®Áî≥Ë´ã„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô„ÄÇÂºï„ÅçÁ∂ö„ÅçÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ
                            </p>
                        </div>
                    ) : (
                        <>
                            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                                <p className="text-green-800 flex items-center gap-2">
                                    <Icon name="CheckCircle" size={18} />
                                    „É°„É≥„Çø„ÉºÁî≥Ë´ã„ÅÆÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ
                                </p>
                            </div>

                            <div>
                                <label className="block text-sm font-medium mb-2">ÂøóÊúõÂãïÊ©ü *</label>
                                <textarea
                                    value={motivation}
                                    onChange={(e) => setMotivation(e.target.value)}
                                    className="w-full px-4 py-3 border rounded-lg"
                                    rows="5"
                                    placeholder="„Å™„Åú„É°„É≥„Çø„Éº„Å´„Å™„Çä„Åü„ÅÑ„ÅÆ„Åã„ÄÅ„Å©„ÅÆ„Çà„ÅÜ„Å´„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Å´Ë≤¢ÁåÆ„Åó„Åü„ÅÑ„Åã„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium mb-2">ÂæóÊÑèÂàÜÈáé *ÔºàË§áÊï∞ÈÅ∏ÊäûÂèØÔºâ</label>
                                <div className="flex flex-wrap gap-2">
                                    {expertiseOptions.map(option => (
                                        <button
                                            key={option}
                                            onClick={() => {
                                                setExpertise(prev =>
                                                    prev.includes(option)
                                                        ? prev.filter(e => e !== option)
                                                        : [...prev, option]
                                                );
                                            }}
                                            className={`px-3 py-2 rounded-lg border-2 text-sm font-medium transition ${
                                                expertise.includes(option)
                                                    ? 'border-indigo-500 bg-indigo-50 text-indigo-700'
                                                    : 'border-gray-200 hover:border-gray-300'
                                            }`}
                                        >
                                            {option}
                                        </button>
                                    ))}
                                </div>
                            </div>

                            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <h5 className="font-bold text-blue-900 mb-2">„É°„É≥„Çø„Éº„ÅÆÂΩπÂâ≤</h5>
                                <ul className="text-sm text-blue-800 space-y-1">
                                    <li>‚Ä¢ ÂàùÂøÉËÄÖ„ÇÑÂõ∞„Å£„Å¶„ÅÑ„Çã‰∫∫„Å∏„ÅÆ‰∏ÅÂØß„Å™„Çµ„Éù„Éº„Éà</li>
                                    <li>‚Ä¢ ÁßëÂ≠¶ÁöÑÊ†πÊã†„Å´Âü∫„Å•„ÅÑ„Åü„Ç¢„Éâ„Éê„Ç§„Çπ</li>
                                    <li>‚Ä¢ „Ç≥„Éü„É•„Éã„ÉÜ„Ç£„ÅÆÈõ∞Âõ≤Ê∞ó‰Ωú„Çä</li>
                                    <li>‚Ä¢ Á∂ôÁ∂öÁöÑ„Å™Â≠¶Áøí„Å®ÊàêÈï∑</li>
                                </ul>
                            </div>

                            <button
                                onClick={submitApplication}
                                className="w-full bg-gradient-to-r from-yellow-600 to-orange-600 text-white font-bold py-3 rounded-lg hover:from-yellow-700 hover:to-orange-700 transition"
                            >
                                Áî≥Ë´ã„ÇíÈÄÅ‰ø°
                            </button>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
};
