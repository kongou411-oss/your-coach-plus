// ===== Edit Meal Modal (È£ü‰∫ãÁ∑®ÈõÜÂ∞ÇÁî®„É¢„Éº„ÉÄ„É´) =====
const EditMealModal = ({ meal, onClose, onUpdate }) => {
    const [amount, setAmount] = useState(100);
    const [foodData, setFoodData] = useState(null);
    const [bottleSize, setBottleSize] = useState(null); // 1Êú¨„ÅÆÂÆπÈáèÔºàmlÔºâ

    // foodDatabase„Åã„ÇâÂÖÉ„ÅÆÈ£üÂìÅÊÉÖÂ†±„ÇíÂèñÂæó
    useEffect(() => {
        if (meal && meal.items && meal.items.length > 0) {
            const item = meal.items[0]; // ÊúÄÂàù„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÁ∑®ÈõÜÂØæË±°„Å®„Åô„Çã
            console.log('üìù EditMealModal: Á∑®ÈõÜÂØæË±°„Ç¢„Ç§„ÉÜ„É†', item);

            // „ÄåÊú¨„ÄçÂçò‰Ωç„ÅÆÁâπÊÆäÂá¶ÁêÜ
            if (item.unit === 'Êú¨') {
                console.log('üì¶ Êú¨Âçò‰Ωç„ÅÆ„Ç¢„Ç§„ÉÜ„É†:', item);
                // Êú¨Âçò‰Ωç„ÅÆÂ†¥Âêà„ÄÅitemËá™‰Ωì„ÅÆÊ†ÑÈ§äÁ¥†„Çí„Äå1Êú¨„ÅÇ„Åü„Çä„Äç„Å®„Åó„Å¶‰ΩøÁî®
                setFoodData({
                    name: item.name,
                    servingSize: 1, // 1Êú¨„ÅÇ„Åü„Çä
                    unit: 'Êú¨',
                    calories: item.calories || 0,
                    protein: item.protein || 0,
                    fat: item.fat || 0,
                    carbs: item.carbs || 0
                });
                setAmount(1); // „Éá„Éï„Ç©„É´„Éà1Êú¨
                setBottleSize(null); // bottleSize„ÅØ‰Ωø„Çè„Å™„ÅÑ
                return;
            }

            // foodDatabase„Åã„ÇâÂÖÉ„Éá„Éº„Çø„ÇíÊ§úÁ¥¢ÔºàÈÄöÂ∏∏„ÅÆÈ£üÊùêÔºâ
            let found = null;
            Object.keys(foodDatabase).forEach(category => {
                if (foodDatabase[category][item.name]) {
                    const dbItem = foodDatabase[category][item.name];
                    console.log('‚úÖ „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÂèñÂæó:', dbItem);
                    found = {
                        ...dbItem,
                        name: item.name,
                        servingSize: 100, // foodDatabase_v2„ÅØÂÖ®„Å¶100g„ÅÇ„Åü„Çä
                        unit: dbItem.unit || 'g'
                    };
                }
            });

            if (found) {
                console.log('‚úÖ ÊúÄÁµÇÁöÑ„Å™foodData:', found);
                setFoodData(found);
                setBottleSize(null);
                setAmount(parseFloat(item.amount) || 100);
            } else {
                console.error('‚ùå foodDatabase„Åã„ÇâÈ£üÂìÅ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', item.name);
                // „Éá„Éº„Çø„Éô„Éº„Çπ„Å´„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„Ç¢„Ç§„ÉÜ„É†Ëá™‰Ωì„ÅÆ„Éá„Éº„Çø„Çí‰ΩøÁî®
                setFoodData({
                    name: item.name,
                    servingSize: 100,
                    unit: item.unit || 'g',
                    calories: item.calories || 0,
                    protein: item.protein || 0,
                    fat: item.fat || 0,
                    carbs: item.carbs || 0
                });
                setAmount(parseFloat(item.amount) || 100);
                setBottleSize(null);
            }
        }
    }, [meal]);

    if (!foodData) {
        return null;
    }

    // Ë®àÁÆóÂæå„ÅÆÊ†ÑÈ§äÊÉÖÂ†±
    const ratio = amount / (foodData.servingSize || 1);
    const calculatedCalories = Math.round((foodData.calories || 0) * ratio);
    const calculatedProtein = ((foodData.protein || 0) * ratio).toFixed(1);
    const calculatedFat = ((foodData.fat || 0) * ratio).toFixed(1);
    const calculatedCarbs = ((foodData.carbs || 0) * ratio).toFixed(1);

    console.log('üßÆ Ë®àÁÆó:', {
        amount,
        servingSize: foodData.servingSize,
        ratio,
        calories: foodData.calories,
        calculatedCalories
    });

    const handleUpdate = () => {
        const updatedMeal = {
            ...meal,
            items: [{
                name: foodData.name,
                amount: amount,
                unit: foodData.unit || 'g',
                protein: (foodData.protein || 0) * ratio,
                fat: (foodData.fat || 0) * ratio,
                carbs: (foodData.carbs || 0) * ratio,
                calories: (foodData.calories || 0) * ratio
            }]
        };
        console.log('üíæ Êõ¥Êñ∞„Éá„Éº„Çø:', updatedMeal);
        onUpdate(updatedMeal);
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-[10000] flex items-center justify-center p-4">
            <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
                <div className="sticky top-0 bg-white border-b px-6 py-4 flex items-center justify-between z-10">
                    <h2 className="text-xl font-bold">È£ü‰∫ã„ÇíÁ∑®ÈõÜ</h2>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
                        <Icon name="X" size={24} />
                    </button>
                </div>

                <div className="p-6 space-y-6">
                    {/* È£üÂìÅÂêç */}
                    <div>
                        <h3 className="text-lg font-bold mb-2">{foodData.name}</h3>
                        <p className="text-sm text-gray-600">{foodData.servingSize}{foodData.unit || 'g'} „ÅÇ„Åü„Çä</p>
                    </div>

                    {/* 100g„ÅÇ„Åü„Çä„ÅÆÊ†ÑÈ§äÊÉÖÂ†± */}
                    <div className="bg-gray-50 p-4 rounded-lg">
                        <p className="text-sm font-medium mb-2">Âü∫Êú¨Ê†ÑÈ§äÁ¥†Ôºà{foodData.servingSize || 100}{foodData.unit || 'g'}„ÅÇ„Åü„ÇäÔºâ</p>
                        <div className="grid grid-cols-4 gap-2">
                            <div>
                                <p className="text-xs text-gray-600">„Ç´„É≠„É™„Éº</p>
                                <p className="font-bold" style={{color: '#7686BA'}}>{foodData.calories || 0}kcal</p>
                            </div>
                            <div>
                                <p className="text-xs text-gray-600">P</p>
                                <p className="font-bold text-red-600">{foodData.protein || 0}g</p>
                            </div>
                            <div>
                                <p className="text-xs text-gray-600">F</p>
                                <p className="font-bold text-yellow-600">{foodData.fat || 0}g</p>
                            </div>
                            <div>
                                <p className="text-xs text-gray-600">C</p>
                                <p className="font-bold text-green-600">{foodData.carbs || 0}g</p>
                            </div>
                        </div>
                    </div>

                    {/* ÈáèË™øÊï¥ */}
                    <div>
                        <label className="block text-sm font-medium mb-2">
                            Èáè ({foodData.unit || 'g'})
                        </label>

                        {/* „Çπ„É©„Ç§„ÉÄ„Éº */}
                        <div className="mb-3">
                            <input
                                type="range"
                                min="0"
                                max={foodData.unit === 'Êú¨' ? 10 : 500}
                                step={foodData.unit === 'Êú¨' ? 0.1 : 5}
                                value={amount}
                                onChange={(e) => setAmount(Number(e.target.value))}
                                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600"
                                style={{
                                    background: `linear-gradient(to right, #4f46e5 0%, #4f46e5 ${(amount/(foodData.unit === 'Êú¨' ? 10 : 500))*100}%, #e5e7eb ${(amount/(foodData.unit === 'Êú¨' ? 10 : 500))*100}%, #e5e7eb 100%)`
                                }}
                            />
                            <div className="flex justify-between text-xs text-gray-500 mt-1">
                                {foodData.unit === 'Êú¨' ? (
                                    <>
                                        <span onClick={() => setAmount(0)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">0Êú¨</span>
                                        <span onClick={() => setAmount(1)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">1Êú¨</span>
                                        <span onClick={() => setAmount(2)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">2Êú¨</span>
                                        <span onClick={() => setAmount(5)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">5Êú¨</span>
                                        <span onClick={() => setAmount(10)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">10Êú¨</span>
                                    </>
                                ) : (
                                    <>
                                        <span onClick={() => setAmount(0)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">0{foodData.unit || 'g'}</span>
                                        <span onClick={() => setAmount(100)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">100{foodData.unit || 'g'}</span>
                                        <span onClick={() => setAmount(200)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">200{foodData.unit || 'g'}</span>
                                        <span onClick={() => setAmount(300)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">300{foodData.unit || 'g'}</span>
                                        <span onClick={() => setAmount(400)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">400{foodData.unit || 'g'}</span>
                                        <span onClick={() => setAmount(500)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">500{foodData.unit || 'g'}</span>
                                    </>
                                )}
                            </div>
                        </div>

                        <input
                            type="number"
                            value={amount}
                            onChange={(e) => setAmount(Number(e.target.value))}
                            step={foodData.unit === 'Êú¨' ? 0.1 : 1}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none mb-2"
                        />

                        {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                        {foodData.unit === 'Êú¨' ? (
                            <div className="grid grid-cols-6 gap-1">
                                <button
                                    onClick={() => setAmount(Math.max(0, amount - 1))}
                                    className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                >
                                    -1
                                </button>
                                <button
                                    onClick={() => setAmount(Math.max(0, amount - 0.5))}
                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                >
                                    -0.5
                                </button>
                                <button
                                    onClick={() => setAmount(Math.max(0, amount - 0.1))}
                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                >
                                    -0.1
                                </button>
                                <button
                                    onClick={() => setAmount(amount + 0.1)}
                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                >
                                    +0.1
                                </button>
                                <button
                                    onClick={() => setAmount(amount + 0.5)}
                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                >
                                    +0.5
                                </button>
                                <button
                                    onClick={() => setAmount(amount + 1)}
                                    className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                >
                                    +1
                                </button>
                            </div>
                        ) : (
                            <div className="grid grid-cols-6 gap-1">
                                <button
                                    onClick={() => setAmount(Math.max(0, amount - 100))}
                                    className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                >
                                    -100
                                </button>
                                <button
                                    onClick={() => setAmount(Math.max(0, amount - 50))}
                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                >
                                    -50
                                </button>
                                <button
                                    onClick={() => setAmount(Math.max(0, amount - 10))}
                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                >
                                    -10
                                </button>
                                <button
                                onClick={() => setAmount(amount + 10)}
                                className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                            >
                                +10
                            </button>
                            <button
                                onClick={() => setAmount(amount + 50)}
                                className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                            >
                                +50
                            </button>
                            <button
                                onClick={() => setAmount(amount + 100)}
                                className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                            >
                                +100
                            </button>
                        </div>
                        )}
                    </div>

                    {/* Ë®àÁÆóÂæå„ÅÆÊ†ÑÈ§äÊÉÖÂ†± */}
                    <div className="bg-indigo-50 p-4 rounded-lg">
                        <p className="text-sm font-medium mb-2">ÊëÇÂèñÈáèÔºà{amount}{foodData.unit || 'g'}Ôºâ</p>
                        <div className="grid grid-cols-4 gap-2">
                            <div>
                                <p className="text-xs text-gray-600">„Ç´„É≠„É™„Éº</p>
                                <p className="font-bold" style={{color: '#7686BA'}}>{calculatedCalories}kcal</p>
                            </div>
                            <div>
                                <p className="text-xs text-gray-600">P</p>
                                <p className="font-bold text-red-600">{calculatedProtein}g</p>
                            </div>
                            <div>
                                <p className="text-xs text-gray-600">F</p>
                                <p className="font-bold text-yellow-600">{calculatedFat}g</p>
                            </div>
                            <div>
                                <p className="text-xs text-gray-600">C</p>
                                <p className="font-bold text-green-600">{calculatedCarbs}g</p>
                            </div>
                        </div>
                    </div>

                    {/* „Éú„Çø„É≥ */}
                    <div className="flex gap-3">
                        <button
                            onClick={onClose}
                            className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium"
                        >
                            „Ç≠„É£„É≥„Çª„É´
                        </button>
                        <button
                            onClick={handleUpdate}
                            className="flex-1 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 font-medium"
                        >
                            Êõ¥Êñ∞
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

// ===== Add Item Component =====
const AddItemView = ({ type, onClose, onAdd, userProfile, predictedData, unlockedFeatures, user, currentRoutine, usageDays, dailyRecord, editingTemplate, editingMeal }) => {
            // È£ü‰∫ã„Å®„Çµ„Éó„É™„ÇíÁµ±Âêà„Åô„ÇãÂ†¥Âêà„ÄÅitemType„ÅßÁÆ°ÁêÜ
            const isMealOrSupplement = type === 'meal' || type === 'supplement';

            const [searchTerm, setSearchTerm] = useState('');
            const [selectedItem, setSelectedItem] = useState(null);
            const [amount, setAmount] = useState(type === 'supplement' ? '1' : '100');
            const [expandedCategories, setExpandedCategories] = useState({});
            const [mealName, setMealName] = useState('');
            const [addedItems, setAddedItems] = useState([]);
            const [selectedFoods, setSelectedFoods] = useState([]); // ÈÅ∏Êäû‰∏≠„ÅÆÈ£üÂìÅ„É™„Çπ„Éà
            const [editingItemIndex, setEditingItemIndex] = useState(null); // Á∑®ÈõÜ‰∏≠„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
            const [mealTemplates, setMealTemplates] = useState([]);
            const [supplementTemplates, setSupplementTemplates] = useState([]);
            const [showTemplates, setShowTemplates] = useState(false);
            const [templateName, setTemplateName] = useState('');
            const [selectedExercise, setSelectedExercise] = useState(null);
            const [showAIFoodRecognition, setShowAIFoodRecognition] = useState(false);
            const [showCustomFoodCreator, setShowCustomFoodCreator] = useState(false);
            const [showSearchModal, setShowSearchModal] = useState(false);
            const [foodOrSupplementTab, setFoodOrSupplementTab] = useState('food'); // 'food' or 'supplement'
            const [exerciseTab, setExerciseTab] = useState('strength'); // 'strength' or 'cardio' or 'stretch'

            // ÊñôÁêÜ‰ΩúÊàêÁî®„ÅÆstate
            const [showRecipeCreator, setShowRecipeCreator] = useState(false);
            const [recipeIngredients, setRecipeIngredients] = useState([]);

            // „Çµ„Éó„É™„É°„É≥„ÉàÁî®„ÅÆstate
            const [showCustomSupplementForm, setShowCustomSupplementForm] = useState(false);
            const [showQuickCreate, setShowQuickCreate] = useState(false);
            const [customSupplementData, setCustomSupplementData] = useState({
                itemType: 'food', // 'food', 'recipe', 'supplement'
                name: '',
                category: '„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´',
                servingSize: 1,
                servingUnit: 'g',
                calories: 0,
                protein: 0,
                fat: 0,
                carbs: 0,
                vitaminA: 0, vitaminB1: 0, vitaminB2: 0, vitaminB6: 0, vitaminB12: 0,
                vitaminC: 0, vitaminD: 0, vitaminE: 0, vitaminK: 0,
                niacin: 0, pantothenicAcid: 0, biotin: 0, folicAcid: 0,
                sodium: 0, potassium: 0, calcium: 0, magnesium: 0, phosphorus: 0,
                iron: 0, zinc: 0, copper: 0, manganese: 0, iodine: 0, selenium: 0, chromium: 0, molybdenum: 0,
                otherNutrients: []
            });

            // WorkoutÁî®„ÅÆstate
            const [exercises, setExercises] = useState([]);
            const [currentExercise, setCurrentExercise] = useState(null);
            const [sets, setSets] = useState([]);
            const [currentSet, setCurrentSet] = useState({
                weight: 50,
                reps: 10,
                distance: 0.5,
                tut: 30,
                restInterval: 90,
                duration: 0
            });
            const [workoutTemplates, setWorkoutTemplates] = useState([]);
            const [showCustomExerciseForm, setShowCustomExerciseForm] = useState(false);
            const [workoutInfoModal, setWorkoutInfoModal] = useState({ show: false, title: '', content: '' });
            const [showAdvancedTraining, setShowAdvancedTraining] = useState(false);
            const [customExerciseData, setCustomExerciseData] = useState({
                name: '',
                category: '„Åù„ÅÆ‰ªñ',
                subcategory: '',
                exerciseType: 'anaerobic',
                jointType: 'single',
                defaultDistance: 0.5,
                defaultTutPerRep: 3,
                exerciseFactor: 1.0,
                epocRate: 0.15,
                intervalMultiplier: 1.3,
                equipment: '',
                difficulty: 'ÂàùÁ¥ö',
                primaryMuscles: [],
                secondaryMuscles: []
            });

            // „ÉÜ„É≥„Éó„É¨„Éº„ÉàË™≠„ÅøËæº„Åø
            useEffect(() => {
                if (type === 'meal' && unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id)) {
                    DataService.getMealTemplates(user.uid).then(setMealTemplates);
                } else if (type === 'supplement' && unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id)) {
                    DataService.getSupplementTemplates(user.uid).then(setSupplementTemplates);
                }
            }, [type]);

            // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁ∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂàùÊúüÂåñ
            useEffect(() => {
                // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁ∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÄÅÊó¢Â≠ò„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
                if (editingTemplate) {
                    // „Ç´„ÉÜ„Ç¥„É™Â±ïÈñãÁä∂ÊÖã„ÇíÂàùÊúüÂåñÔºàÊäò„Çä„Åü„Åü„Çì„Å†Áä∂ÊÖã„Å´„É™„Çª„ÉÉ„ÉàÔºâ
                    setExpandedCategories({});

                    // Êó¢Â≠ò„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éá„Éº„Çø„ÇíÂêÑstate„Å´Ë®≠ÂÆö
                    if (type === 'meal' && editingTemplate.items) {
                        setAddedItems(editingTemplate.items);
                        setMealName(editingTemplate.name || '');
                    } else if (type === 'workout' && editingTemplate.exercises) {
                        setExercises(editingTemplate.exercises);
                        setMealName(editingTemplate.name || '');
                    }
                }
            }, [editingTemplate]);

            // È£ü‰∫ãÁ∑®ÈõÜÊôÇÔºöÊó¢Â≠ò„Éá„Éº„Çø„Çí„É≠„Éº„Éâ
            useEffect(() => {
                if (editingMeal && type === 'meal') {
                    console.log('üìù È£ü‰∫ãÁ∑®ÈõÜ„É¢„Éº„Éâ: „Éá„Éº„ÇøË™≠„ÅøËæº„Åø', editingMeal);
                    if (editingMeal.items && editingMeal.items.length > 0) {
                        // amount„ÅåÊñáÂ≠óÂàó„ÅÆÂ†¥Âêà„ÅØÊï∞ÂÄ§„Å´Â§âÊèõ
                        const normalizedItems = editingMeal.items.map(item => ({
                            ...item,
                            amount: typeof item.amount === 'string' ? parseFloat(item.amount) || 100 : item.amount
                        }));
                        setAddedItems(normalizedItems);
                        setMealName(editingMeal.name || '');
                    }
                }
            }, [editingMeal, type]);

            // selectedItem„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´„Éá„Éï„Ç©„É´„ÉàÈáè„ÇíË®≠ÂÆö
            useEffect(() => {
                if (selectedItem) {
                    // servingSize„Å®servingUnit„ÅåÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®
                    if (selectedItem.servingSize !== undefined && selectedItem.servingUnit !== undefined) {
                        setAmount(String(selectedItem.servingSize));
                    } else {
                        // ÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÂæìÊù•ÈÄö„Çä100g„Åæ„Åü„ÅØ1ÂÄã
                        if (type === 'supplement') {
                            setAmount('1');
                        } else {
                            setAmount('100');
                        }
                    }
                }
            }, [selectedItem]);

            const renderConditionInput = () => {
                const [condition, setCondition] = useState({
                    sleepHours: 7,
                    sleepQuality: 3,
                    stress: 3,
                    appetite: 3,
                    digestion: 3,
                    focus: 3,
                    weight: userProfile.weight || 0,
                    bodyFat: userProfile.bodyFat || 0,
                    notes: ''
                });

                const RatingButton = ({ label, value, onChange, options }) => (
                    <div className="space-y-2">
                        <label className="block text-sm font-medium text-gray-700">{label}</label>
                        <div className="grid grid-cols-5 gap-2">
                            {options.map((opt, idx) => (
                                <button
                                    key={idx}
                                    type="button"
                                    onClick={() => onChange(opt.value)}
                                    className={`py-3 px-2 rounded-lg border-2 transition ${
                                        value === opt.value
                                            ? 'border-indigo-600 bg-indigo-50 shadow-md'
                                            : 'border-gray-200 hover:border-gray-300'
                                    }`}
                                >
                                    <div className="text-2xl mb-1">{opt.emoji}</div>
                                    <div className="text-xs font-medium">{opt.label}</div>
                                </button>
                            ))}
                        </div>
                    </div>
                );

                return (
                    <div className="space-y-5">
                        {/* Áù°Áú†ÊôÇÈñì */}
                        <RatingButton
                            label="‚è∞ Áù°Áú†ÊôÇÈñì"
                            value={condition.sleepHours}
                            onChange={(val) => setCondition({...condition, sleepHours: val})}
                            options={[
                                { value: 5, emoji: 'üò´', label: '5h‰ª•‰∏ã' },
                                { value: 6, emoji: 'üò™', label: '6h' },
                                { value: 7, emoji: 'üòê', label: '7h' },
                                { value: 8, emoji: 'üòä', label: '8h' },
                                { value: 9, emoji: 'üåü', label: '9h‰ª•‰∏ä' }
                            ]}
                        />

                        <RatingButton
                            label="üò¥ Áù°Áú†„ÅÆË≥™"
                            value={condition.sleepQuality}
                            onChange={(val) => setCondition({...condition, sleepQuality: val})}
                            options={[
                                { value: 1, emoji: 'üò´', label: 'ÊúÄÊÇ™' },
                                { value: 2, emoji: 'üò™', label: 'ÊÇ™„ÅÑ' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üòä', label: 'ËâØ„ÅÑ' },
                                { value: 5, emoji: 'üåü', label: 'ÊúÄÈ´ò' }
                            ]}
                        />

                        <RatingButton
                            label="üò∞ „Çπ„Éà„É¨„Çπ„É¨„Éô„É´"
                            value={condition.stress}
                            onChange={(val) => setCondition({...condition, stress: val})}
                            options={[
                                { value: 1, emoji: 'üòå', label: '„Å™„Åó' },
                                { value: 2, emoji: 'üôÇ', label: 'Â∞ë„Åó' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üò∞', label: 'Â§ö„ÅÑ' },
                                { value: 5, emoji: 'ü§Ø', label: 'Ê•µÂ∫¶' }
                            ]}
                        />

                        <RatingButton
                            label="üçΩÔ∏è È£üÊ¨≤"
                            value={condition.appetite}
                            onChange={(val) => setCondition({...condition, appetite: val})}
                            options={[
                                { value: 1, emoji: 'üò£', label: '„Å™„Åó' },
                                { value: 2, emoji: 'üòï', label: 'Â∞ë„Å™„ÅÑ' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üòã', label: '„ÅÇ„Çä' },
                                { value: 5, emoji: 'ü§§', label: 'Êó∫Áõõ' }
                            ]}
                        />

                        <RatingButton
                            label="ü¶† ËÖ∏ÂÜÖÁí∞Â¢É"
                            value={condition.digestion}
                            onChange={(val) => setCondition({...condition, digestion: val})}
                            options={[
                                { value: 1, emoji: 'üòñ', label: 'ÊÇ™„ÅÑ' },
                                { value: 2, emoji: 'üòï', label: '‰∏çË™ø' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üôÇ', label: 'ËâØÂ•Ω' },
                                { value: 5, emoji: '‚ú®', label: 'Âø´Ë™ø' }
                            ]}
                        />

                        <RatingButton
                            label="üß† ÈõÜ‰∏≠Âäõ"
                            value={condition.focus}
                            onChange={(val) => setCondition({...condition, focus: val})}
                            options={[
                                { value: 1, emoji: 'üòµ', label: 'ÈõÜ‰∏≠„Åß„Åç„Å™„ÅÑ' },
                                { value: 2, emoji: 'üòï', label: '„Åº„Çì„ÇÑ„Çä' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üôÇ', label: 'ÈõÜ‰∏≠„Åß„Åç„Çã' },
                                { value: 5, emoji: '‚ú®', label: 'Ë∂ÖÈõÜ‰∏≠' }
                            ]}
                        />

                        {/* ‰ΩìÁµÑÊàêË®òÈå≤ */}
                        <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                            <h3 className="font-bold text-sm mb-3 flex items-center gap-2">
                                <Icon name="Scale" size={16} />
                                ‰ΩìÁµÑÊàêË®òÈå≤Ôºà‰ªªÊÑèÔºâ
                            </h3>
                            <div className="grid grid-cols-2 gap-3">
                                <div>
                                    <label className="block text-xs font-medium mb-1 flex items-center gap-1">
                                        ‰ΩìÈáç (kg)
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: '‰ΩìÈáçË®òÈå≤„Å´„Å§„ÅÑ„Å¶',
                                                content: `ÊØéÊó•„ÅÆ‰ΩìÈáç„ÇíË®òÈå≤„Åó„Å¶Â§âÂåñ„ÇíËøΩË∑°„Åó„Åæ„Åô„ÄÇ

„ÄêË®òÈå≤„ÅÆ„Çø„Ç§„Éü„É≥„Ç∞„Äë
‚Ä¢ Ëµ∑Â∫äÂæå„ÄÅ„Éà„Ç§„É¨„ÇíÊ∏à„Åæ„Åõ„ÅüÂæå
‚Ä¢ ÊúùÈ£üÂâç„ÅÆÁ©∫ËÖπÊôÇ
‚Ä¢ ÊØéÊó•Âêå„ÅòÊôÇÈñìÂ∏Ø„Å´Ê∏¨ÂÆö

„ÄêÊ¥ªÁî®ÊñπÊ≥ï„Äë
‰ΩìÈáç„ÅÆÂ§âÂåñ„ÇíÂ±•Ê≠¥„Ç∞„É©„Éï„ÅßÁ¢∫Ë™ç„Åß„Åç„ÄÅ„ÉÄ„Ç§„Ç®„ÉÉ„Éà„ÇÑ„Éê„É´„ÇØ„Ç¢„ÉÉ„Éó„ÅÆÈÄ≤Êçó„ÇíÂèØË¶ñÂåñ„Åß„Åç„Åæ„Åô„ÄÇÁõÆÊ®ô„Å´Âøú„Åò„Åü‰ΩìÈáçÁÆ°ÁêÜ„Å´ÂΩπÁ´ã„Å°„Åæ„Åô„ÄÇ`
                                            })}
                                            className="text-indigo-600 hover:text-indigo-800"
                                        >
                                            <Icon name="Info" size={12} />
                                        </button>
                                    </label>
                                    <input
                                        type="number"
                                        step="0.1"
                                        value={condition.weight}
                                        onChange={(e) => setCondition({...condition, weight: parseFloat(e.target.value) || 0})}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none text-sm"
                                        placeholder="‰æã: 65.5"
                                    />
                                </div>
                                <div>
                                    <label className="block text-xs font-medium mb-1 flex items-center gap-1">
                                        ‰ΩìËÑÇËÇ™Áéá (%)
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: '‰ΩìËÑÇËÇ™ÁéáË®òÈå≤„Å´„Å§„ÅÑ„Å¶',
                                                content: `‰ΩìËÑÇËÇ™Áéá„ÇíË®òÈå≤„Åó„Å¶‰ΩìÁµÑÊàê„ÅÆÂ§âÂåñ„ÇíËøΩË∑°„Åó„Åæ„Åô„ÄÇ

„ÄêÊ∏¨ÂÆöÊñπÊ≥ï„Äë
‚Ä¢ ‰ΩìÁµÑÊàêË®à„ÅßÊ∏¨ÂÆö
‚Ä¢ Ëµ∑Â∫äÂæå„ÄÅÁ©∫ËÖπÊôÇ„Å´Ê∏¨ÂÆö
‚Ä¢ ÊØéÊó•Âêå„ÅòÊôÇÈñìÂ∏Ø„ÉªÊù°‰ª∂„ÅßÊ∏¨ÂÆö

„ÄêÊ¥ªÁî®ÊñπÊ≥ï„Äë
‰ΩìÈáç„Å®‰ΩìËÑÇËÇ™Áéá„Åã„ÇâÈô§ËÑÇËÇ™‰ΩìÈáçÔºàLBMÔºâ„ÇíË®àÁÆó„Åó„ÄÅÁ≠ãËÇâÈáè„ÅÆÂ¢óÊ∏õ„ÇíÊääÊè°„Åß„Åç„Åæ„Åô„ÄÇ„Éú„Éá„Ç£„É°„Ç§„ÇØ„ÅÆË≥™„ÇíË©ï‰æ°„Åô„ÇãÈáçË¶Å„Å™ÊåáÊ®ô„Åß„Åô„ÄÇ`
                                            })}
                                            className="text-indigo-600 hover:text-indigo-800"
                                        >
                                            <Icon name="Info" size={12} />
                                        </button>
                                    </label>
                                    <input
                                        type="number"
                                        step="0.1"
                                        value={condition.bodyFat}
                                        onChange={(e) => setCondition({...condition, bodyFat: parseFloat(e.target.value) || 0})}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none text-sm"
                                        placeholder="‰æã: 15.5"
                                    />
                                </div>
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium mb-2">„É°„É¢Ôºà‰ªªÊÑèÔºâ</label>
                            <textarea
                                value={condition.notes}
                                onChange={(e) => setCondition({...condition, notes: e.target.value})}
                                placeholder="‰ΩìË™ø„ÇÑÊ∞ó„Å´„Å™„Çã„Åì„Å®„ÇíË®òÈå≤..."
                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                                rows="3"
                            />
                        </div>

                        <button
                            onClick={() => {
                                const newCondition = {
                                    id: Date.now(),
                                    time: new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' }),
                                    ...condition
                                };

                                onAdd(newCondition);

                                // ‰ΩìÁµÑÊàê„Çí„Éó„É≠„Éï„Ç£„Éº„É´„Å´Âç≥ÊôÇÂèçÊò†ÔºàË®òÈå≤Âæå„Å´ÂÆüË°åÔºâ
                                if (condition.weight > 0 || condition.bodyFat > 0) {
                                    setTimeout(() => {
                                        const currentProfile = JSON.parse(localStorage.getItem(STORAGE_KEYS.USER_PROFILE)) || {};
                                        if (condition.weight > 0) {
                                            currentProfile.weight = condition.weight;
                                        }
                                        if (condition.bodyFat > 0) {
                                            currentProfile.bodyFat = condition.bodyFat;
                                            currentProfile.bodyFatPercentage = condition.bodyFat;
                                            // LBMÔºàÈô§ËÑÇËÇ™‰ΩìÈáçÔºâ„ÇíÂÜçË®àÁÆó
                                            currentProfile.leanBodyMass = currentProfile.weight * (1 - currentProfile.bodyFat / 100);
                                        }
                                        localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(currentProfile));
                                        // „Éö„Éº„Ç∏„Çí„É™„É≠„Éº„Éâ„Åó„Å¶Êõ¥Êñ∞„ÇíÂèçÊò†
                                        window.location.reload();
                                    }, 100);
                                }
                            }}
                            className="w-full bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition"
                        >
                            Ë®òÈå≤„Åô„Çã
                        </button>
                    </div>
                );
            };

            const renderSupplementInput = () => {
                const fuzzyMatch = (text, query) => {
                    if (!query || query.trim() === '') return true;
                    const normalize = (str) => {
                        return str
                            .toLowerCase()
                            .replace(/[ÔºàÔºâ\(\)]/g, '') // Êã¨Âºß„ÇíÂâäÈô§
                            .replace(/[\u3041-\u3096]/g, (m) => String.fromCharCode(m.charCodeAt(0) + 0x60)) // „Å≤„Çâ„Åå„Å™‚Üí„Ç´„Çø„Ç´„Éä
                            .replace(/\s+/g, ''); // Á©∫ÁôΩÂâäÈô§
                    };
                    const normalizedText = normalize(text);
                    const normalizedQuery = normalize(query);
                    return normalizedText.includes(normalizedQuery);
                };

                const filteredSupplements = supplementDB.filter(supp =>
                    fuzzyMatch(supp.name, searchTerm)
                );

                // „ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠ò
                const saveAsTemplate = async () => {
                    if (!templateName.trim() || addedItems.length === 0) {
                        alert('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„ÄÅ„Çµ„Éó„É™„É°„É≥„Éà„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }
                    const template = {
                        id: Date.now(),
                        name: templateName,
                        items: addedItems
                    };
                    await DataService.saveSupplementTemplate(user.uid, template);
                    const templates = await DataService.getSupplementTemplates(user.uid);
                    setSupplementTemplates(templates);
                    alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                    setTemplateName('');
                };

                const loadTemplate = (template) => {
                    // „Éá„Ç£„Éº„Éó„Ç≥„Éî„Éº„Åó„Å¶ÂèÇÁÖß„ÇíÂàá„ÇãÔºàË§áË£Ω‰∏çÂÖ∑Âêà„ÇíÈò≤Ê≠¢Ôºâ
                    const copiedItems = JSON.parse(JSON.stringify(template.items));
                    setAddedItems(copiedItems);
                };

                const deleteTemplate = async (templateId) => {
                    if (confirm('„Åì„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
                        await DataService.deleteSupplementTemplate(user.uid, templateId);
                        const templates = await DataService.getSupplementTemplates(user.uid);
                        setSupplementTemplates(templates);
                    }
                };

                return (
                    <div className="space-y-4">
                        {/* ‚ë†Ê§úÁ¥¢Ê¨Ñ */}
                        <input
                            type="text"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            placeholder="„Çµ„Éó„É™„É°„É≥„Éà„ÇíÊ§úÁ¥¢..."
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                        />

                        {/* ‚ë°Êäò„Çä„Åü„Åü„Åø„Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ß */}
                        {!selectedItem ? (
                            <div className="space-y-2 max-h-96 overflow-y-auto">
                                {(() => {
                                    const categories = {};
                                    filteredSupplements.forEach(supp => {
                                        if (!categories[supp.category]) {
                                            categories[supp.category] = [];
                                        }
                                        categories[supp.category].push(supp);
                                    });

                                    return Object.keys(categories).map(category => (
                                        <div key={category} className="border rounded-lg overflow-hidden">
                                            <button
                                                onClick={() => setExpandedCategories(prev => ({...prev, [category]: !prev[category]}))}
                                                className="w-full px-4 py-3 bg-gray-50 hover:bg-gray-100 flex justify-between items-center"
                                            >
                                                <span className="font-medium">{category}</span>
                                                <div className="flex items-center gap-2">
                                                    <span className="text-xs text-gray-500">{categories[category].length}ÂìÅÁõÆ</span>
                                                    <Icon name={expandedCategories[category] ? 'ChevronDown' : 'ChevronRight'} size={20} />
                                                </div>
                                            </button>
                                            {expandedCategories[category] && (
                                                <div className="p-2 space-y-1">
                                                    {categories[category].map(supp => (
                                                        <button
                                                            key={supp.id}
                                                            onClick={() => setSelectedItem(supp)}
                                                            className="w-full text-left px-3 py-2 hover:bg-blue-50 rounded-lg transition"
                                                        >
                                                            <div className="flex justify-between items-center">
                                                                <span className="font-medium">{supp.name}</span>
                                                                <div className="text-right text-xs text-gray-500">
                                                                    <div>{supp.calories}kcal</div>
                                                                    <div>P:{supp.protein}g</div>
                                                                </div>
                                                            </div>
                                                        </button>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                    ));
                                })()}
                            </div>
                        ) : (
                            <div className="space-y-4">
                                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                                    <div className="flex justify-between items-start mb-2">
                                        <div>
                                            <h4 className="font-bold text-lg">{selectedItem.name}</h4>
                                            <p className="text-sm text-gray-600">{selectedItem.category}</p>
                                        </div>
                                        <button
                                            onClick={() => {
                                                setSelectedItem(null);
                                                setEditingItemIndex(null);
                                            }}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={20} />
                                        </button>
                                    </div>
                                    <div className="grid grid-cols-4 gap-2 mt-3 text-sm">
                                        <div>
                                            <p className="text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold text-cyan-600">{selectedItem.calories}kcal</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">P</p>
                                            <p className="font-bold text-red-600">{selectedItem.protein}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">F</p>
                                            <p className="font-bold text-yellow-600">{selectedItem.fat}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">C</p>
                                            <p className="font-bold text-green-600">{selectedItem.carbs}g</p>
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                        ÂõûÊï∞Ôºà1ÂõûÂàÜ = {selectedItem.unit || `${selectedItem.servingSize || 1}${selectedItem.servingUnit || 'g'}`}Ôºâ
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: '„Çµ„Éó„É™„É°„É≥„ÉàÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                content: `„Çµ„Éó„É™„É°„É≥„Éà„ÅÆÊëÇÂèñÂõûÊï∞„ÇíÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶ÂõûÊï∞„ÇíË®≠ÂÆöÔºà1ÔΩû20ÂõûÔºâ
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà1„ÄÅ5„ÄÅ10„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ

„Äê1ÂõûÂàÜ„Å®„ÅØÔºü„Äë
‚Ä¢ „Éó„É≠„ÉÜ„Ç§„É≥: ‰ªòÂ±û„Çπ„Éó„Éº„É≥1ÊùØÔºàÁ¥Ñ25gÔºâ
‚Ä¢ „ÇØ„É¨„Ç¢„ÉÅ„É≥: ‰ªòÂ±û„Çπ„Éó„Éº„É≥1ÊùØÔºàÁ¥Ñ5gÔºâ
‚Ä¢ „Éû„É´„ÉÅ„Éì„Çø„Éü„É≥: 1Á≤í„Éª1Èå†
‚Ä¢ BCAA: ‰ªòÂ±û„Çπ„Éó„Éº„É≥1ÊùØÔºàÁ¥Ñ5gÔºâ

„ÄêÂÖ•Âäõ‰æã„Äë
‚Ä¢ „Éó„É≠„ÉÜ„Ç§„É≥„ÇíÊúùÊô©2ÂõûÈ£≤„ÇÄ ‚Üí „Äå2„Äç„Å®ÂÖ•Âäõ
‚Ä¢ „Éû„É´„ÉÅ„Éì„Çø„Éü„É≥„Çí1Êó•1Á≤í ‚Üí „Äå1„Äç„Å®ÂÖ•Âäõ
‚Ä¢ „ÇØ„É¨„Ç¢„ÉÅ„É≥„Çí1Êó•4Âõû ‚Üí „Äå4„Äç„Å®ÂÖ•Âäõ

„ÄêPFCËá™ÂãïË®àÁÆó„Äë
ÂÖ•Âäõ„Åó„ÅüÂõûÊï∞„Å´Âøú„Åò„Å¶„ÄÅ„Åü„Çì„Å±„ÅèË≥™ÔºàPÔºâ„ÉªËÑÇË≥™ÔºàFÔºâ„ÉªÁÇ≠Ê∞¥ÂåñÁâ©ÔºàCÔºâ„ÅåËá™ÂãïË®àÁÆó„Åï„Çå„ÄÅ1Êó•„ÅÆÁõÆÊ®ô„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ`
                                            })}
                                            className="text-blue-600 hover:text-blue-800"
                                        >
                                            <Icon name="Info" size={14} />
                                        </button>
                                    </label>
                                    <div className="mb-3">
                                        <input
                                            type="range"
                                            min="1"
                                            max="20"
                                            step="1"
                                            value={amount || 1}
                                            onChange={(e) => setAmount(e.target.value)}
                                            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
                                            style={{
                                                background: `linear-gradient(to right, #2563eb 0%, #2563eb ${((amount || 1)/20)*100}%, #e5e7eb ${((amount || 1)/20)*100}%, #e5e7eb 100%)`
                                            }}
                                        />
                                        <div className="flex justify-between text-xs text-gray-500 mt-1">
                                            <span onClick={() => setAmount(1)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">1</span>
                                            <span onClick={() => setAmount(5)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">5</span>
                                            <span onClick={() => setAmount(10)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">10</span>
                                            <span onClick={() => setAmount(15)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">15</span>
                                            <span onClick={() => setAmount(20)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">20</span>
                                        </div>
                                    </div>
                                    <input
                                        type="number"
                                        value={amount || '1'}
                                        onChange={(e) => setAmount(e.target.value)}
                                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                                        placeholder="1"
                                    />
                                </div>

                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <p className="text-sm font-medium mb-2">ÊëÇÂèñÈáèÔºà{amount || 1}ÂõûÂàÜÔºâ</p>
                                    <div className="grid grid-cols-4 gap-2">
                                        <div>
                                            <p className="text-xs text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold text-blue-600">
                                                {Math.round(selectedItem.calories * Number(amount || 1))}kcal
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">P</p>
                                            <p className="font-bold">{(selectedItem.protein * Number(amount || 1)).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">F</p>
                                            <p className="font-bold">{(selectedItem.fat * Number(amount || 1)).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">C</p>
                                            <p className="font-bold">{(selectedItem.carbs * Number(amount || 1)).toFixed(1)}g</p>
                                        </div>
                                    </div>
                                </div>

                                <button
                                    onClick={() => {
                                        const numAmount = Number(amount || 1);

                                        // Calculate vitamins and minerals based on amount
                                        const vitamins = {};
                                        const minerals = {};

                                        if (selectedItem.vitamins) {
                                            Object.keys(selectedItem.vitamins).forEach(key => {
                                                vitamins[key] = selectedItem.vitamins[key] * numAmount;
                                            });
                                        }

                                        if (selectedItem.minerals) {
                                            Object.keys(selectedItem.minerals).forEach(key => {
                                                minerals[key] = selectedItem.minerals[key] * numAmount;
                                            });
                                        }

                                        // „Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥†„ÇíË®àÁÆó
                                        const otherNutrients = {};
                                        const otherNutrientKeys = ['caffeine', 'catechin', 'tannin', 'polyphenol', 'chlorogenicAcid',
                                                                    'creatine', 'lArginine', 'lCarnitine', 'EPA', 'DHA', 'coQ10',
                                                                    'lutein', 'astaxanthin'];
                                        otherNutrientKeys.forEach(key => {
                                            if (selectedItem[key]) {
                                                otherNutrients[key] = selectedItem[key] * numAmount;
                                            }
                                        });

                                        // unit„Éï„Ç£„Éº„É´„Éâ„Åã„ÇâÂàÜÈáè„Å®Âçò‰Ωç„ÇíÊäΩÂá∫
                                        let servingSize = selectedItem.servingSize || 1;
                                        let servingUnit = selectedItem.servingUnit || 'g';

                                        if (selectedItem.unit) {
                                            // "30g" ‚Üí servingSize=30, servingUnit="g"
                                            // "1Á≤í" ‚Üí servingSize=1, servingUnit="Á≤í"
                                            // "2Á≤í" ‚Üí servingSize=2, servingUnit="Á≤í"
                                            const match = selectedItem.unit.match(/^(\d+(?:\.\d+)?)(.*)/);
                                            if (match) {
                                                servingSize = parseFloat(match[1]);
                                                servingUnit = match[2] || 'g';
                                            }
                                        }

                                        const newItem = {
                                            name: selectedItem.name,
                                            amount: `${numAmount}ÂõûÂàÜ`,
                                            servings: numAmount,
                                            totalWeight: servingSize * numAmount,
                                            servingSize: servingSize,
                                            servingUnit: servingUnit,
                                            unit: selectedItem.unit || `${servingSize}${servingUnit}`,
                                            protein: selectedItem.protein * numAmount,
                                            fat: selectedItem.fat * numAmount,
                                            carbs: selectedItem.carbs * numAmount,
                                            calories: selectedItem.calories * numAmount,
                                            vitamins: vitamins,
                                            minerals: minerals,
                                            otherNutrients: otherNutrients
                                        };
                                        setAddedItems([...addedItems, newItem]);
                                        setSelectedItem(null);
                                        setAmount('1');
                                    }}
                                    className="w-full bg-blue-600 text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition"
                                >
                                    ËøΩÂä†
                                </button>
                            </div>
                        )}

                        {/* ‚ë¢ËøΩÂä†Ê∏à„Åø„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß */}
                        {addedItems.length > 0 && (
                            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                                <p className="text-sm font-medium text-blue-900 mb-3">ËøΩÂä†Ê∏à„Åø ({addedItems.length}ÂìÅÁõÆ)</p>
                                <div className="space-y-2">
                                    {addedItems.map((item, index) => (
                                        <div key={index} className="flex justify-between items-center bg-white p-2 rounded">
                                            <span className="text-sm">{item.name} √ó {item.amount}</span>
                                            <button
                                                onClick={() => setAddedItems(addedItems.filter((_, i) => i !== index))}
                                                className="text-red-500 hover:text-red-700"
                                            >
                                                <Icon name="X" size={16} />
                                            </button>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* ‚ë£„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºà‰∏ÄË¶ß+Êñ∞Ë¶è‰øùÂ≠òÔºâ - 12Êó•‰ª•‰∏ä„ÅßÈñãÊîæ */}
                        {unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id) && !selectedItem && (
                            <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-lg">
                                <button
                                    onClick={() => setShowTemplates(!showTemplates)}
                                    className="w-full flex items-center justify-between mb-3"
                                >
                                    <span className="font-medium text-yellow-800 flex items-center gap-2">
                                        <Icon name="BookTemplate" size={16} />
                                        „ÉÜ„É≥„Éó„É¨„Éº„Éà
                                    </span>
                                    <Icon name={showTemplates ? "ChevronUp" : "ChevronDown"} size={16} />
                                </button>

                                {showTemplates && (
                                    <div className="space-y-3">
                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß */}
                                        {supplementTemplates.length > 0 && (
                                            <div className="space-y-2">
                                                {supplementTemplates.map(template => {
                                                    // Á∑è„Ç´„É≠„É™„Éº„Å®PFC„ÇíË®àÁÆó
                                                    let totalCalories = 0;
                                                    let totalProtein = 0;
                                                    let totalFat = 0;
                                                    let totalCarbs = 0;

                                                    template.items.forEach(item => {
                                                        totalCalories += item.calories || 0;
                                                        totalProtein += item.protein || 0;
                                                        totalFat += item.fat || 0;
                                                        totalCarbs += item.carbs || 0;
                                                    });

                                                    return (
                                                        <details key={template.id} className="bg-white rounded border">
                                                            <summary className="p-2 cursor-pointer hover:bg-gray-50 rounded">
                                                                <div className="flex items-center justify-between">
                                                                    <div className="flex-1">
                                                                        <p className="font-medium text-sm">{template.name}</p>
                                                                        <p className="text-xs text-gray-600 mt-0.5">
                                                                            {Math.round(totalCalories)}kcal
                                                                            <span className="text-red-600 ml-2">P:{Math.round(totalProtein)}g</span>
                                                                            <span className="text-yellow-600 ml-1">F:{Math.round(totalFat)}g</span>
                                                                            <span className="text-green-600 ml-1">C:{Math.round(totalCarbs)}g</span>
                                                                        </p>
                                                                    </div>
                                                                    <div className="flex items-center gap-1 ml-2">
                                                                        <button
                                                                            onClick={(e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                loadTemplate(template);
                                                                            }}
                                                                            className="p-1 text-blue-500 hover:text-blue-700"
                                                                        >
                                                                            <Icon name="Pencil" size={14} />
                                                                        </button>
                                                                        <button
                                                                            onClick={(e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                deleteTemplate(template.id);
                                                                            }}
                                                                            className="p-1 text-red-500 hover:text-red-700"
                                                                        >
                                                                            <Icon name="Trash2" size={14} />
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </summary>
                                                            <div className="px-2 pb-2 space-y-1">
                                                                {template.items.map((item, idx) => (
                                                                    <div key={idx} className="text-xs text-gray-700 py-1 border-t border-gray-200">
                                                                        <span className="font-medium">{item.name}</span>
                                                                        <span className="text-gray-500 ml-2">{item.amount}</span>
                                                                        <span className="text-xs text-gray-500 ml-2">
                                                                            ({Math.round(item.calories)}kcal
                                                                            <span className="text-red-600 ml-1">P:{Math.round(item.protein)}g</span>
                                                                            <span className="text-yellow-600 ml-1">F:{Math.round(item.fat)}g</span>
                                                                            <span className="text-green-600 ml-1">C:{Math.round(item.carbs)}g</span>)
                                                                        </span>
                                                                    </div>
                                                                ))}
                                                            </div>
                                                        </details>
                                                    );
                                                })}
                                            </div>
                                        )}

                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊñ∞Ë¶è‰øùÂ≠ò */}
                                        {addedItems.length > 0 && (
                                            <div className="pt-3 border-t border-yellow-300">
                                                <p className="text-xs text-yellow-800 mb-2">Êñ∞„Åó„ÅÑ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶‰øùÂ≠ò</p>
                                                <div className="flex gap-2">
                                                    <input
                                                        type="text"
                                                        value={templateName}
                                                        onChange={(e) => setTemplateName(e.target.value)}
                                                        placeholder="„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêçÔºà‰æã: Êúù„ÅÆÂÆöÁï™„Çµ„Éó„É™Ôºâ"
                                                        className="flex-1 px-3 py-2 text-sm border border-yellow-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:outline-none"
                                                    />
                                                    <button
                                                        onClick={saveAsTemplate}
                                                        className="px-3 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition text-sm font-medium"
                                                    >
                                                        ‰øùÂ≠ò
                                                    </button>
                                                </div>
                                            </div>
                                        )}

                                        {supplementTemplates.length === 0 && addedItems.length === 0 && (
                                            <p className="text-sm text-gray-600">‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                                        )}
                                    </div>
                                )}
                            </div>
                        )}

                        {/* „Ç´„Çπ„Çø„É†„Ç¢„Ç§„ÉÜ„É†‰ΩúÊàê */}
                        {!selectedItem && (
                            <div className="bg-green-50 border border-green-200 p-3 rounded-lg">
                                <div className="w-full flex items-center justify-between">
                                    <button
                                        onClick={() => setShowCustomFoodCreator(true)}
                                        className="flex-1 flex items-center gap-2 font-medium text-green-800"
                                    >
                                        <Icon name="Plus" size={16} />
                                        „Ç´„Çπ„Çø„É†„Ç¢„Ç§„ÉÜ„É†„Çí‰ΩúÊàê
                                    </button>
                                    <button type="button" onClick={() => {
                                        setWorkoutInfoModal({
                                            show: true,
                                            title: '„Ç´„Çπ„Çø„É†„Ç¢„Ç§„ÉÜ„É†‰ΩúÊàê„Å´„Å§„ÅÑ„Å¶',
                                            content: `„Éá„Éº„Çø„Éô„Éº„Çπ„Å´„Å™„ÅÑÈ£üÊùê„ÉªÊñôÁêÜ„Éª„Çµ„Éó„É™„É°„É≥„Éà„ÇíÁã¨Ëá™„Å´ÁôªÈå≤„Åß„Åç„Åæ„Åô„ÄÇ

„Äê„Ç¢„Ç§„ÉÜ„É†„Çø„Ç§„Éó„ÅÆÈÅ∏Êäû„Äë
‚Ä¢ È£üÊùê: ÂçòÂìÅ„ÅÆÈ£üÂìÅÔºà‰æã: Ëá™ÂÆ∂Ë£Ω„Éó„É≠„ÉÜ„Ç§„É≥„Éê„ÉºÔºâ
‚Ä¢ ÊñôÁêÜ: Ë§áÊï∞„ÅÆÈ£üÊùê„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„ÅüÊñôÁêÜÔºà‰æã: Ëá™ÂÆ∂Ë£Ω„Ç´„É¨„ÉºÔºâ
‚Ä¢ „Çµ„Éó„É™: „Éó„É≠„ÉÜ„Ç§„É≥„ÄÅ„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´„ÄÅ„Ç¢„Éü„ÉéÈÖ∏„Å™„Å©

„ÄêÂü∫Êú¨ÊÉÖÂ†±„ÅÆÂÖ•Âäõ„Äë
‚Ä¢ ÂêçÂâç: „Ç¢„Ç§„ÉÜ„É†„ÅÆÂêçÁß∞
‚Ä¢ „Ç´„ÉÜ„Ç¥„É™: Á®ÆÈ°û„ÇíÈÅ∏Êäû
‚Ä¢ 1ÂõûÂàÜ„ÅÆÈáè: 1Âõû„ÅÇ„Åü„Çä„ÅÆÊëÇÂèñÈáè„Å®Âçò‰ΩçÔºà‰æã: 100g„ÄÅ30g„ÄÅ500mlÔºâ

„ÄêÊ†ÑÈ§äÁ¥†„ÅÆÂÖ•Âäõ„Äë
‚Ä¢ Âü∫Êú¨Ê†ÑÈ§äÁ¥†: „Ç´„É≠„É™„Éº„ÄÅ„Çø„É≥„Éë„ÇØË≥™„ÄÅËÑÇË≥™„ÄÅÁÇ≠Ê∞¥ÂåñÁâ©
‚Ä¢ „Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´: Ë©≥Á¥∞„Å™ÂæÆÈáèÊ†ÑÈ§äÁ¥†Ôºà‰ªªÊÑèÔºâ
‚Ä¢ „Åô„Åπ„Å¶„Äå1ÂõûÂàÜ„ÅÇ„Åü„Çä„Äç„ÅÆÂê´ÊúâÈáè„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ

„Äê„Éá„Éº„Çø„ÅÆÂèÇÁÖßÊñπÊ≥ï„Äë
1. ÂïÜÂìÅ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÊ†ÑÈ§äÊàêÂàÜË°®Á§∫„ÇíÁ¢∫Ë™ç
2. „É°„Éº„Ç´„ÉºÂÖ¨Âºè„Çµ„Ç§„Éà„ÅÆË£ΩÂìÅÊÉÖÂ†±„Éö„Éº„Ç∏
3. Ê†ÑÈ§ä„Éá„Éº„Çø„Éô„Éº„ÇπÔºàÊñáÈÉ®ÁßëÂ≠¶ÁúÅ„ÅÆÈ£üÂìÅÊàêÂàÜ„Éá„Éº„Çø„Éô„Éº„Çπ„Å™„Å©Ôºâ

„Äê‰ΩúÊàêÂæå„ÅÆ‰Ωø„ÅÑÊñπ„Äë
‰øùÂ≠ò„Åô„Çã„Å®„ÄÅÈ£ü‰∫ãË®òÈå≤ÁîªÈù¢„Å´ËøΩÂä†„Åï„Çå„ÄÅÈÄöÂ∏∏„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Å®ÂêåÊßò„Å´Ë®òÈå≤„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô„ÄÇ

„ÄêÊ≥®ÊÑèÁÇπ„Äë
‚Ä¢ Ê≠£Á¢∫„Å™Ê†ÑÈ§äÊÉÖÂ†±„ÅÆÂÖ•Âäõ„ÅåÈáçË¶Å„Åß„Åô
‚Ä¢ „Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´„ÅØ‰ªªÊÑèÈ†ÖÁõÆ„Åß„ÅôÔºà„Çè„Åã„ÇãÁØÑÂõ≤„ÅßÂÖ•ÂäõÔºâ
‚Ä¢ ‰ΩúÊàêÂæå„ÇÇÁ∑®ÈõÜ„ÉªÂâäÈô§„ÅåÂèØËÉΩ„Åß„Åô`
                                        });
                                    }} className="text-green-700 hover:text-green-900 p-1">
                                        <Icon name="Info" size={14} />
                                    </button>
                                    <button
                                        onClick={() => setShowCustomSupplementForm(!showCustomSupplementForm)}
                                        className="text-green-800 p-1"
                                    >
                                        <Icon name={showCustomSupplementForm ? "ChevronUp" : "ChevronDown"} size={16} />
                                    </button>
                                </div>
                                {showCustomSupplementForm && (
                                    <div className="mt-3 space-y-3 max-h-96 overflow-y-auto">
                                        {/* „Ç¢„Ç§„ÉÜ„É†„Çø„Ç§„ÉóÈÅ∏Êäû */}
                                        <div>
                                            <label className="block text-xs font-medium text-gray-700 mb-1">„Ç¢„Ç§„ÉÜ„É†„Çø„Ç§„Éó</label>
                                            <div className="grid grid-cols-3 gap-2">
                                                <button
                                                    type="button"
                                                    onClick={() => setCustomSupplementData({...customSupplementData, itemType: 'food'})}
                                                    className={`py-2 px-3 rounded-lg text-sm font-medium transition ${
                                                        customSupplementData.itemType === 'food'
                                                            ? 'bg-green-600 text-white'
                                                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                    }`}
                                                >
                                                    <Icon name="Apple" size={14} className="inline mr-1" />
                                                    È£üÊùê
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCustomSupplementData({...customSupplementData, itemType: 'recipe'})}
                                                    className={`py-2 px-3 rounded-lg text-sm font-medium transition ${
                                                        customSupplementData.itemType === 'recipe'
                                                            ? 'bg-orange-600 text-white'
                                                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                    }`}
                                                >
                                                    <Icon name="ChefHat" size={14} className="inline mr-1" />
                                                    ÊñôÁêÜ
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCustomSupplementData({...customSupplementData, itemType: 'supplement'})}
                                                    className={`py-2 px-3 rounded-lg text-sm font-medium transition ${
                                                        customSupplementData.itemType === 'supplement'
                                                            ? 'bg-blue-600 text-white'
                                                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                    }`}
                                                >
                                                    <Icon name="Pill" size={14} className="inline mr-1" />
                                                    „Çµ„Éó„É™
                                                </button>
                                            </div>
                                        </div>

                                        <input
                                            type="text"
                                            value={customSupplementData.name}
                                            onChange={(e) => setCustomSupplementData({...customSupplementData, name: e.target.value})}
                                            placeholder={
                                                customSupplementData.itemType === 'food' ? 'ÂêçÂâçÔºà‰æã: Ëá™ÂÆ∂Ë£Ω„Éó„É≠„ÉÜ„Ç§„É≥„Éê„ÉºÔºâ' :
                                                customSupplementData.itemType === 'recipe' ? 'ÂêçÂâçÔºà‰æã: Ëá™ÂÆ∂Ë£Ω„Ç´„É¨„ÉºÔºâ' :
                                                'ÂêçÂâçÔºà‰æã: „Éû„É´„ÉÅ„Éì„Çø„Éü„É≥Ôºâ'
                                            }
                                            className="w-full px-3 py-2 text-sm border rounded-lg"
                                        />
                                        <div className="grid grid-cols-2 gap-2">
                                            {customSupplementData.itemType === 'recipe' ? (
                                                <input
                                                    type="text"
                                                    value="ÊñôÁêÜ"
                                                    disabled
                                                    className="w-full px-3 py-2 text-sm border rounded-lg bg-gray-100"
                                                />
                                            ) : (
                                                <select
                                                    value={customSupplementData.category}
                                                    onChange={(e) => setCustomSupplementData({...customSupplementData, category: e.target.value})}
                                                    className="w-full px-3 py-2 text-sm border rounded-lg"
                                                >
                                                    {customSupplementData.itemType === 'supplement' ? (
                                                        <>
                                                            <option value="„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´">„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´</option>
                                                            <option value="„Éó„É≠„ÉÜ„Ç§„É≥">„Éó„É≠„ÉÜ„Ç§„É≥</option>
                                                            <option value="„Ç¢„Éü„ÉéÈÖ∏">„Ç¢„Éü„ÉéÈÖ∏</option>
                                                            <option value="„Éâ„É™„É≥„ÇØ">„Éâ„É™„É≥„ÇØ</option>
                                                            <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                                                        </>
                                                    ) : (
                                                        <>
                                                            <option value="Á©ÄÈ°û">Á©ÄÈ°û</option>
                                                            <option value="ËÇâÈ°û">ËÇâÈ°û</option>
                                                            <option value="È≠ö‰ªãÈ°û">È≠ö‰ªãÈ°û</option>
                                                            <option value="ÈáéËèúÈ°û">ÈáéËèúÈ°û</option>
                                                            <option value="ÊûúÁâ©È°û">ÊûúÁâ©È°û</option>
                                                            <option value="‰π≥Ë£ΩÂìÅ">‰π≥Ë£ΩÂìÅ</option>
                                                            <option value="Ë™øÂë≥Êñô">Ë™øÂë≥Êñô</option>
                                                            <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                                                        </>
                                                    )}
                                                </select>
                                            )}
                                            <div className="flex gap-2">
                                                <input
                                                    type="number"
                                                    value={customSupplementData.servingSize}
                                                    onChange={(e) => setCustomSupplementData({...customSupplementData, servingSize: e.target.value === '' ? '' : (parseFloat(e.target.value) || 1)})}
                                                    placeholder="1ÂõûÂàÜ„ÅÆÈáè"
                                                    className="flex-1 px-3 py-2 text-sm border rounded-lg"
                                                />
                                                <select
                                                    value={customSupplementData.servingUnit}
                                                    onChange={(e) => setCustomSupplementData({...customSupplementData, servingUnit: e.target.value})}
                                                    className="px-3 py-2 text-sm border rounded-lg"
                                                >
                                                    <option value="g">g</option>
                                                    <option value="mg">mg</option>
                                                    <option value="ml">ml</option>
                                                </select>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">Âü∫Êú¨Ê†ÑÈ§äÁ¥†Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                            <div className="grid grid-cols-2 gap-2">
                                                <div>
                                                    <label className="text-xs text-gray-600">„Ç´„É≠„É™„Éº (kcal)</label>
                                                    <input type="number" value={customSupplementData.calories} onChange={(e) => setCustomSupplementData({...customSupplementData, calories: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                                <div>
                                                    <label className="text-xs text-gray-600">„Çø„É≥„Éë„ÇØË≥™ (g)</label>
                                                    <input type="number" value={customSupplementData.protein} onChange={(e) => setCustomSupplementData({...customSupplementData, protein: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                                <div>
                                                    <label className="text-xs text-gray-600">ËÑÇË≥™ (g)</label>
                                                    <input type="number" value={customSupplementData.fat} onChange={(e) => setCustomSupplementData({...customSupplementData, fat: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                                <div>
                                                    <label className="text-xs text-gray-600">ÁÇ≠Ê∞¥ÂåñÁâ© (g)</label>
                                                    <input type="number" value={customSupplementData.carbs} onChange={(e) => setCustomSupplementData({...customSupplementData, carbs: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">„Éì„Çø„Éü„É≥Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                            <div className="grid grid-cols-2 gap-2">
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥A (Œºg)</label><input type="number" value={customSupplementData.vitaminA} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminA: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B1 (mg)</label><input type="number" value={customSupplementData.vitaminB1} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB1: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B2 (mg)</label><input type="number" value={customSupplementData.vitaminB2} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB2: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B6 (mg)</label><input type="number" value={customSupplementData.vitaminB6} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB6: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B12 (Œºg)</label><input type="number" value={customSupplementData.vitaminB12} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB12: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥C (mg)</label><input type="number" value={customSupplementData.vitaminC} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminC: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥D (Œºg)</label><input type="number" value={customSupplementData.vitaminD} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminD: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥E (mg)</label><input type="number" value={customSupplementData.vitaminE} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminE: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥K (Œºg)</label><input type="number" value={customSupplementData.vitaminK} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminK: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éä„Ç§„Ç¢„Ç∑„É≥ (mg)</label><input type="number" value={customSupplementData.niacin} onChange={(e) => setCustomSupplementData({...customSupplementData, niacin: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éë„É≥„Éà„ÉÜ„É≥ÈÖ∏ (mg)</label><input type="number" value={customSupplementData.pantothenicAcid} onChange={(e) => setCustomSupplementData({...customSupplementData, pantothenicAcid: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Ç™„ÉÅ„É≥ (Œºg)</label><input type="number" value={customSupplementData.biotin} onChange={(e) => setCustomSupplementData({...customSupplementData, biotin: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">ËëâÈÖ∏ (Œºg)</label><input type="number" value={customSupplementData.folicAcid} onChange={(e) => setCustomSupplementData({...customSupplementData, folicAcid: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">„Éü„Éç„É©„É´Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                            <div className="grid grid-cols-2 gap-2">
                                                <div><label className="text-xs text-gray-600">„Éä„Éà„É™„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.sodium} onChange={(e) => setCustomSupplementData({...customSupplementData, sodium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Ç´„É™„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.potassium} onChange={(e) => setCustomSupplementData({...customSupplementData, potassium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Ç´„É´„Ç∑„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.calcium} onChange={(e) => setCustomSupplementData({...customSupplementData, calcium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éû„Ç∞„Éç„Ç∑„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.magnesium} onChange={(e) => setCustomSupplementData({...customSupplementData, magnesium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„É™„É≥ (mg)</label><input type="number" value={customSupplementData.phosphorus} onChange={(e) => setCustomSupplementData({...customSupplementData, phosphorus: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">ÈâÑ (mg)</label><input type="number" value={customSupplementData.iron} onChange={(e) => setCustomSupplementData({...customSupplementData, iron: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">‰∫úÈâõ (mg)</label><input type="number" value={customSupplementData.zinc} onChange={(e) => setCustomSupplementData({...customSupplementData, zinc: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">ÈäÖ (mg)</label><input type="number" value={customSupplementData.copper} onChange={(e) => setCustomSupplementData({...customSupplementData, copper: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éû„É≥„Ç¨„É≥ (mg)</label><input type="number" value={customSupplementData.manganese} onChange={(e) => setCustomSupplementData({...customSupplementData, manganese: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„É®„Ç¶Á¥† (Œºg)</label><input type="number" value={customSupplementData.iodine} onChange={(e) => setCustomSupplementData({...customSupplementData, iodine: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Çª„É¨„É≥ (Œºg)</label><input type="number" value={customSupplementData.selenium} onChange={(e) => setCustomSupplementData({...customSupplementData, selenium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„ÇØ„É≠„É† (Œºg)</label><input type="number" value={customSupplementData.chromium} onChange={(e) => setCustomSupplementData({...customSupplementData, chromium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„É¢„É™„Éñ„Éá„É≥ (Œºg)</label><input type="number" value={customSupplementData.molybdenum} onChange={(e) => setCustomSupplementData({...customSupplementData, molybdenum: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">„Åù„ÅÆ‰ªñÊ†ÑÈ§äÁ¥†</p>
                                            {customSupplementData.otherNutrients.map((nutrient, idx) => (
                                                <div key={idx} className="flex gap-1 mb-2">
                                                    <input type="text" value={nutrient.name} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].name = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Âêç" className="flex-1 px-2 py-1 text-xs border rounded" />
                                                    <input type="number" value={nutrient.amount} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].amount = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Èáè" className="w-16 px-2 py-1 text-xs border rounded" />
                                                    <input type="text" value={nutrient.unit} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].unit = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Âçò‰Ωç" className="w-12 px-1 py-1 text-xs border rounded" />
                                                    <button onClick={() => { const updated = customSupplementData.otherNutrients.filter((_, i) => i !== idx); setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} className="text-red-500 px-1"><Icon name="X" size={14} /></button>
                                                </div>
                                            ))}
                                            <button onClick={() => setCustomSupplementData({...customSupplementData, otherNutrients: [...customSupplementData.otherNutrients, {name: '', amount: '', unit: ''}]})} className="w-full px-2 py-1.5 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:bg-gray-50 text-xs">+ ËøΩÂä†</button>
                                        </div>

                                        <button
                                            onClick={() => {
                                                if (!customSupplementData.name.trim()) {
                                                    alert('„Çµ„Éó„É™„É°„É≥„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                                                    return;
                                                }
                                                const customSupplement = {
                                                    id: Date.now(),
                                                    ...customSupplementData,
                                                    isCustom: true
                                                };
                                                setSelectedItem(customSupplement);
                                                setCustomSupplementData({
                                                    name: '', category: '„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´', servingSize: 1, servingUnit: 'g',
                                                    calories: 0, protein: 0, fat: 0, carbs: 0,
                                                    vitaminA: 0, vitaminB1: 0, vitaminB2: 0, vitaminB6: 0, vitaminB12: 0,
                                                    vitaminC: 0, vitaminD: 0, vitaminE: 0, vitaminK: 0,
                                                    niacin: 0, pantothenicAcid: 0, biotin: 0, folicAcid: 0,
                                                    sodium: 0, potassium: 0, calcium: 0, magnesium: 0, phosphorus: 0,
                                                    iron: 0, zinc: 0, copper: 0, manganese: 0, iodine: 0, selenium: 0, chromium: 0, molybdenum: 0,
                                                    otherNutrients: []
                                                });
                                                setShowCustomSupplementForm(false);
                                            }}
                                            className="w-full px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition text-sm font-medium"
                                        >
                                            ‰ΩúÊàê„Åó„Å¶ÈÅ∏Êäû
                                        </button>
                                    </div>
                                )}
                            </div>
                        )}

                        {/* ‚ë§Ë®òÈå≤„Éú„Çø„É≥ */}
                        {addedItems.length > 0 && !selectedItem && (
                            <button
                                onClick={async () => {
                                    // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁ∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà
                                    if (editingTemplate) {
                                        const updatedTemplate = {
                                            ...editingTemplate,
                                            items: addedItems,
                                            name: mealName || editingTemplate.name
                                        };
                                        await DataService.saveSupplementTemplate(user.uid, updatedTemplate);
                                        alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
                                        onClose();
                                        return;
                                    }

                                    // ÈÄöÂ∏∏„ÅÆË®òÈå≤„É¢„Éº„Éâ
                                    const newSupplement = {
                                        id: Date.now(),
                                        time: new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' }),
                                        name: '„Çµ„Éó„É™„É°„É≥„Éà',
                                        icon: 'Pill',
                                        items: addedItems
                                    };

                                    // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶Ëá™Âãï‰øùÂ≠òÔºà„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„Åå„ÅÇ„Çä„ÄÅ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÊ©üËÉΩ„ÅåÈñãÊîæ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
                                    if (templateName && unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id)) {
                                        const template = {
                                            id: Date.now(),
                                            name: templateName,
                                            items: addedItems
                                        };
                                        await DataService.saveSupplementTemplate(user.uid, template);
                                        const templates = await DataService.getSupplementTemplates(user.uid);
                                        setSupplementTemplates(templates);
                                        setTemplateName('');
                                    }

                                    onAdd(newSupplement);
                                }}
                                className="w-full bg-blue-600 text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                {editingTemplate ? '„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞' : 'Ë®òÈå≤„Åô„Çã'}
                            </button>
                        )}
                    </div>
                );
            };

            const renderWorkoutInput = () => {
                const fuzzyMatch = (text, query) => {
                    if (!query || query.trim() === '') return true;
                    const normalize = (str) => {
                        return str
                            .toLowerCase()
                            .replace(/[ÔºàÔºâ\(\)]/g, '') // Êã¨Âºß„ÇíÂâäÈô§
                            .replace(/[\u3041-\u3096]/g, (m) => String.fromCharCode(m.charCodeAt(0) + 0x60)) // „Å≤„Çâ„Åå„Å™‚Üí„Ç´„Çø„Ç´„Éä
                            .replace(/\s+/g, ''); // Á©∫ÁôΩÂâäÈô§
                    };
                    const normalizedText = normalize(text);
                    const normalizedQuery = normalize(query);
                    return normalizedText.includes(normalizedQuery);
                };

                useEffect(() => {
                    loadTemplates();
                    // „É´„Éº„ÉÜ„Ç£„É≥„Åã„Çâ„ÉØ„Éº„ÇØ„Ç¢„Ç¶„ÉàËá™ÂãïË™≠„ÅøËæº„Åø
                    if (currentRoutine && !currentRoutine.isRestDay && currentRoutine.exercises) {
                        // „É´„Éº„ÉÜ„Ç£„É≥„ÅÆÊúÄÂàù„ÅÆÁ®ÆÁõÆ„ÇíËá™ÂãïÈÅ∏Êäû
                        if (currentRoutine.exercises.length > 0) {
                            const firstExercise = currentRoutine.exercises[0];
                            setCurrentExercise(firstExercise.exercise);
                            if (firstExercise.sets && firstExercise.sets.length > 0) {
                                setSets(firstExercise.sets.map(set => ({
                                    ...set,
                                    duration: set.duration || 0
                                })));
                            }
                        }
                    }
                }, []);

                const loadTemplates = async () => {
                    const templates = await DataService.getWorkoutTemplates(user.uid);
                    setWorkoutTemplates(templates);
                };

                const saveAsTemplate = async () => {
                    if (exercises.length === 0 || !templateName.trim()) {
                        alert('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„ÄÅÁ®ÆÁõÆ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }
                    const template = {
                        id: Date.now(),
                        name: templateName,
                        exercises: exercises, // Ë§áÊï∞Á®ÆÁõÆ„Çí‰øùÂ≠ò
                        createdAt: new Date().toISOString()
                    };
                    await DataService.saveWorkoutTemplate(user.uid, template);
                    setTemplateName('');
                    alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                    loadTemplates();
                };

                const loadTemplate = (template) => {
                    // Êñ∞ÂΩ¢ÂºèÔºàË§áÊï∞Á®ÆÁõÆÔºâ„Å®ÊóßÂΩ¢ÂºèÔºàÂçò‰∏ÄÁ®ÆÁõÆÔºâ„ÅÆ‰∏°Êñπ„Å´ÂØæÂøú
                    if (template.exercises && Array.isArray(template.exercises)) {
                        // Êñ∞ÂΩ¢ÂºèÔºöË§áÊï∞Á®ÆÁõÆ„ÇíË™≠„ÅøËæº„Åø
                        setExercises(template.exercises);
                        setCurrentExercise(null);
                        setSets([]);
                    } else if (template.exercise) {
                        // ÊóßÂΩ¢ÂºèÔºöÂçò‰∏ÄÁ®ÆÁõÆ„ÇíË™≠„ÅøËæº„Åø
                        setCurrentExercise(template.exercise);
                        setSets(template.sets || []);
                    }
                    setShowTemplates(false);
                };

                const deleteTemplate = async (templateId) => {
                    if (confirm('„Åì„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
                        await DataService.deleteWorkoutTemplate(user.uid, templateId);
                        loadTemplates();
                    }
                };

                const handleWorkoutSave = async () => {
                    console.log('üèãÔ∏è handleWorkoutSave ÂÆüË°åÈñãÂßã');
                    console.log('  - exercises:', exercises);

                    if (exercises.length === 0) {
                        alert('ÈÅãÂãï„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }

                    // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁ∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà
                    if (editingTemplate) {
                        const updatedTemplate = {
                            ...editingTemplate,
                            exercises: exercises,
                            name: mealName || editingTemplate.name
                        };
                        await DataService.saveWorkoutTemplate(user.uid, updatedTemplate);
                        alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
                        onClose();
                        return;
                    }

                    // ÈÄöÂ∏∏„ÅÆË®òÈå≤„É¢„Éº„Éâ
                    // ÂÖ®„Å¶„ÅÆÁ®ÆÁõÆ„Çí1„Å§„ÅÆworkout„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´„Åæ„Å®„ÇÅ„Çã
                    const workoutData = {
                        id: Date.now(),
                        time: new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' }),
                        name: exercises.length === 1
                            ? (exercises[0].exercise?.name || exercises[0].name)
                            : `${exercises[0].exercise?.category || exercises[0].category}„Éà„É¨„Éº„Éã„É≥„Ç∞`, // Ë§áÊï∞Á®ÆÁõÆ„ÅÆÂ†¥Âêà„ÅØ„Ç´„ÉÜ„Ç¥„É™Âêç
                        category: exercises[0].exercise?.category || exercises[0].category,
                        exercises: exercises.map(ex => {
                            console.log('[‰øùÂ≠òÂá¶ÁêÜ] exercise:', ex);

                            // ÊúâÈÖ∏Á¥†„Éª„Çπ„Éà„É¨„ÉÉ„ÉÅ„ÅÆÂ†¥ÂêàÔºàexercise „Éó„É≠„Éë„ÉÜ„Ç£„Åå„Å™„ÅÑÔºâ
                            if (ex.exerciseType === 'aerobic' || ex.exerciseType === 'stretch') {
                                console.log('  ‚Üí ÊúâÈÖ∏Á¥†/„Çπ„Éà„É¨„ÉÉ„ÉÅ„Å®„Åó„Å¶‰øùÂ≠ò:', {
                                    name: ex.name,
                                    exerciseType: ex.exerciseType,
                                    duration: ex.duration
                                });
                                return {
                                    exercise: {
                                        name: ex.name,
                                        category: ex.category,
                                        exerciseType: ex.exerciseType
                                    },
                                    exerciseType: ex.exerciseType,
                                    duration: ex.duration,
                                    totalDuration: ex.totalDuration || ex.duration
                                };
                            }

                            // Á≠ã„Éà„É¨„ÅÆÂ†¥ÂêàÔºàexercise „Éó„É≠„Éë„ÉÜ„Ç£„Åå„ÅÇ„ÇãÔºâ
                            console.log('  ‚Üí Á≠ã„Éà„É¨„Å®„Åó„Å¶‰øùÂ≠ò:', {
                                name: ex.exercise.name,
                                sets: ex.sets
                            });
                            return {
                                exercise: ex.exercise,
                                exerciseType: ex.exercise?.exerciseType || 'anaerobic',
                                name: ex.exercise.name,
                                sets: ex.sets
                            };
                        })
                    };

                    console.log('[‰øùÂ≠òÂá¶ÁêÜ] ÊúÄÁµÇworkoutData:', JSON.stringify(workoutData, null, 2));
                    console.log('  - onAddÈñ¢Êï∞:', typeof onAdd);

                    // 1„Å§„ÅÆworkout„Å®„Åó„Å¶ËøΩÂä†
                    onAdd(workoutData);
                    console.log('‚úÖ onAddÂÆüË°åÂÆå‰∫Ü');
                    onClose();
                };

                const filteredExercises = exerciseDB.filter(ex =>
                    fuzzyMatch(ex.name, searchTerm) ||
                    fuzzyMatch(ex.category, searchTerm)
                );

                // „Çª„ÉÉ„ÉàÂçò‰Ωç„Åß„ÅØ‰ΩìÁ©ç„ÅÆ„Åø„ÇíË®òÈå≤
                const calculateSetVolume = (set) => {
                    const weight = set.weight || 0;
                    const reps = set.reps || 0;
                    return weight * reps; // Á∑è‰ΩìÁ©ç (kg √ó reps)
                };

                return (
                    <div className="space-y-4">
                        {/* ‚ë†„Å©„ÅÜ„ÇÑ„Å£„Å¶Ë®òÈå≤„Åó„Åæ„Åô„ÅãÔºü */}
                        {!currentExercise && !showCustomExerciseForm && (
                            <div className="space-y-3">
                                <p className="text-center text-base font-medium text-gray-700 mb-4">„Å©„ÅÜ„ÇÑ„Å£„Å¶Ë®òÈå≤„Åó„Åæ„Åô„ÅãÔºü</p>

                                {/* Á®ÆÁõÆ„ÇíÊ§úÁ¥¢Ôºà„Ç∞„É¨„ÉºËÉåÊôØ„ÄÅ„Ç∞„É¨„ÉºÊû†Ôºâ */}
                                <button
                                    type="button"
                                    onClick={() => setShowSearchModal(true)}
                                    className="w-full bg-gray-100 border-2 border-gray-300 text-gray-800 py-3 px-4 rounded-lg hover:bg-gray-200 transition flex items-center gap-4"
                                >
                                    <Icon name="Search" size={32} />
                                    <div className="text-left flex-1">
                                        <div className="font-bold text-base">Á®ÆÁõÆ„ÇíÊ§úÁ¥¢</div>
                                        <div className="text-xs text-gray-500 mt-0.5">„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÈÅ∏Êäû</div>
                                    </div>
                                </button>

                                {/* ÊâãÂãï„Åß‰ΩúÊàêÔºà„Ç∞„É¨„ÉºËÉåÊôØ„ÄÅ„Ç∞„É¨„ÉºÊû†Ôºâ */}
                                <button
                                    type="button"
                                    onClick={() => setShowCustomExerciseForm(true)}
                                    className="w-full bg-gray-100 border-2 border-gray-300 text-gray-800 py-3 px-4 rounded-lg hover:bg-gray-200 transition flex items-center gap-4"
                                >
                                    <Icon name="Plus" size={32} />
                                    <div className="text-left flex-1">
                                        <div className="font-bold text-base">ÊâãÂãï„Åß‰ΩúÊàê</div>
                                        <div className="text-xs text-gray-500 mt-0.5">„Ç´„Çπ„Çø„É†Á®ÆÁõÆ„ÇíÁôªÈå≤</div>
                                    </div>
                                </button>

                                {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà - 12Êó•‰ª•‰∏ä„ÅßÈñãÊîæ */}
                                {unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id) && (
                                    <button
                                        type="button"
                                        onClick={() => setShowTemplates(!showTemplates)}
                                        className="w-full bg-gray-100 border-2 border-gray-300 text-gray-800 py-3 px-4 rounded-lg hover:bg-gray-200 transition flex items-center gap-4"
                                    >
                                        <Icon name="BookTemplate" size={32} />
                                        <div className="text-left flex-1">
                                            <div className="font-bold text-base">„ÉÜ„É≥„Éó„É¨„Éº„Éà</div>
                                            <div className="text-xs text-gray-500 mt-0.5">‰øùÂ≠ò„Åó„Åü„ÉØ„Éº„ÇØ„Ç¢„Ç¶„Éà„ÇíÂëº„Å≥Âá∫„Åô</div>
                                        </div>
                                    </button>
                                )}
                            </div>
                        )}

                        {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà„É¢„Éº„ÉÄ„É´ */}
                        {showTemplates && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                                <div className="bg-white rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto">
                                    <div className="sticky top-0 bg-white border-b p-4 flex justify-between items-center">
                                        <h3 className="text-lg font-bold">„ÉÜ„É≥„Éó„É¨„Éº„Éà</h3>
                                        <button
                                            onClick={() => setShowTemplates(false)}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={24} />
                                        </button>
                                    </div>
                                    <div className="p-4 space-y-3">
                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß */}
                                        {workoutTemplates.length > 0 ? (
                                            <div className="space-y-2">
                                                {workoutTemplates.map(template => {
                                                    // Á∑èÈáçÈáè„Å®Á∑èÊôÇÈñì„ÇíË®àÁÆó
                                                    let totalWeight = 0;
                                                    let totalDuration = 0;

                                                    template.exercises?.forEach(exercise => {
                                                        exercise.sets?.forEach(set => {
                                                            totalWeight += (set.weight || 0) * (set.reps || 0);
                                                            totalDuration += set.duration || 0;
                                                        });
                                                    });

                                                    return (
                                                        <details key={template.id} className="bg-gray-50 rounded-lg border border-gray-200">
                                                            <summary className="p-3 cursor-pointer hover:bg-gray-100 rounded-lg">
                                                                <div className="flex items-center justify-between">
                                                                    <div className="flex-1">
                                                                        <p className="font-medium">{template.name}</p>
                                                                        <p className="text-xs text-gray-600 mt-1">
                                                                            <span className="text-orange-600">Á∑èÈáçÈáè: {totalWeight}kg</span>
                                                                            <span className="text-orange-600 ml-2">Á∑èÊôÇÈñì: {totalDuration}ÂàÜ</span>
                                                                        </p>
                                                                    </div>
                                                                    <div className="flex items-center gap-2 ml-2">
                                                                        <button
                                                                            onClick={(e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                loadTemplate(template);
                                                                                setShowTemplates(false);
                                                                            }}
                                                                            className="p-2 text-blue-500 hover:text-blue-700"
                                                                        >
                                                                            <Icon name="Pencil" size={16} />
                                                                        </button>
                                                                        <button
                                                                            onClick={(e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                deleteTemplate(template.id);
                                                                            }}
                                                                            className="p-2 text-red-500 hover:text-red-700"
                                                                        >
                                                                            <Icon name="Trash2" size={16} />
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </summary>
                                                            <div className="px-3 pb-3 space-y-2">
                                                                {template.exercises?.map((exercise, exIdx) => (
                                                                    <div key={exIdx} className="text-sm border-t border-gray-200 pt-2">
                                                                        <p className="font-medium text-gray-800">{exercise.name}</p>
                                                                        <div className="ml-2 mt-1 space-y-1">
                                                                            {exercise.sets?.map((set, setIdx) => (
                                                                                <p key={setIdx} className="text-xs text-gray-600">
                                                                                    „Çª„ÉÉ„Éà{setIdx + 1}: {set.weight || 0}kg √ó {set.reps || 0}Âõû
                                                                                    {set.duration > 0 && ` (${set.duration}ÂàÜ)`}
                                                                                </p>
                                                                            ))}
                                                                        </div>
                                                                    </div>
                                                                ))}
                                                            </div>
                                                        </details>
                                                    );
                                                })}
                                            </div>
                                        ) : (
                                            <p className="text-sm text-gray-500 text-center py-8">‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                                        )}

                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊñ∞Ë¶è‰øùÂ≠ò */}
                                        {exercises.length > 0 && (
                                            <div className="pt-3 border-t border-gray-200">
                                                <p className="text-sm font-medium mb-2">Êñ∞„Åó„ÅÑ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶‰øùÂ≠ò</p>
                                                <div className="flex gap-2">
                                                    <input
                                                        type="text"
                                                        value={templateName}
                                                        onChange={(e) => setTemplateName(e.target.value)}
                                                        placeholder="„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêçÔºà‰æã: ËÉ∏„Éà„É¨1Ôºâ"
                                                        className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                                                    />
                                                    <button
                                                        onClick={() => {
                                                            saveAsTemplate();
                                                            setShowTemplates(false);
                                                        }}
                                                        className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition text-sm font-medium"
                                                    >
                                                        ‰øùÂ≠ò
                                                    </button>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Ê§úÁ¥¢„É¢„Éº„ÉÄ„É´ */}
                        {showSearchModal && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                                <div className="bg-white rounded-lg max-w-2xl w-full max-h-[85vh] overflow-hidden flex flex-col">
                                    {/* „Éò„ÉÉ„ÉÄ„Éº */}
                                    <div className="sticky top-0 bg-white border-b p-4">
                                        <div className="flex justify-between items-center mb-4">
                                            <h3 className="text-lg font-bold">Á®ÆÁõÆ„ÇíÊ§úÁ¥¢</h3>
                                            <button
                                                onClick={() => setShowSearchModal(false)}
                                                className="text-gray-500 hover:text-gray-700"
                                            >
                                                <Icon name="X" size={24} />
                                            </button>
                                        </div>

                                        {/* Ê§úÁ¥¢Ê¨Ñ */}
                                        <input
                                            type="text"
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                            placeholder="Á®ÆÁõÆ„ÇíÊ§úÁ¥¢..."
                                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:outline-none"
                                        />

                                        {/* Á≠ã„Éà„É¨/ÊúâÈÖ∏Á¥†/„Çπ„Éà„É¨„ÉÉ„ÉÅ „Çø„Éñ */}
                                        <div className="grid grid-cols-3 mt-3 border-b border-gray-200">
                                            <button
                                                onClick={() => setExerciseTab('strength')}
                                                className={`py-3 px-4 font-medium transition flex items-center justify-center gap-2 border-b-2 ${
                                                    exerciseTab === 'strength'
                                                        ? 'border-orange-600 text-orange-600'
                                                        : 'border-transparent text-gray-600 hover:text-orange-600'
                                                }`}
                                            >
                                                <Icon name="Dumbbell" size={20} />
                                                <span className="text-sm">Á≠ã„Éà„É¨</span>
                                            </button>
                                            <button
                                                onClick={() => setExerciseTab('cardio')}
                                                className={`py-3 px-4 font-medium transition flex items-center justify-center gap-2 border-b-2 ${
                                                    exerciseTab === 'cardio'
                                                        ? 'border-blue-600 text-blue-600'
                                                        : 'border-transparent text-gray-600 hover:text-blue-600'
                                                }`}
                                            >
                                                <Icon name="Heart" size={20} />
                                                <span className="text-sm">ÊúâÈÖ∏Á¥†</span>
                                            </button>
                                            <button
                                                onClick={() => setExerciseTab('stretch')}
                                                className={`py-3 px-4 font-medium transition flex items-center justify-center gap-2 border-b-2 ${
                                                    exerciseTab === 'stretch'
                                                        ? 'border-green-600 text-green-600'
                                                        : 'border-transparent text-gray-600 hover:text-green-600'
                                                }`}
                                            >
                                                <Icon name="Wind" size={20} />
                                                <span className="text-sm">„Çπ„Éà„É¨„ÉÉ„ÉÅ</span>
                                            </button>
                                        </div>
                                    </div>

                                    {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ */}
                                    <div className="flex-1 overflow-y-auto p-4 space-y-3">
                                        <div className="space-y-2">
                                            {(() => {
                                                // ÈÉ®‰Ωç„Åî„Å®„Å´„Ç∞„É´„Éº„ÉóÂåñ
                                                const categorizedExercises = {};

                                                // „Çø„Éñ„Å´Âøú„Åò„Å¶„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                                                const strengthCategories = ['ËÉ∏', 'ËÉå‰∏≠', 'ËÑö', 'ËÇ©', 'ËÖï', 'ËÖπÁ≠ã„Éª‰ΩìÂππ', 'Â∞ª', '„Ç¶„Ç®„Ç§„Éà„É™„Éï„ÉÜ„Ç£„É≥„Ç∞'];
                                                const cardioCategories = ['ÊúâÈÖ∏Á¥†ÈÅãÂãï'];
                                                const stretchCategories = ['„Çπ„Éà„É¨„ÉÉ„ÉÅ'];

                                                filteredExercises.forEach(ex => {
                                                    let shouldInclude = false;
                                                    if (exerciseTab === 'strength' && strengthCategories.includes(ex.category)) {
                                                        shouldInclude = true;
                                                    } else if (exerciseTab === 'cardio' && cardioCategories.includes(ex.category)) {
                                                        shouldInclude = true;
                                                    } else if (exerciseTab === 'stretch' && stretchCategories.includes(ex.category)) {
                                                        shouldInclude = true;
                                                    }

                                                    if (shouldInclude) {
                                                        if (!categorizedExercises[ex.category]) {
                                                            categorizedExercises[ex.category] = {};
                                                        }
                                                        if (!categorizedExercises[ex.category][ex.subcategory]) {
                                                            categorizedExercises[ex.category][ex.subcategory] = [];
                                                        }
                                                        categorizedExercises[ex.category][ex.subcategory].push(ex);
                                                    }
                                                });

                                                return Object.keys(categorizedExercises).map(category => (
                                                    <div key={category}>
                                                        {/* ÈÉ®‰Ωç„Éò„ÉÉ„ÉÄ„ÉºÔºàÁ¨¨1ÈöéÂ±§Ôºâ */}
                                                        <div className="bg-white">
                                                            <div className="border-t border-gray-200">
                                                                {/* ÈÉ®‰Ωç„Éú„Çø„É≥ */}
                                                                <button
                                                                    onClick={() => setExpandedCategories(prev => ({...prev, [category]: !prev[category]}))}
                                                                    className="w-full px-4 py-2 bg-gray-50 hover:bg-gray-100 flex justify-between items-center"
                                                                >
                                                                    <span className="font-medium text-sm">{category}</span>
                                                                    <Icon name={expandedCategories[category] ? 'ChevronDown' : 'ChevronRight'} size={18} />
                                                                </button>

                                                                {/* ÈÉ®‰Ωç„ÇíÂ±ïÈñã„Åó„Åü„ÇâÁ®ÆÈ°ûÔºà„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™Ôºâ„ÇíË°®Á§∫ */}
                                                                {expandedCategories[category] && (
                                                                    <div className="bg-gray-50">
                                                                        {Object.keys(categorizedExercises[category]).map(subcategory => (
                                                                            <div key={subcategory}>
                                                                                {/* Á®ÆÈ°û„Éú„Çø„É≥ÔºàÁ¨¨2ÈöéÂ±§Ôºâ */}
                                                                                <button
                                                                                    onClick={() => setExpandedCategories(prev => ({...prev, [category + '_' + subcategory]: !prev[category + '_' + subcategory]}))}
                                                                                    className="w-full px-4 py-2 bg-white hover:bg-gray-50 flex justify-between items-center border-t border-gray-200"
                                                                                >
                                                                                    <span className="text-sm text-gray-700 pl-4">{subcategory}</span>
                                                                                    <Icon name={expandedCategories[category + '_' + subcategory] ? 'ChevronDown' : 'ChevronRight'} size={16} />
                                                                                </button>

                                                                                {/* Á®ÆÈ°û„ÇíÂ±ïÈñã„Åó„Åü„Çâ„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß„ÇíË°®Á§∫ */}
                                                                                {expandedCategories[category + '_' + subcategory] && (
                                                                                    <div className="p-2 space-y-1 bg-gray-50">
                                                                                        {categorizedExercises[category][subcategory].map(exercise => (
                                                                                            <button
                                                                                                key={exercise.id}
                                                                                                onClick={() => {
                                                                                                    setCurrentExercise(exercise);
                                                                                                    setShowSearchModal(false);
                                                                                                }}
                                                                                                className="w-full text-left px-3 py-3 hover:bg-orange-50 transition border-b last:border-b-0 border-gray-100 bg-white rounded"
                                                                                            >
                                                                                                <div className="flex justify-between items-center">
                                                                                                    <div>
                                                                                                        <p className="font-medium text-sm">{exercise.name}</p>
                                                                                                        <p className="text-xs text-gray-500">{exercise.equipment}</p>
                                                                                                    </div>
                                                                                                    <span className="text-xs bg-gray-100 px-2 py-1 rounded-full">
                                                                                                        {exercise.difficulty}
                                                                                                    </span>
                                                                                                </div>
                                                                                            </button>
                                                                                        ))}
                                                                                    </div>
                                                                                )}
                                                                            </div>
                                                                        ))}
                                                                    </div>
                                                                )}
                                                            </div>
                                                        </div>
                                                    </div>
                                                ));
                                            })()}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* „Ç´„Çπ„Çø„É†Á®ÆÁõÆ‰ΩúÊàê„Éï„Ç©„Éº„É† */}
                        {showCustomExerciseForm && (
                            <div className="bg-gray-50 p-4 rounded-lg border border-gray-300">
                                <h4 className="font-bold mb-3">„Ç´„Çπ„Çø„É†Á®ÆÁõÆ„Çí‰ΩúÊàê</h4>
                                <div className="space-y-3">
                                    <div>
                                        <label className="block text-sm font-medium mb-1">Á®ÆÁõÆÂêç</label>
                                        <input
                                            type="text"
                                            value={customExerciseData.name}
                                            onChange={(e) => setCustomExerciseData({...customExerciseData, name: e.target.value})}
                                            placeholder="‰æã: „Éû„Ç§„Éà„É¨„Éº„Éã„É≥„Ç∞"
                                            className="w-full px-3 py-2 border rounded-lg"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium mb-1">„Ç´„ÉÜ„Ç¥„É™</label>
                                        <select
                                            value={customExerciseData.category}
                                            onChange={(e) => setCustomExerciseData({...customExerciseData, category: e.target.value})}
                                            className="w-full px-3 py-2 border rounded-lg"
                                        >
                                            <option value="ËÉ∏">ËÉ∏</option>
                                            <option value="ËÉå‰∏≠">ËÉå‰∏≠</option>
                                            <option value="ËÑö">ËÑö</option>
                                            <option value="ËÇ©">ËÇ©</option>
                                            <option value="ËÖï">ËÖï</option>
                                            <option value="ËÖπÁ≠ã„Éª‰ΩìÂππ">ËÖπÁ≠ã„Éª‰ΩìÂππ</option>
                                            <option value="Â∞ª">Â∞ª</option>
                                            <option value="ÊúâÈÖ∏Á¥†ÈÅãÂãï">ÊúâÈÖ∏Á¥†ÈÅãÂãï</option>
                                            <option value="„Çπ„Éà„É¨„ÉÉ„ÉÅ">„Çπ„Éà„É¨„ÉÉ„ÉÅ</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium mb-1">Á®ÆÈ°û</label>
                                        <select
                                            value={customExerciseData.subcategory}
                                            onChange={(e) => setCustomExerciseData({...customExerciseData, subcategory: e.target.value})}
                                            className="w-full px-3 py-2 border rounded-lg"
                                        >
                                            <option value="„Ç≥„É≥„Éë„Ç¶„É≥„Éâ">„Ç≥„É≥„Éë„Ç¶„É≥„Éâ</option>
                                            <option value="„Ç¢„Ç§„ÇΩ„É¨„Éº„Ç∑„Éß„É≥">„Ç¢„Ç§„ÇΩ„É¨„Éº„Ç∑„Éß„É≥</option>
                                            <option value="ÊåÅ‰πÖÁ≥ª">ÊåÅ‰πÖÁ≥ª</option>
                                            <option value="HIIT">HIIT</option>
                                            <option value="„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„Çπ„Éà„É¨„ÉÉ„ÉÅ">„ÉÄ„Ç§„Éä„Éü„ÉÉ„ÇØ„Çπ„Éà„É¨„ÉÉ„ÉÅ</option>
                                            <option value="„Çπ„Çø„ÉÜ„Ç£„ÉÉ„ÇØ„Çπ„Éà„É¨„ÉÉ„ÉÅ">„Çπ„Çø„ÉÜ„Ç£„ÉÉ„ÇØ„Çπ„Éà„É¨„ÉÉ„ÉÅ</option>
                                        </select>
                                    </div>
                                    <div className="flex gap-2">
                                        <button
                                            onClick={() => {
                                                if (!customExerciseData.name.trim()) {
                                                    alert('Á®ÆÁõÆÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                                                    return;
                                                }
                                                const customExercise = {
                                                    id: Date.now(),
                                                    name: customExerciseData.name,
                                                    category: customExerciseData.category,
                                                    subcategory: customExerciseData.subcategory,
                                                    exerciseType: 'anaerobic',
                                                    isCustom: true
                                                };
                                                setCurrentExercise(customExercise);
                                                setShowCustomExerciseForm(false);
                                                setCustomExerciseData({ name: '', category: 'ËÉ∏', subcategory: '„Ç≥„É≥„Éë„Ç¶„É≥„Éâ' });
                                            }}
                                            className="flex-1 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition font-medium"
                                        >
                                            ‰ΩúÊàê„Åó„Å¶ÈÅ∏Êäû
                                        </button>
                                        <button
                                            onClick={() => {
                                                setShowCustomExerciseForm(false);
                                                setCustomExerciseData({ name: '', category: 'ËÉ∏', subcategory: '„Ç≥„É≥„Éë„Ç¶„É≥„Éâ' });
                                            }}
                                            className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition"
                                        >
                                            „Ç≠„É£„É≥„Çª„É´
                                        </button>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Á®ÆÁõÆÈÅ∏ÊäûÂæå„ÅÆÂÖ•Âäõ„Éï„Ç©„Éº„É† */}
                        {currentExercise && (
                            <div className="space-y-4">
                                <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                                    <div className="flex justify-between items-start mb-2">
                                        <div>
                                            <h4 className="font-bold text-lg">{currentExercise.name}</h4>
                                            <p className="text-sm text-gray-600">{currentExercise.category}</p>
                                        </div>
                                        <button
                                            onClick={() => {
                                                setCurrentExercise(null);
                                                setSets([]);
                                            }}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={20} />
                                        </button>
                                    </div>
                                </div>

                                {/* „Çπ„Éà„É¨„ÉÉ„ÉÅ„ÉªÊúâÈÖ∏Á¥†Á®ÆÁõÆ„ÅÆÂ†¥ÂêàÔºöÊôÇÈñì„ÅÆ„ÅøÂÖ•Âäõ */}
                                {(currentExercise.exerciseType === 'stretch' || currentExercise.exerciseType === 'aerobic') ? (
                                    <div className="space-y-3">
                                        {/* Á∑èÊôÇÈñìÂÖ•Âäõ */}
                                        <div>
                                            <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                                Á∑èÊôÇÈñì (ÂàÜ)
                                            </label>
                                            <div className="mb-3">
                                                <input
                                                    type="range"
                                                    min="0"
                                                    max="120"
                                                    step="1"
                                                    value={currentSet.duration || 0}
                                                    onChange={(e) => setCurrentSet({...currentSet, duration: Number(e.target.value)})}
                                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
                                                    style={{
                                                        background: `linear-gradient(to right, #2563eb 0%, #2563eb ${((currentSet.duration || 0)/120)*100}%, #e5e7eb ${((currentSet.duration || 0)/120)*100}%, #e5e7eb 100%)`
                                                    }}
                                                />
                                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                                    <span onClick={() => setCurrentSet({...currentSet, duration: 0})} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">0ÂàÜ</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, duration: 30})} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">30ÂàÜ</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, duration: 60})} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">60ÂàÜ</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, duration: 90})} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">90ÂàÜ</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, duration: 120})} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">120ÂàÜ</span>
                                                </div>
                                            </div>
                                            <input
                                                type="number"
                                                value={currentSet.duration || 0}
                                                onChange={(e) => setCurrentSet({...currentSet, duration: Number(e.target.value)})}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                                            />
                                        </div>

                                        {/* „Çª„ÉÉ„ÉàËøΩÂä†„Éú„Çø„É≥ */}
                                        <button
                                            type="button"
                                            onClick={() => {
                                                if (!currentSet.duration || currentSet.duration === 0) {
                                                    alert('ÊôÇÈñì„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                                                    return;
                                                }
                                                setSets([...sets, {...currentSet}]);
                                                setCurrentSet({ duration: currentSet.duration });
                                            }}
                                            className="w-full py-3 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 transition flex items-center justify-center gap-2"
                                        >
                                            <Icon name="Plus" size={18} />
                                            „Çª„ÉÉ„Éà„ÇíËøΩÂä†
                                        </button>

                                        {/* ËøΩÂä†Ê∏à„Åø„Çª„ÉÉ„Éà„É™„Çπ„Éà */}
                                        {sets.length > 0 && (
                                            <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
                                                <p className="text-xs font-bold text-blue-700 mb-2">ËøΩÂä†Ê∏à„ÅøÔºà{sets.length}„Çª„ÉÉ„ÉàÔºâ</p>
                                                <div className="space-y-1">
                                                    {sets.map((set, idx) => (
                                                        <div key={idx} className="flex justify-between items-center text-sm bg-white p-2 rounded">
                                                            <span className="font-medium">„Çª„ÉÉ„Éà{idx + 1}</span>
                                                            <span className="text-gray-600">{set.duration}ÂàÜ</span>
                                                            <button
                                                                onClick={() => setSets(sets.filter((_, i) => i !== idx))}
                                                                className="text-red-500 hover:text-red-700"
                                                            >
                                                                <Icon name="X" size={16} />
                                                            </button>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                ) : (
                                    <div className="space-y-3">
                                        {/* ÈÄöÂ∏∏„ÅÆÈÅãÂãïÔºöÈáçÈáè„ÉªÂõûÊï∞„ÉªÂèØÂãïË∑ùÈõ¢ÂÖ•Âäõ */}
                                        {/* ÈáçÈáèÂÖ•Âäõ */}
                                        <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            ÈáçÈáè (kg)
                                                <button
                                                    type="button"
                                                    onClick={() => setWorkoutInfoModal({
                                                        show: true,
                                                        title: '„Éà„É¨„Éº„Éã„É≥„Ç∞ÈáçÈáèÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                        content: `‰ΩøÁî®„Åó„ÅüÈáçÈáè„Çí„Ç≠„É≠„Ç∞„É©„É†Âçò‰Ωç„ÅßÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶Â§ß„Åæ„Åã„Å™ÈáçÈáè„ÇíË®≠ÂÆöÔºà0ÔΩû500kgÔºâ
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà100kg„ÄÅ200kg„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ
4. Â¢óÊ∏õ„Éú„Çø„É≥Ôºà-10ÔΩû+10Ôºâ„ÅßÂæÆË™øÊï¥

„ÄêÂÖ•Âäõ„ÅÆÁõÆÂÆâ„Äë
‚Ä¢ „ÉÄ„É≥„Éô„É´: ÁâáÊâã„ÅÆÈáçÈáèÔºà‰æã: 10kgÔºâ
‚Ä¢ „Éê„Éº„Éô„É´: „Éó„É¨„Éº„ÉàËæº„Åø„ÅÆÁ∑èÈáçÈáèÔºà‰æã: 60kgÔºâ
‚Ä¢ „Éû„Ç∑„É≥: ÈÅ∏Êäû„Åó„Åü„Ç¶„Çß„Ç§„Éà„ÅÆÈáçÈáè
‚Ä¢ Ëá™Èáç„Éà„É¨„Éº„Éã„É≥„Ç∞: ‰ΩìÈáç„ÇíÂÖ•Âäõ

„ÄêPGÂºè„Åß„ÅÆÊ¥ªÁî®„Äë
ÈáçÈáè„ÅØÈÅãÂãïÂº∑Â∫¶„ÅÆÈáçË¶Å„Å™ÊåáÊ®ô„Åß„Åô„ÄÇPGÂºè„Åß„ÅØ„ÄÅÈáçÈáè„Å®ÂõûÊï∞„ÄÅÂèØÂãïË∑ùÈõ¢„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶Áâ©ÁêÜÁöÑ‰ªï‰∫ãÈáè„ÇíÁÆóÂá∫„Åó„ÄÅÊ≠£Á¢∫„Å™Ê∂àË≤ª„Ç´„É≠„É™„Éº„ÇíË®àÁÆó„Åó„Åæ„Åô„ÄÇ`
                                                    })}
                                                    className="text-indigo-600 hover:text-indigo-800"
                                                >
                                                    <Icon name="Info" size={14} />
                                                </button>
                                            </label>
                                            {/* „Çπ„É©„Ç§„ÉÄ„Éº - ÈáçÈáè */}
                                            <div className="mb-3">
                                                <input
                                                    type="range"
                                                    min="0"
                                                    max="500"
                                                    step="2.5"
                                                    value={currentSet.weight || 0}
                                                    onChange={(e) => setCurrentSet({...currentSet, weight: e.target.value === '' ? 0 : Number(e.target.value)})}
                                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-orange-600"
                                                    style={{
                                                        background: `linear-gradient(to right, #ea580c 0%, #ea580c ${((currentSet.weight || 0)/500)*100}%, #e5e7eb ${((currentSet.weight || 0)/500)*100}%, #e5e7eb 100%)`
                                                    }}
                                                />
                                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 0})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">0kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 100})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">100kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 200})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">200kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 300})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">300kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 400})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">400kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 500})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">500kg</span>
                                                </div>
                                            </div>
                                            <input
                                                type="number"
                                                value={currentSet.weight || 0}
                                                onChange={(e) => setCurrentSet({...currentSet, weight: e.target.value === '' ? 0 : Number(e.target.value)})}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:outline-none"
                                            />
                                            {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                                            <div className="grid grid-cols-6 gap-1 mt-2">
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Math.max(0, Number(currentSet.weight) - 10)})}
                                                    className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                                >
                                                    -10
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Math.max(0, Number(currentSet.weight) - 5)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Math.max(0, Number(currentSet.weight) - 2.5)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -2.5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Number(currentSet.weight) + 2.5})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +2.5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Number(currentSet.weight) + 5})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Number(currentSet.weight) + 10})}
                                                    className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                                >
                                                    +10
                                                </button>
                                            </div>
                                    </div>

                                    {/* ÂõûÊï∞ÂÖ•Âäõ */}
                                    <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            ÂõûÊï∞
                                                <button
                                                    type="button"
                                                    onClick={() => setWorkoutInfoModal({
                                                        show: true,
                                                        title: '„Éà„É¨„Éº„Éã„É≥„Ç∞ÂõûÊï∞ÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                        content: `1„Çª„ÉÉ„Éà„ÅßÂÆüÊñΩ„Åó„ÅüÂõûÊï∞Ôºà„É¨„ÉÉ„ÉóÊï∞Ôºâ„ÇíÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶ÂõûÊï∞„ÇíË®≠ÂÆöÔºà1ÔΩû50ÂõûÔºâ
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà10Âõû„ÄÅ20Âõû„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ
4. Â¢óÊ∏õ„Éú„Çø„É≥Ôºà-5/-3/-1/+1/+3/+5Ôºâ„ÅßÂæÆË™øÊï¥

„Äê„Éà„É¨„Éº„Éã„É≥„Ç∞ÁõÆÁöÑÂà•„ÅÆÁõÆÂÆâ„Äë
‚Ä¢ Á≠ãÂäõÂêë‰∏ä: 1ÔΩû5ÂõûÔºàÈ´òÈáçÈáèÔºâ
‚Ä¢ Á≠ãËÇ•Â§ß: 6ÔΩû12ÂõûÔºà‰∏≠ÈáçÈáèÔºâ
‚Ä¢ Á≠ãÊåÅ‰πÖÂäõ: 13Âõû‰ª•‰∏äÔºà‰ΩéÔΩû‰∏≠ÈáçÈáèÔºâ
‚Ä¢ ÊúâÈÖ∏Á¥†ÈÅãÂãï: Á∂ôÁ∂öÊôÇÈñì„ÇíÁ∑èÊôÇÈñì„Å´ÂÖ•Âäõ

„ÄêPGÂºè„Åß„ÅÆÊ¥ªÁî®„Äë
ÂõûÊï∞„ÅØÈÅãÂãï„ÅÆË≥™„ÇíÁ§∫„ÅôÊåáÊ®ô„Åß„Åô„ÄÇÈáçÈáè√óÂõûÊï∞√óÂèØÂãïË∑ùÈõ¢„ÅßÁâ©ÁêÜÁöÑ‰ªï‰∫ãÈáè„ÅåÊ±∫„Åæ„Çä„ÄÅ„Åù„Çå„ÅåPGÂºè„Å´„Çà„ÇãÁ≤æÂØÜ„Å™Ê∂àË≤ª„Ç´„É≠„É™„ÉºË®àÁÆó„ÅÆÂü∫Á§é„Å®„Å™„Çä„Åæ„Åô„ÄÇ`
                                                    })}
                                                    className="text-indigo-600 hover:text-indigo-800"
                                                >
                                                    <Icon name="Info" size={14} />
                                                </button>
                                            </label>
                                            {/* „Çπ„É©„Ç§„ÉÄ„Éº - ÂõûÊï∞ */}
                                            <div className="mb-2">
                                                <input
                                                    type="range"
                                                    min="1"
                                                    max="50"
                                                    step="1"
                                                    value={currentSet.reps || 1}
                                                    onChange={(e) => setCurrentSet({...currentSet, reps: e.target.value === '' ? 1 : Number(e.target.value)})}
                                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-orange-600"
                                                    style={{
                                                        background: `linear-gradient(to right, #ea580c 0%, #ea580c ${((currentSet.reps || 1)/50)*100}%, #e5e7eb ${((currentSet.reps || 1)/50)*100}%, #e5e7eb 100%)`
                                                    }}
                                                />
                                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 1})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">1Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 10})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">10Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 20})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">20Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 30})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">30Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 40})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">40Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 50})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">50Âõû</span>
                                                </div>
                                            </div>
                                            <input
                                                type="number"
                                                value={currentSet.reps || 1}
                                                onChange={(e) => setCurrentSet({...currentSet, reps: e.target.value === '' ? 1 : Number(e.target.value)})}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:outline-none"
                                            />
                                            {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                                            <div className="grid grid-cols-6 gap-1 mt-2">
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Math.max(1, Number(currentSet.reps) - 5)})}
                                                    className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                                >
                                                    -5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Math.max(1, Number(currentSet.reps) - 3)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -3
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Math.max(1, Number(currentSet.reps) - 1)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -1
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Number(currentSet.reps) + 1})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +1
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Number(currentSet.reps) + 3})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +3
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Number(currentSet.reps) + 5})}
                                                    className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                                >
                                                    +5
                                                </button>
                                            </div>
                                    </div>

                                    {/* RMÊõ¥Êñ∞Ë®òÈå≤ÔºàÂ∏∏Ë®≠Ôºâ */}
                                    <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            RMÊõ¥Êñ∞Ë®òÈå≤Ôºà‰ªªÊÑèÔºâ
                                            <button
                                                type="button"
                                                onClick={() => setWorkoutInfoModal({
                                                    show: true,
                                                    title: 'RMÊõ¥Êñ∞Ë®òÈå≤„Å®„ÅØÔºü',
                                                    content: `„Åì„ÅÆÁ®ÆÁõÆ„ÅßËá™Â∑±„Éô„Çπ„ÉàÔºàRM: Repetition MaximumÔºâ„ÇíÊõ¥Êñ∞„Åó„ÅüÂ†¥Âêà„Å´Ë®òÈå≤„Åó„Åæ„Åô„ÄÇ

„ÄêRM„Å®„ÅØ„Äë
‚Ä¢ 1RM: 1Âõû„Å†„ÅëÊåô„Åí„Çâ„Çå„ÇãÊúÄÂ§ßÈáçÈáè
‚Ä¢ 5RM: 5Âõû„Å†„ÅëÊåô„Åí„Çâ„Çå„ÇãÊúÄÂ§ßÈáçÈáè
‚Ä¢ 10RM: 10Âõû„Å†„ÅëÊåô„Åí„Çâ„Çå„ÇãÊúÄÂ§ßÈáçÈáè

„ÄêË®òÈå≤‰æã„Äë
‚Ä¢ „Éô„É≥„ÉÅ„Éó„É¨„Çπ 1reps √ó 100kg
‚Ä¢ „Çπ„ÇØ„ÉØ„ÉÉ„Éà 5reps √ó 120kg
‚Ä¢ „Éá„ÉÉ„Éâ„É™„Éï„Éà 3reps √ó 150kg

„ÄêÊ¥ªÁî®ÊñπÊ≥ï„Äë
Â±•Ê≠¥ÁîªÈù¢„ÅßRMÊõ¥Êñ∞„ÅÆË®òÈå≤„ÇíÁ¢∫Ë™ç„Åß„Åç„ÄÅÁ≠ãÂäõ„ÅÆÊàêÈï∑„ÇíÂèØË¶ñÂåñ„Åß„Åç„Åæ„Åô„ÄÇÁõÆÊ®ôÈÅîÊàê„ÅÆ„É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥Á∂≠ÊåÅ„Å´ÂΩπÁ´ã„Å°„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÂΩ¢Âºè„Äë
„ÄåÁ®ÆÁõÆÂêç ÂõûÊï∞reps √ó ÈáçÈáèkg„Äç„ÅÆÂΩ¢Âºè„ÅßÂÖ•Âäõ„Åô„Çã„Å®Ë¶ã„ÇÑ„Åô„Åè„Å™„Çä„Åæ„Åô„ÄÇ
‰æã: „Éô„É≥„ÉÅ„Éó„É¨„Çπ 1reps √ó 100kg`
                                                })}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="Info" size={14} />
                                            </button>
                                        </label>
                                        <input
                                            type="text"
                                            value={currentSet.rmUpdate || ''}
                                            onChange={(e) => setCurrentSet({...currentSet, rmUpdate: e.target.value})}
                                            placeholder="‰æã: „Éô„É≥„ÉÅ„Éó„É¨„Çπ 1reps √ó 100kg"
                                            className="w-full px-3 py-2 border rounded-lg"
                                        />
                                    </div>

                                    {/* Á∑èÊôÇÈñìÔºàÂ∏∏Ë®≠Ôºâ */}
                                    <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            Á∑èÊôÇÈñì (ÂàÜ)
                                            <button
                                                type="button"
                                                onClick={() => setWorkoutInfoModal({
                                                    show: true,
                                                    title: 'Á∑èÊôÇÈñì„Å®„ÅØÔºü',
                                                    content: `„Åì„ÅÆÁ®ÆÁõÆ„Å´Ë≤ª„ÇÑ„Åó„ÅüÁ∑èÊôÇÈñì„ÇíÂàÜÂçò‰Ωç„ÅßÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ„Ç¶„Ç©„Éº„É†„Ç¢„ÉÉ„Éó„Åã„Çâ„ÇØ„Éº„É´„ÉÄ„Ç¶„É≥„Åæ„Åß„ÅÆÂÖ®‰ΩìÊôÇÈñì„Åß„Åô„ÄÇ

„ÄêÂÖ•Âäõ„ÅÆÁõÆÂÆâ„Äë
‚Ä¢ Á≠ã„Éà„É¨: 5ÔΩû15ÂàÜ/Á®ÆÁõÆÔºà„Çª„ÉÉ„ÉàÈñì‰ºëÊÜ©Âê´„ÇÄÔºâ
‚Ä¢ ÊúâÈÖ∏Á¥†ÈÅãÂãï: ÂÆüÊñΩ„Åó„ÅüÊôÇÈñìÔºà‰æã: „É©„É≥„Éã„É≥„Ç∞30ÂàÜÔºâ
‚Ä¢ „Çπ„Éà„É¨„ÉÉ„ÉÅ: ÂÆüÊñΩ„Åó„ÅüÊôÇÈñì

„ÄêÊÑèÂõ≥„Äë
Á∑èÊôÇÈñì„ÅØ„ÄÅ„Çª„ÉÉ„ÉàÈñì„ÅÆ‰ºëÊÜ©ÊôÇÈñì„ÇÑÊ∫ñÂÇôÂãï‰Ωú„ÇÇÂê´„ÇÅ„ÅüÁ∑èÂêàÁöÑ„Å™ÈÅãÂãïÊôÇÈñì„ÇíÊääÊè°„Åô„Çã„Åü„ÇÅ„ÅÆÊåáÊ®ô„Åß„Åô„ÄÇÁâπ„Å´ÊúâÈÖ∏Á¥†ÈÅãÂãï„ÇÑÊåÅ‰πÖÁ≥ª„Éà„É¨„Éº„Éã„É≥„Ç∞„Åß„ÅØÈáçË¶Å„Å™ÂÖ•ÂäõÈ†ÖÁõÆ„Å®„Å™„Çä„Åæ„Åô„ÄÇ

„Äê„Ç™„Éó„Ç∑„Éß„É≥„Äë
„Åì„ÅÆÈ†ÖÁõÆ„ÅØ‰ªªÊÑèÂÖ•Âäõ„Åß„Åô„ÄÇÁ©∫Ê¨Ñ„ÅÆÂ†¥Âêà„ÅØ‰ªñ„ÅÆ„Éë„É©„É°„Éº„Çø„Åã„ÇâÊ∂àË≤ª„Ç´„É≠„É™„Éº„ÇíÁÆóÂá∫„Åó„Åæ„Åô„ÄÇ`
                                                })}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="Info" size={14} />
                                            </button>
                                        </label>
                                        <input
                                            type="number"
                                            value={currentSet.duration}
                                            onChange={(e) => setCurrentSet({...currentSet, duration: e.target.value === '' ? '' : Number(e.target.value)})}
                                            placeholder="„Åì„ÅÆÁ®ÆÁõÆ„Å´„Åã„Åã„Å£„ÅüÊôÇÈñì"
                                            className="w-full px-3 py-2 border rounded-lg"
                                        />
                                    </div>

                                    {/* „Çª„ÉÉ„ÉàËøΩÂä†„Éú„Çø„É≥ÔºàÁ≠ã„Éà„É¨„ÅÆ„ÅøÔºö„Ç¢„ÉÉ„Éó„Çª„ÉÉ„Éà/„É°„Ç§„É≥„Çª„ÉÉ„ÉàÔºâ */}
                                    {currentExercise.exerciseType === 'anaerobic' ? (
                                        <div className="grid grid-cols-2 gap-2">
                                            <button
                                                onClick={() => {
                                                    setSets([...sets, { ...currentSet, setType: 'warmup' }]);
                                                }}
                                                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center justify-center gap-2"
                                            >
                                                <Icon name="Zap" size={20} />
                                                <span>„Ç¢„ÉÉ„Éó„Çª„ÉÉ„ÉàËøΩÂä†</span>
                                            </button>
                                            <button
                                                onClick={() => {
                                                    setSets([...sets, { ...currentSet, setType: 'main' }]);
                                                }}
                                                className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 flex items-center justify-center gap-2"
                                            >
                                                <Icon name="Plus" size={20} />
                                                <span>„É°„Ç§„É≥„Çª„ÉÉ„ÉàËøΩÂä†</span>
                                            </button>
                                        </div>
                                    ) : (
                                        <button
                                            onClick={() => {
                                                setSets([...sets, { ...currentSet }]);
                                            }}
                                            className="w-full px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 flex items-center justify-center gap-2"
                                        >
                                            <Icon name="Plus" size={20} />
                                            <span>„Çª„ÉÉ„ÉàËøΩÂä†</span>
                                        </button>
                                    )}

                                    {sets.length > 0 && (
                                        <div className="bg-gray-50 p-3 rounded-lg">
                                            <p className="text-sm font-medium mb-2">„Çª„ÉÉ„Éà‰∏ÄË¶ß</p>
                                            {sets.map((set, index) => (
                                                <div key={index} className="border-b border-gray-200 py-2 text-sm last:border-0">
                                                    <div className="flex justify-between items-center mb-1">
                                                        <div className="flex items-center gap-2">
                                                            <span className="font-medium">Set {index + 1}</span>
                                                            {currentExercise.exerciseType === 'anaerobic' && (
                                                                <>
                                                                    {set.setType === 'warmup' ? (
                                                                        <span className="px-2 py-0.5 bg-blue-100 text-blue-700 rounded text-xs font-medium">
                                                                            „Ç¢„ÉÉ„Éó
                                                                        </span>
                                                                    ) : (
                                                                        <span className="px-2 py-0.5 bg-orange-100 text-orange-700 rounded text-xs font-medium">
                                                                            „É°„Ç§„É≥
                                                                        </span>
                                                                    )}
                                                                </>
                                                            )}
                                                        </div>
                                                        <button
                                                            onClick={() => setSets(sets.filter((_, i) => i !== index))}
                                                            className="text-red-500 hover:text-red-700 p-1"
                                                        >
                                                            <Icon name="Trash2" size={16} />
                                                        </button>
                                                    </div>
                                                    <div className="text-xs text-gray-600 space-y-0.5">
                                                        {currentExercise.exerciseType === 'anaerobic' ? (
                                                            <>
                                                                <div><span>ÈáçÈáè: {set.weight}kg</span></div>
                                                                <div><span>ÂõûÊï∞: {set.reps}Âõû</span></div>
                                                                <div><span>‰ΩìÁ©ç: {calculateSetVolume(set)} kg√óreps</span></div>
                                                            </>
                                                        ) : (
                                                            <div><span>ÊôÇÈñì: {set.duration || 0}ÂàÜ</span></div>
                                                        )}
                                                    </div>
                                                </div>
                                            ))}
                                            {currentExercise.exerciseType === 'anaerobic' && (
                                                <div className="border-t mt-2 pt-2 space-y-1">
                                                    <div className="flex justify-between text-sm text-gray-600">
                                                        <span>Á∑è‰ΩìÁ©ç</span>
                                                        <span>{sets.reduce((sum, s) => sum + calculateSetVolume(s), 0)} kg√óreps</span>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>
                                )}

                                <button
                                    onClick={() => {
                                        if (sets.length === 0) return;

                                        console.log('[Á®ÆÁõÆ„ÇíËøΩÂä†] currentExercise:', currentExercise);
                                        console.log('[Á®ÆÁõÆ„ÇíËøΩÂä†] sets:', sets);

                                        // ÊúâÈÖ∏Á¥†„Éª„Çπ„Éà„É¨„ÉÉ„ÉÅ„ÅÆÂ†¥Âêà„ÅØ„ÄÅÁ®ÆÁõÆÂêç„Å®Á∑èÊôÇÈñì„ÅÆ„ÅøË®òÈå≤
                                        let newExercise;
                                        if (currentExercise.exerciseType === 'aerobic' || currentExercise.exerciseType === 'stretch') {
                                            // Á∑èÊôÇÈñì„ÇíË®àÁÆó
                                            const totalDuration = sets.reduce((sum, set) => sum + (set.duration || 0), 0);
                                            newExercise = {
                                                exercise: currentExercise,
                                                duration: totalDuration, // Á∑èÊôÇÈñì„ÅÆ„Åø
                                                totalDuration: totalDuration,
                                                exerciseType: currentExercise.exerciseType
                                            };
                                            console.log('[Á®ÆÁõÆ„ÇíËøΩÂä†] ÊúâÈÖ∏Á¥†/„Çπ„Éà„É¨„ÉÉ„ÉÅ newExercise:', newExercise);
                                        } else {
                                            // Á≠ã„Éà„É¨„ÅÆÂ†¥Âêà„ÅØÂæìÊù•ÈÄö„ÇäÔºà„Çª„ÉÉ„ÉàË©≥Á¥∞„ÇíÂê´„ÇÄÔºâ
                                            newExercise = {
                                                exercise: currentExercise,
                                                sets: sets,
                                                exerciseType: currentExercise.exerciseType
                                            };
                                            console.log('[Á®ÆÁõÆ„ÇíËøΩÂä†] Á≠ã„Éà„É¨ newExercise:', newExercise);
                                        }

                                        console.log('[Á®ÆÁõÆ„ÇíËøΩÂä†] exercisesÈÖçÂàó„Å´ËøΩÂä†:', newExercise);
                                        setExercises([...exercises, newExercise]);
                                        setCurrentExercise(null);
                                        setSets([]);
                                    }}
                                    disabled={sets.length === 0}
                                    className="w-full bg-orange-600 text-white font-bold py-3 rounded-lg hover:bg-orange-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    Á®ÆÁõÆ„ÇíËøΩÂä†
                                </button>
                            </div>
                        )}

                        {/* ËøΩÂä†Ê∏à„ÅøÁ®ÆÁõÆ„É™„Çπ„Éà */}
                        {exercises.length > 0 && !currentExercise && (
                            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                                <p className="text-sm font-bold text-blue-700 mb-3">ËøΩÂä†Ê∏à„ÅøÔºà{exercises.length}Á®ÆÁõÆÔºâ</p>

                                {/* Á®ÆÁõÆ‰∏ÄË¶ß */}
                                <div className="space-y-2 mb-3">
                                    {exercises.map((ex, index) => {
                                        // ÊúâÈÖ∏Á¥†„Éª„Çπ„Éà„É¨„ÉÉ„ÉÅ„ÅÆÂ†¥Âêà„ÅØÁ∑èÊôÇÈñì„ÅÆ„Åø„ÄÅÁ≠ã„Éà„É¨„ÅÆÂ†¥Âêà„ÅØÁ∑èÈáçÈáè„ÇÇË®àÁÆó
                                        const isCardioOrStretch = ex.exerciseType === 'aerobic' || ex.exerciseType === 'stretch';

                                        let totalVolume = 0;
                                        let totalDuration = 0;

                                        if (isCardioOrStretch) {
                                            // ÊúâÈÖ∏Á¥†„Éª„Çπ„Éà„É¨„ÉÉ„ÉÅ: duration„ÅÆ„Åø
                                            totalDuration = ex.duration || 0;
                                        } else {
                                            // Á≠ã„Éà„É¨: sets„Åã„ÇâË®àÁÆó
                                            totalVolume = ex.sets.reduce((sum, set) => {
                                                return sum + (set.weight || 0) * (set.reps || 0);
                                            }, 0);
                                            totalDuration = ex.sets.reduce((sum, set) => {
                                                return sum + (set.duration || 0);
                                            }, 0);
                                        }

                                        return (
                                            <div key={index} className="bg-white p-3 rounded-lg border border-gray-200">
                                                <div className="flex justify-between items-start mb-1">
                                                    <div className="flex-1">
                                                        <p className="font-medium text-sm">{ex.exercise.name}</p>
                                                        {isCardioOrStretch ? (
                                                            <p className="text-xs text-gray-600">{totalDuration}ÂàÜ</p>
                                                        ) : (
                                                            <p className="text-xs text-gray-600">{ex.sets.length}„Çª„ÉÉ„Éà - {totalVolume}kg</p>
                                                        )}
                                                    </div>
                                                    <div className="flex gap-2">
                                                        <button
                                                            onClick={() => {
                                                                // Á∑®ÈõÜÔºöË©≤ÂΩìÁ®ÆÁõÆ„ÇícurrentExercise„Å´Êàª„Åô
                                                                setCurrentExercise(ex.exercise);
                                                                if (isCardioOrStretch) {
                                                                    // ÊúâÈÖ∏Á¥†„Éª„Çπ„Éà„É¨„ÉÉ„ÉÅ„ÅØÊôÇÈñì„Çí1„Çª„ÉÉ„Éà„Å®„Åó„Å¶Êâ±„ÅÜ
                                                                    setSets([{ duration: ex.duration }]);
                                                                } else {
                                                                    setSets(ex.sets);
                                                                }
                                                                setExercises(exercises.filter((_, i) => i !== index));
                                                            }}
                                                            className="text-blue-600 hover:text-blue-800"
                                                        >
                                                            <Icon name="Edit2" size={16} />
                                                        </button>
                                                        <button
                                                            onClick={() => setExercises(exercises.filter((_, i) => i !== index))}
                                                            className="text-red-500 hover:text-red-700"
                                                        >
                                                            <Icon name="Trash2" size={16} />
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        );
                                    })}
                                </div>

                                {/* Á∑èÈáçÈáè„ÉªÁ∑èÊôÇÈñì„ÅÆË°®Á§∫ */}
                                <div className="grid grid-cols-2 gap-4 p-3 bg-white rounded-lg border border-gray-200 mb-3">
                                    {/* Á∑èÈáçÈáè: Á≠ã„Éà„É¨„ÅÆ„ÅøË°®Á§∫ */}
                                    {exercises.some(ex => ex.exerciseType === 'anaerobic') && (
                                        <div className="text-center">
                                            <p className="text-xs text-gray-600 mb-1">Á∑èÈáçÈáè</p>
                                            <p className="text-lg font-bold text-orange-600">
                                                {exercises.reduce((sum, ex) => {
                                                    if (ex.exerciseType === 'anaerobic' && ex.sets) {
                                                        return sum + ex.sets.reduce((setSum, set) => {
                                                            return setSum + (set.weight || 0) * (set.reps || 0);
                                                        }, 0);
                                                    }
                                                    return sum;
                                                }, 0)}kg
                                            </p>
                                        </div>
                                    )}
                                    {/* Á∑èÊôÇÈñì: „Åô„Åπ„Å¶„ÅÆÁ®ÆÁõÆ„ÅßË°®Á§∫ */}
                                    <div className="text-center">
                                        <p className="text-xs text-gray-600 mb-1">Á∑èÊôÇÈñì</p>
                                        <p className="text-lg font-bold text-blue-600">
                                            {exercises.reduce((sum, ex) => {
                                                if (ex.exerciseType === 'aerobic' || ex.exerciseType === 'stretch') {
                                                    // ÊúâÈÖ∏Á¥†„Éª„Çπ„Éà„É¨„ÉÉ„ÉÅ: duration„ÇíÁõ¥Êé•Âä†ÁÆó
                                                    return sum + (ex.duration || 0);
                                                } else if (ex.sets) {
                                                    // Á≠ã„Éà„É¨: sets„Åã„ÇâË®àÁÆó
                                                    return sum + ex.sets.reduce((setSum, set) => {
                                                        return setSum + (set.duration || 0);
                                                    }, 0);
                                                }
                                                return sum;
                                            }, 0)}ÂàÜ
                                        </p>
                                    </div>
                                </div>

                                {/* Á®ÆÁõÆ„ÇíËøΩÂä†„Éú„Çø„É≥ */}
                                <button
                                    onClick={() => setShowSearchModal(true)}
                                    className="w-full bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition mb-2"
                                >
                                    Á®ÆÁõÆ„ÇíËøΩÂä†
                                </button>

                                {/* Ë®òÈå≤„Éú„Çø„É≥ */}
                                <div className="grid grid-cols-2 gap-2">
                                    <button
                                        onClick={handleWorkoutSave}
                                        className="bg-orange-600 text-white font-bold py-3 rounded-lg hover:bg-orange-700 transition"
                                    >
                                        Ë®òÈå≤
                                    </button>
                                    <button
                                        onClick={onClose}
                                        className="bg-gray-300 text-gray-700 font-bold py-3 rounded-lg hover:bg-gray-400 transition"
                                    >
                                        „Ç≠„É£„É≥„Çª„É´
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                );
            };

// ========== ÈÅãÂãïË®òÈå≤„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÁµÇ‰∫Ü ==========

            const renderFoodInput = () => {

                // ÊõñÊòßÊ§úÁ¥¢Áî®„ÅÆ„Éò„É´„Éë„ÉºÈñ¢Êï∞
                const fuzzyMatch = (text, query) => {
                    if (!query || query.trim() === '') return true;
                    // „Å≤„Çâ„Åå„Å™„ÄÅ„Ç´„Çø„Ç´„Éä„ÄÅÊº¢Â≠ó„ÅÆÊ≠£Ë¶èÂåñ
                    const normalize = (str) => {
                        return str
                            .toLowerCase()
                            .replace(/[ÔºàÔºâ\(\)]/g, '') // Êã¨Âºß„ÇíÂâäÈô§
                            .replace(/[\u3041-\u3096]/g, (m) => String.fromCharCode(m.charCodeAt(0) + 0x60)) // „Å≤„Çâ„Åå„Å™‚Üí„Ç´„Çø„Ç´„Éä
                            .replace(/\s+/g, ''); // Á©∫ÁôΩÂâäÈô§
                    };
                    const normalizedText = normalize(text);
                    const normalizedQuery = normalize(query);
                    return normalizedText.includes(normalizedQuery);
                };

                // Helper function to map foodDatabase format to tracking format
                const mapNutrients = (food) => {
                    const vitamins = {
                        A: food.vitaminA || 0,
                        D: food.vitaminD || 0,
                        E: food.vitaminE || 0,
                        K: food.vitaminK || 0,
                        B1: food.vitaminB1 || 0,
                        B2: food.vitaminB2 || 0,
                        B3: food.niacin || 0,
                        B5: food.pantothenicAcid || 0,
                        B6: food.vitaminB6 || 0,
                        B7: food.biotin || 0,
                        B9: food.folicAcid || 0,
                        B12: food.vitaminB12 || 0,
                        C: food.vitaminC || 0
                    };
                    const minerals = {
                        calcium: food.calcium || 0,
                        iron: food.iron || 0,
                        magnesium: food.magnesium || 0,
                        phosphorus: food.phosphorus || 0,
                        potassium: food.potassium || 0,
                        sodium: food.sodium || 0,
                        zinc: food.zinc || 0,
                        copper: food.copper || 0,
                        manganese: food.manganese || 0,
                        selenium: food.selenium || 0,
                        iodine: food.iodine || 0,
                        chromium: food.chromium || 0
                    };
                    return {
                        vitamins,
                        minerals,
                        caffeine: food.caffeine || 0,
                        catechin: food.catechin || 0,
                        tannin: food.tannin || 0,
                        polyphenol: food.polyphenol || 0,
                        chlorogenicAcid: food.chlorogenicAcid || 0,
                        creatine: food.creatine || 0,
                        lArginine: food.lArginine || 0,
                        lCarnitine: food.lCarnitine || 0,
                        EPA: food.EPA || 0,
                        DHA: food.DHA || 0,
                        coQ10: food.coQ10 || 0,
                        lutein: food.lutein || 0,
                        astaxanthin: food.astaxanthin || 0
                    };
                };

                // AIÈ£ü‰∫ãË™çË≠ò„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
                const handleFoodsRecognized = (recognizedFoods) => {
                    // Ë™çË≠ò„Åï„Çå„ÅüÈ£üÊùê„ÇíÁõ¥Êé•addedItems„Å´ËøΩÂä†
                    const newItems = recognizedFoods.map(food => {
                        // „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâË©≤ÂΩìÈ£üÊùê„ÇíÊé¢„Åô
                        let foundFood = null;
                        let foundCategory = null;
                        Object.keys(foodDB).forEach(cat => {
                            if (foodDB[cat][food.name]) {
                                foundFood = foodDB[cat][food.name];
                                foundCategory = cat;
                            }
                        });

                        if (foundFood) {
                            const nutrients = mapNutrients(foundFood);
                            return {
                                name: food.name,
                                amount: food.amount,
                                ...foundFood,
                                category: foundCategory,
                                ...nutrients
                            };
                        } else {
                            // DB„Å´Ë¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç´„Çπ„Çø„É†È£üÊùê„Å®„Åó„Å¶Êâ±„ÅÜ
                            return {
                                name: food.name,
                                amount: food.amount,
                                calories: food.estimatedCalories || 0,
                                protein: food.estimatedProtein || 0,
                                fat: food.estimatedFat || 0,
                                carbs: food.estimatedCarbs || 0,
                                category: '„Ç´„Çπ„Çø„É†',
                                vitamins: {},
                                minerals: {}
                            };
                        }
                    });

                    setAddedItems([...addedItems, ...newItems]);
                    setShowAIFoodRecognition(false);
                };

                // ÈöéÂ±§Âåñ„Åï„Çå„Åü„Ç´„ÉÜ„Ç¥„É™ÊßãÈÄ†„ÇíÊßãÁØâ
                const hierarchicalCategories = {
                    'È£üÊùê': {},
                    '„Çµ„Éó„É™„É°„É≥„Éà': {}
                };

                Object.keys(foodDB).forEach(category => {
                    // „Çµ„Éó„É™„É°„É≥„Éà„Ç´„ÉÜ„Ç¥„É™„ÅÆÂ†¥Âêà„ÄÅ„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™„Åî„Å®„Å´ÂàÜÈ°û
                    if (category === '„Çµ„Éó„É™„É°„É≥„Éà') {
                        const supplementsBySubcategory = {};
                        const drinkItems = [];

                        Object.keys(foodDB[category]).forEach(itemName => {
                            const item = foodDB[category][itemName];
                            const subcategory = item.subcategory || '„Åù„ÅÆ‰ªñ';

                            if (fuzzyMatch(itemName, searchTerm)) {
                                // „Éâ„É™„É≥„ÇØ„ÅØÈ£üÊùê„Ç´„ÉÜ„Ç¥„É™„Å´ÁßªÂãï
                                if (subcategory === '„Éâ„É™„É≥„ÇØ') {
                                    drinkItems.push(itemName);
                                } else {
                                    if (!supplementsBySubcategory[subcategory]) {
                                        supplementsBySubcategory[subcategory] = [];
                                    }
                                    supplementsBySubcategory[subcategory].push(itemName);
                                }
                            }
                        });

                        // „Éâ„É™„É≥„ÇØ„ÇíÈ£üÊùê„Ç´„ÉÜ„Ç¥„É™„Å´ËøΩÂä†
                        if (drinkItems.length > 0) {
                            hierarchicalCategories['È£üÊùê']['„Éâ„É™„É≥„ÇØ'] = drinkItems;
                        }

                        // „Çµ„Éó„É™„É°„É≥„Éà„ÅÆÂêÑ„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™„ÇíËøΩÂä†Ôºà„Éâ„É™„É≥„ÇØÈô§„ÅèÔºâ
                        Object.keys(supplementsBySubcategory).forEach(subcategory => {
                            if (supplementsBySubcategory[subcategory].length > 0) {
                                hierarchicalCategories['„Çµ„Éó„É™„É°„É≥„Éà'][subcategory] = supplementsBySubcategory[subcategory];
                            }
                        });
                    } else {
                        // ÈÄöÂ∏∏„ÅÆÈ£üÊùê„Ç´„ÉÜ„Ç¥„É™
                        const items = Object.keys(foodDB[category]).filter(name =>
                            fuzzyMatch(name, searchTerm)
                        );
                        if (items.length > 0) {
                            hierarchicalCategories['È£üÊùê'][category] = items;
                        }
                    }
                });

                // „Ç´„Çπ„Çø„É†È£üÊùê„ÇíÈ£üÊùêÈÖç‰∏ã„Å´ËøΩÂä†
                const customFoods = JSON.parse(localStorage.getItem('customFoods') || '[]');
                const filteredCustomFoods = customFoods.filter(food =>
                    food.itemType === 'food' && fuzzyMatch(food.name, searchTerm)
                );
                if (filteredCustomFoods.length > 0) {
                    hierarchicalCategories['È£üÊùê']['„Ç´„Çπ„Çø„É†È£üÊùê'] = filteredCustomFoods.map(f => f.name);
                }

                // „Ç´„Çπ„Çø„É†ÊñôÁêÜ„ÇíÊúÄ‰∏ä‰Ωç„Å´ËøΩÂä†
                const filteredCustomRecipes = customFoods.filter(food =>
                    food.itemType === 'recipe' && fuzzyMatch(food.name, searchTerm)
                );
                if (filteredCustomRecipes.length > 0) {
                    hierarchicalCategories['„Ç´„Çπ„Çø„É†ÊñôÁêÜ'] = { '„Ç´„Çπ„Çø„É†ÊñôÁêÜ': filteredCustomRecipes.map(f => f.name) };
                }

                const filteredFoods = hierarchicalCategories;

                // „ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠ò
                const saveAsTemplate = async () => {
                    if (!templateName.trim() || addedItems.length === 0) {
                        alert('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„ÄÅÈ£üÊùê„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }
                    const template = {
                        id: Date.now(),
                        name: templateName,
                        items: addedItems
                    };
                    await DataService.saveMealTemplate(user.uid, template);
                    const templates = await DataService.getMealTemplates(user.uid);
                    setMealTemplates(templates);
                    alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                    setTemplateName('');
                };

                const loadTemplate = (template) => {
                    // „Éá„Ç£„Éº„Éó„Ç≥„Éî„Éº„Åó„Å¶ÂèÇÁÖß„ÇíÂàá„ÇãÔºàË§áË£Ω‰∏çÂÖ∑Âêà„ÇíÈò≤Ê≠¢Ôºâ
                    const copiedItems = JSON.parse(JSON.stringify(template.items));
                    setAddedItems(copiedItems);
                    setMealName(template.name);
                };

                const deleteTemplate = async (templateId) => {
                    if (confirm('„Åì„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
                        await DataService.deleteMealTemplate(user.uid, templateId);
                        const templates = await DataService.getMealTemplates(user.uid);
                        setMealTemplates(templates);
                    }
                };

                return (
                    <div className="space-y-4">
                        {/* ‚ë†È£ü‰∫ãÂêçÂÖ•Âäõ */}
                        <div>
                            <label className="block text-sm font-medium mb-2">È£ü‰∫ãÂêç</label>
                            <input
                                type="text"
                                value={mealName}
                                onChange={(e) => setMealName(e.target.value)}
                                placeholder="ÊúùÈ£ü„ÄÅ1È£üÁõÆ„Å™„Å©..."
                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                            />
                        </div>

                        {/* ‚ë°„Å©„ÅÜ„ÇÑ„Å£„Å¶Ë®òÈå≤„Åó„Åæ„Åô„ÅãÔºü */}
                        {!selectedItem && !showAIFoodRecognition && !showCustomSupplementForm && !editingMeal && (
                            <div className="space-y-3">
                                <p className="text-center text-base font-medium text-gray-700 mb-4">„Å©„ÅÜ„ÇÑ„Å£„Å¶Ë®òÈå≤„Åó„Åæ„Åô„ÅãÔºü</p>

                                {/* ÂÜôÁúü„Åã„ÇâË®òÈå≤ÔºàÈªíËÉåÊôØÔºâ */}
                                <button
                                    type="button"
                                    onClick={() => setShowAIFoodRecognition(true)}
                                    className="w-full bg-black text-white py-3 px-4 rounded-lg hover:bg-gray-900 transition flex items-center gap-4"
                                >
                                    <Icon name="Camera" size={32} />
                                    <div className="text-left flex-1">
                                        <div className="font-bold text-base">ÂÜôÁúü„Åã„ÇâË®òÈå≤</div>
                                        <div className="text-xs text-gray-400 mt-0.5">ÊñôÁêÜ„ÅÆÂÜôÁúü„ÇíAI„ÅåËß£Êûê</div>
                                    </div>
                                </button>

                                {/* È£üÊùê„ÇíÊ§úÁ¥¢Ôºà„Ç∞„É¨„ÉºËÉåÊôØ„ÄÅ„Ç∞„É¨„ÉºÊû†Ôºâ */}
                                <button
                                    type="button"
                                    onClick={() => setShowSearchModal(true)}
                                    className="w-full bg-gray-100 border-2 border-gray-300 text-gray-800 py-3 px-4 rounded-lg hover:bg-gray-200 transition flex items-center gap-4"
                                >
                                    <Icon name="Search" size={32} />
                                    <div className="text-left flex-1">
                                        <div className="font-bold text-base">È£üÊùê„ÇíÊ§úÁ¥¢</div>
                                        <div className="text-xs text-gray-500 mt-0.5">„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÈÅ∏Êäû</div>
                                    </div>
                                </button>

                                {/* ÊâãÂãï„Åß‰ΩúÊàêÔºà„Ç∞„É¨„ÉºËÉåÊôØ„ÄÅ„Ç∞„É¨„ÉºÊû†Ôºâ */}
                                <button
                                    type="button"
                                    onClick={() => setShowCustomSupplementForm(true)}
                                    className="w-full bg-gray-100 border-2 border-gray-300 text-gray-800 py-3 px-4 rounded-lg hover:bg-gray-200 transition flex items-center gap-4"
                                >
                                    <Icon name="Plus" size={32} />
                                    <div className="text-left flex-1">
                                        <div className="font-bold text-base">ÊâãÂãï„Åß‰ΩúÊàê</div>
                                        <div className="text-xs text-gray-500 mt-0.5">„Ç´„Çπ„Çø„É†È£üÊùê„ÇíÁôªÈå≤</div>
                                    </div>
                                </button>

                                {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà - 12Êó•‰ª•‰∏ä„ÅßÈñãÊîæ */}
                                {unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id) && (
                                    <button
                                        type="button"
                                        onClick={() => setShowTemplates(!showTemplates)}
                                        className="w-full bg-gray-100 border-2 border-gray-300 text-gray-800 py-3 px-4 rounded-lg hover:bg-gray-200 transition flex items-center gap-4"
                                    >
                                        <Icon name="BookTemplate" size={32} />
                                        <div className="text-left flex-1">
                                            <div className="font-bold text-base">„ÉÜ„É≥„Éó„É¨„Éº„Éà</div>
                                            <div className="text-xs text-gray-500 mt-0.5">‰øùÂ≠ò„Åó„ÅüÈ£ü‰∫ã„ÇíÂëº„Å≥Âá∫„Åô</div>
                                        </div>
                                    </button>
                                )}
                            </div>
                        )}

                        {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà„É¢„Éº„ÉÄ„É´ */}
                        {showTemplates && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                                <div className="bg-white rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto">
                                    <div className="sticky top-0 bg-white border-b p-4 flex justify-between items-center">
                                        <h3 className="text-lg font-bold">„ÉÜ„É≥„Éó„É¨„Éº„Éà</h3>
                                        <button
                                            onClick={() => setShowTemplates(false)}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={24} />
                                        </button>
                                    </div>
                                    <div className="p-4 space-y-3">
                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß */}
                                        {mealTemplates.length > 0 ? (
                                            <div className="space-y-2">
                                                {mealTemplates.map(template => {
                                                    // Á∑è„Ç´„É≠„É™„Éº„Å®PFC„ÇíË®àÁÆó
                                                    let totalCalories = 0;
                                                    let totalProtein = 0;
                                                    let totalFat = 0;
                                                    let totalCarbs = 0;

                                                    template.items.forEach(item => {
                                                        totalCalories += item.calories || 0;
                                                        totalProtein += item.protein || 0;
                                                        totalFat += item.fat || 0;
                                                        totalCarbs += item.carbs || 0;
                                                    });

                                                    return (
                                                        <details key={template.id} className="bg-gray-50 rounded-lg border border-gray-200">
                                                            <summary className="p-3 cursor-pointer hover:bg-gray-100 rounded-lg">
                                                                <div className="flex items-center justify-between">
                                                                    <div className="flex-1">
                                                                        <p className="font-medium">{template.name}</p>
                                                                        <p className="text-xs text-gray-600 mt-1">
                                                                            {Math.round(totalCalories)}kcal
                                                                            <span className="text-red-600 ml-2">P:{Math.round(totalProtein)}g</span>
                                                                            <span className="text-yellow-600 ml-1">F:{Math.round(totalFat)}g</span>
                                                                            <span className="text-green-600 ml-1">C:{Math.round(totalCarbs)}g</span>
                                                                        </p>
                                                                    </div>
                                                                    <div className="flex items-center gap-2 ml-2">
                                                                        <button
                                                                            onClick={(e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                loadTemplate(template);
                                                                                setShowTemplates(false);
                                                                            }}
                                                                            className="p-2 text-blue-500 hover:text-blue-700"
                                                                        >
                                                                            <Icon name="Pencil" size={16} />
                                                                        </button>
                                                                        <button
                                                                            onClick={(e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                deleteTemplate(template.id);
                                                                            }}
                                                                            className="p-2 text-red-500 hover:text-red-700"
                                                                        >
                                                                            <Icon name="Trash2" size={16} />
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </summary>
                                                            <div className="px-3 pb-3 space-y-1">
                                                                {template.items.map((item, idx) => (
                                                                    <div key={idx} className="text-sm text-gray-700 py-1 border-t border-gray-200">
                                                                        <span className="font-medium">{item.name}</span>
                                                                        <span className="text-gray-500 ml-2">{item.amount}</span>
                                                                        <span className="text-xs text-gray-500 ml-2">
                                                                            ({Math.round(item.calories)}kcal
                                                                            <span className="text-red-600 ml-1">P:{Math.round(item.protein)}g</span>
                                                                            <span className="text-yellow-600 ml-1">F:{Math.round(item.fat)}g</span>
                                                                            <span className="text-green-600 ml-1">C:{Math.round(item.carbs)}g</span>)
                                                                        </span>
                                                                    </div>
                                                                ))}
                                                            </div>
                                                        </details>
                                                    );
                                                })}
                                            </div>
                                        ) : (
                                            <p className="text-sm text-gray-500 text-center py-8">‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                                        )}

                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊñ∞Ë¶è‰øùÂ≠ò */}
                                        {addedItems.length > 0 && (
                                            <div className="pt-3 border-t border-gray-200">
                                                <p className="text-sm font-medium mb-2">Êñ∞„Åó„ÅÑ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶‰øùÂ≠ò</p>
                                                <div className="flex gap-2">
                                                    <input
                                                        type="text"
                                                        value={templateName}
                                                        onChange={(e) => setTemplateName(e.target.value)}
                                                        placeholder="„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêçÔºà‰æã: ÊúùÈ£ü„Éë„Çø„Éº„É≥1Ôºâ"
                                                        className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                                                    />
                                                    <button
                                                        onClick={() => {
                                                            saveAsTemplate();
                                                            setShowTemplates(false);
                                                        }}
                                                        className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition text-sm font-medium"
                                                    >
                                                        ‰øùÂ≠ò
                                                    </button>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Ê§úÁ¥¢„É¢„Éº„ÉÄ„É´ */}
                        {showSearchModal && (
                            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                                <div className="bg-white rounded-lg max-w-2xl w-full max-h-[85vh] overflow-hidden flex flex-col">
                                    {/* „Éò„ÉÉ„ÉÄ„Éº */}
                                    <div className="sticky top-0 bg-white border-b p-4">
                                        <div className="flex justify-between items-center mb-4">
                                            <h3 className="text-lg font-bold">È£üÊùê„ÇíÊ§úÁ¥¢</h3>
                                            <button
                                                onClick={() => setShowSearchModal(false)}
                                                className="text-gray-500 hover:text-gray-700"
                                            >
                                                <Icon name="X" size={24} />
                                            </button>
                                        </div>

                                        {/* Ê§úÁ¥¢Ê¨Ñ */}
                                        <input
                                            type="text"
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                            placeholder="È£üÊùê„Éª„Çµ„Éó„É™„É°„É≥„Éà„ÇíÊ§úÁ¥¢..."
                                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                                        />

                                        {/* ËøΩÂä†Ê∏à„Åø„Ç¢„Ç§„ÉÜ„É†„É™„Çπ„Éà */}
                                        {addedItems.length > 0 && (
                                            <div className="mt-3 bg-blue-50 p-3 rounded-lg border border-blue-200">
                                                <p className="text-sm font-bold text-blue-700 mb-2">ËøΩÂä†Ê∏à„Åø ({addedItems.length}ÂìÅÁõÆ)</p>
                                                <div className="space-y-1 max-h-32 overflow-y-auto">
                                                    {addedItems.map((item, index) => (
                                                        <div key={index} className="bg-white px-3 py-1.5 rounded flex justify-between items-center">
                                                            <div className="flex-1">
                                                                <span className="text-xs font-medium">{item.name}</span>
                                                                <span className="text-xs text-gray-600 ml-2">
                                                                    {item.amount}{item.unit || 'g'}
                                                                </span>
                                                            </div>
                                                            <button
                                                                onClick={() => setAddedItems(addedItems.filter((_, i) => i !== index))}
                                                                className="text-red-500 hover:text-red-700 ml-2"
                                                            >
                                                                <Icon name="X" size={14} />
                                                            </button>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        {/* È£üÊùê/„Çµ„Éó„É™„É°„É≥„Éà „Çø„Éñ */}
                                        <div className="grid grid-cols-2 mt-3 border-b border-gray-200">
                                            <button
                                                onClick={() => setFoodOrSupplementTab('food')}
                                                className={`py-3 px-4 font-medium transition flex items-center justify-center gap-2 border-b-2 ${
                                                    foodOrSupplementTab === 'food'
                                                        ? 'border-green-600 text-green-600'
                                                        : 'border-transparent text-gray-600 hover:text-green-600'
                                                }`}
                                            >
                                                <Icon name="Apple" size={20} />
                                                <span className="text-sm">È£üÊùê</span>
                                            </button>
                                            <button
                                                onClick={() => setFoodOrSupplementTab('supplement')}
                                                className={`py-3 px-4 font-medium transition flex items-center justify-center gap-2 border-b-2 ${
                                                    foodOrSupplementTab === 'supplement'
                                                        ? 'border-blue-600 text-blue-600'
                                                        : 'border-transparent text-gray-600 hover:text-blue-600'
                                                }`}
                                            >
                                                <Icon name="Pill" size={20} />
                                                <span className="text-sm">„Çµ„Éó„É™„É°„É≥„Éà</span>
                                            </button>
                                        </div>
                                    </div>

                                    {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ */}
                                    <div className="flex-1 overflow-y-auto p-4 space-y-3">
                                {!selectedItem ? (
                                    <>
                                {/* „Çà„Åè‰Ωø„ÅÜÈ£üÊùêÔºà‰∫àÊ∏¨Ôºâ - 9Êó•‰ª•‰∏ä„ÅßÈñãÊîæ */}
                                {usageDays >= 9 && predictedData?.commonMeals && predictedData.commonMeals.length > 0 && !searchTerm && addedItems.length === 0 && (
                                    <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-3 rounded-lg border border-purple-200">
                                        <div className="flex items-center gap-2 mb-2">
                                            <Icon name="Sparkles" size={16} className="text-purple-600" />
                                            <p className="text-sm font-medium text-purple-800 flex items-center gap-2">
                                                „Çà„Åè‰Ωø„ÅÜÈ£üÊùê
                                            </p>
                                        </div>
                                        <div className="flex flex-wrap gap-2">
                                            {predictedData.commonMeals.map(foodName => {
                                                // „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâË©≤ÂΩìÈ£üÊùê„ÇíÊé¢„Åô
                                                let foundFood = null;
                                                let foundCategory = null;
                                                Object.keys(foodDB).forEach(cat => {
                                                    if (foodDB[cat][foodName]) {
                                                        foundFood = foodDB[cat][foodName];
                                                        foundCategory = cat;
                                                    }
                                                });

                                                if (!foundFood) return null;

                                                return (
                                                    <button
                                                        key={foodName}
                                                        onClick={() => {
                                                            const nutrients = mapNutrients(foundFood);
                                                            setSelectedItem({ name: foodName, ...foundFood, category: foundCategory, ...nutrients });
                                                            setAmount('100');
                                                        }}
                                                        className="px-3 py-1.5 bg-white border border-purple-300 rounded-full text-sm hover:bg-purple-100 transition"
                                                    >
                                                        {foodName}
                                                    </button>
                                                );
                                            })}
                                        </div>
                                    </div>
                                )}

                                <div className="space-y-2">
                                    {Object.keys(filteredFoods).map(topCategory => {
                                        const subcategories = filteredFoods[topCategory];
                                        if (Object.keys(subcategories).length === 0) return null;

                                        // „Çø„Éñ„Å´Âøú„Åò„Å¶„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                                        if (foodOrSupplementTab === 'food' && topCategory !== 'È£üÊùê' && topCategory !== '„Ç´„Çπ„Çø„É†ÊñôÁêÜ') return null;
                                        if (foodOrSupplementTab === 'supplement' && topCategory !== '„Çµ„Éó„É™„É°„É≥„Éà') return null;

                                        return (
                                            <div key={topCategory}>
                                                {/* „Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™ */}
                                                <div className="bg-white">
                                                    {Object.keys(subcategories).map(subCategory => (
                                                        <div key={subCategory} className="border-t border-gray-200">
                                                            {/* „Ç´„ÉÜ„Ç¥„É™Ë¶ãÂá∫„Åó */}
                                                            <button
                                                                onClick={() => setExpandedCategories(prev => ({...prev, [subCategory]: !prev[subCategory]}))}
                                                                className="w-full px-4 py-2 bg-gray-50 hover:bg-gray-100 flex justify-between items-center"
                                                            >
                                                                <span className="font-medium text-sm">{subCategory}</span>
                                                                <div className="flex items-center gap-2">
                                                                    <span className="text-xs text-gray-500">{subcategories[subCategory].length}ÂìÅÁõÆ</span>
                                                                    <Icon name={expandedCategories[subCategory] ? 'ChevronDown' : 'ChevronRight'} size={18} />
                                                                </div>
                                                            </button>

                                                            {/* „Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß - Êäò„Çä„Åü„Åü„ÅøÂèØËÉΩ */}
                                                            {expandedCategories[subCategory] && (
                                                            <div className="p-2 space-y-1 bg-gray-50">
                                                                {subcategories[subCategory].map(foodName => {
                                                                    // „Ç´„Çπ„Çø„É†È£üÊùê„Éª„Ç´„Çπ„Çø„É†ÊñôÁêÜ„ÅÆÂ†¥Âêà„ÅØlocalStorage„Åã„ÇâÂèñÂæó
                                                                    let food;
                                                                    let actualCategory;
                                                                    const isCustom = subCategory === '„Ç´„Çπ„Çø„É†È£üÊùê' || subCategory === '„Ç´„Çπ„Çø„É†ÊñôÁêÜ';

                                                                    if (isCustom) {
                                                                        const customFoods = JSON.parse(localStorage.getItem('customFoods') || '[]');
                                                                        food = customFoods.find(f => f.name === foodName);
                                                                        actualCategory = subCategory;
                                                                    } else if (topCategory === '„Çµ„Éó„É™„É°„É≥„Éà' || subCategory === '„Éâ„É™„É≥„ÇØ') {
                                                                        // „Çµ„Éó„É™„É°„É≥„Éà„Éª„Éâ„É™„É≥„ÇØ„ÅÆÂ†¥Âêà„ÅØ„Çµ„Éó„É™„É°„É≥„Éà„Ç´„ÉÜ„Ç¥„É™„Åã„ÇâÂèñÂæó
                                                                        food = foodDB['„Çµ„Éó„É™„É°„É≥„Éà'][foodName];
                                                                        actualCategory = subCategory === '„Éâ„É™„É≥„ÇØ' ? '„Éâ„É™„É≥„ÇØ' : '„Çµ„Éó„É™„É°„É≥„Éà';
                                                                    } else {
                                                                        // ÈÄöÂ∏∏„ÅÆÈ£üÊùê
                                                                        if (foodDB[subCategory] && foodDB[subCategory][foodName]) {
                                                                            food = foodDB[subCategory][foodName];
                                                                            actualCategory = subCategory;
                                                                        }
                                                                    }

                                                                            if (!food) return null;

                                                                            // PFC„ÅÆ„Ç´„É≠„É™„ÉºË®àÁÆó
                                                                            const pCal = parseFloat(food.protein) * 4;
                                                                            const fCal = parseFloat(food.fat) * 9;
                                                                            const cCal = parseFloat(food.carbs) * 4;

                                                                            // ÊúÄ„ÇÇÈ´ò„ÅÑÂâ≤Âêà„ÅÆÊ†ÑÈ§äÁ¥†„ÇíÂà§ÂÆö
                                                                            const maxCal = Math.max(pCal, fCal, cCal);
                                                                            let borderColor = 'border-gray-300';
                                                                            if (maxCal === pCal) borderColor = 'border-red-500';
                                                                            else if (maxCal === fCal) borderColor = 'border-yellow-500';
                                                                            else if (maxCal === cCal) borderColor = 'border-green-500';

                                                                            // Ë§áÊï∞ÈÅ∏ÊäûÁî®„ÅÆÂá¶ÁêÜ
                                                                            const nutrients = isCustom
                                                                                ? (food.vitamins && food.minerals ? { vitamins: food.vitamins, minerals: food.minerals } : { vitamins: {}, minerals: {} })
                                                                                : mapNutrients(food);

                                                                            const foodData = {
                                                                                id: foodName, // ID„Å®„Åó„Å¶ÂêçÂâç„Çí‰ΩøÁî®
                                                                                name: foodName,
                                                                                calories: food.calories,
                                                                                protein: parseFloat(food.protein),
                                                                                fat: parseFloat(food.fat),
                                                                                carbs: parseFloat(food.carbs),
                                                                                category: subCategory === '„Ç´„Çπ„Çø„É†ÊñôÁêÜ' ? 'ÊñôÁêÜ' : actualCategory,
                                                                                isCustom: isCustom,
                                                                                unit: food.unit,
                                                                                servingSize: food.servingSize,
                                                                                servingUnit: food.servingUnit,
                                                                                ...nutrients
                                                                            };

                                                                            return (
                                                                                <button
                                                                                    key={foodName}
                                                                                    onClick={() => {
                                                                                        setSelectedItem(foodData);
                                                                                        setShowSearchModal(false);
                                                                                    }}
                                                                                    className={`w-full text-left rounded-lg transition hover:bg-gray-50 border-l-4 ${borderColor} bg-white`}
                                                                                >
                                                                                    <div className="px-3 py-2">
                                                                                        <div className="flex-1">
                                                                                            <div className="flex justify-between items-start mb-1">
                                                                                                <span className="text-sm font-medium">{foodName}</span>
                                                                                                <span className="text-xs font-bold text-cyan-600">
                                                                                                    {food.calories}kcal
                                                                                                </span>
                                                                                            </div>
                                                                                            <div className="flex justify-between items-center">
                                                                                                <div className="flex gap-2 text-xs">
                                                                                                    <span className="text-red-600">P:{food.protein}g</span>
                                                                                                    <span className="text-yellow-600">F:{food.fat}g</span>
                                                                                                    <span className="text-green-600">C:{food.carbs}g</span>
                                                                                                </div>
                                                                                                <span className="text-xs text-gray-400">
                                                                                                    ‚Äª{(food.servingSize !== undefined && food.servingUnit !== undefined)
                                                                                                        ? `${food.servingSize}${food.servingUnit}`
                                                                                                        : (food.unit === 'g' || food.unit === 'ml')
                                                                                                            ? `100${food.unit}`
                                                                                                            : (food.unit && (food.unit.includes('ÂÄã') || food.unit.includes('Êú¨') || food.unit.includes('Êûö')))
                                                                                                                ? food.unit
                                                                                                                : food.unit || '1ÂÄã'}„ÅÇ„Åü„Çä
                                                                                                </span>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </button>
                                                                            );
                                                                        })}
                                                            </div>
                                                            )}
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        );
                                    })}
                                </div>
                                    </>
                                ) : (
                                    /* Ë©≥Á¥∞ÁîªÈù¢ÔºàÈáèË™øÊï¥UIÔºâ */
                                    <div className="space-y-4">
                                        {/* „Ç¢„Ç§„ÉÜ„É†ÊÉÖÂ†± */}
                                        <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                                            <div className="flex justify-between items-start mb-2">
                                                <div>
                                                    <h4 className="font-bold text-lg">{selectedItem.name}</h4>
                                                    <p className="text-sm text-gray-600">{selectedItem.category}</p>
                                                </div>
                                                <button
                                                    onClick={() => {
                                                        setSelectedItem(null);
                                                        setEditingItemIndex(null);
                                                    }}
                                                    className="text-gray-500 hover:text-gray-700"
                                                >
                                                    <Icon name="X" size={20} />
                                                </button>
                                            </div>
                                            <div className="grid grid-cols-4 gap-2 mt-3 text-sm">
                                                <div>
                                                    <p className="text-gray-600">„Ç´„É≠„É™„Éº</p>
                                                    <p className="font-bold" style={{color: '#7686BA'}}>{selectedItem.calories}kcal</p>
                                                </div>
                                                <div>
                                                    <p className="text-gray-600">P</p>
                                                    <p className="font-bold text-red-600">{selectedItem.protein}g</p>
                                                </div>
                                                <div>
                                                    <p className="text-gray-600">F</p>
                                                    <p className="font-bold text-yellow-600">{selectedItem.fat}g</p>
                                                </div>
                                                <div>
                                                    <p className="text-gray-600">C</p>
                                                    <p className="font-bold text-green-600">{selectedItem.carbs}g</p>
                                                </div>
                                            </div>
                                            <p className="text-xs text-gray-500 mt-2">
                                                ‚Äª{selectedItem.servingSize || 100}{selectedItem.servingUnit || 'g'}„ÅÇ„Åü„Çä
                                            </p>
                                        </div>

                                        {/* ÈáèË™øÊï¥ */}
                                        <div>
                                            <label className="block text-sm font-medium mb-2">
                                                Èáè ({selectedItem.servingUnit || 'g'})
                                            </label>

                                            {/* „Çπ„É©„Ç§„ÉÄ„Éº */}
                                            <div className="mb-3">
                                                <input
                                                    type="range"
                                                    min="0"
                                                    max="500"
                                                    step="5"
                                                    value={amount}
                                                    onChange={(e) => setAmount(e.target.value)}
                                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600"
                                                    style={{
                                                        background: `linear-gradient(to right, #4f46e5 0%, #4f46e5 ${(amount/500)*100}%, #e5e7eb ${(amount/500)*100}%, #e5e7eb 100%)`
                                                    }}
                                                />
                                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                                    <span onClick={() => setAmount(0)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">0{selectedItem.servingUnit || 'g'}</span>
                                                    <span onClick={() => setAmount(100)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">100{selectedItem.servingUnit || 'g'}</span>
                                                    <span onClick={() => setAmount(200)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">200{selectedItem.servingUnit || 'g'}</span>
                                                    <span onClick={() => setAmount(300)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">300{selectedItem.servingUnit || 'g'}</span>
                                                    <span onClick={() => setAmount(400)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">400{selectedItem.servingUnit || 'g'}</span>
                                                    <span onClick={() => setAmount(500)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">500{selectedItem.servingUnit || 'g'}</span>
                                                </div>
                                            </div>

                                            <input
                                                type="number"
                                                value={amount}
                                                onChange={(e) => setAmount(e.target.value)}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none mb-2"
                                            />

                                            {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                                            <div className="grid grid-cols-6 gap-1">
                                                <button
                                                    onClick={() => setAmount(Math.max(0, Number(amount) - 100))}
                                                    className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                                >
                                                    -100
                                                </button>
                                                <button
                                                    onClick={() => setAmount(Math.max(0, Number(amount) - 50))}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -50
                                                </button>
                                                <button
                                                    onClick={() => setAmount(Math.max(0, Number(amount) - 10))}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -10
                                                </button>
                                                <button
                                                    onClick={() => setAmount(Number(amount) + 10)}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +10
                                                </button>
                                                <button
                                                    onClick={() => setAmount(Number(amount) + 50)}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +50
                                                </button>
                                                <button
                                                    onClick={() => setAmount(Number(amount) + 100)}
                                                    className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                                >
                                                    +100
                                                </button>
                                            </div>
                                        </div>

                                        {/* ÊëÇÂèñÈáè„Éó„É¨„Éì„É•„Éº */}
                                        <div className="bg-gray-50 p-4 rounded-lg">
                                            <p className="text-sm font-medium mb-2">ÊëÇÂèñÈáè</p>
                                            <div className="grid grid-cols-4 gap-2">
                                                <div>
                                                    <p className="text-xs text-gray-600">„Ç´„É≠„É™„Éº</p>
                                                    <p className="font-bold" style={{color: '#7686BA'}}>
                                                        {(() => {
                                                            const servingSize = selectedItem.servingSize || 100;
                                                            const ratio = Number(amount) / servingSize;
                                                            console.log(`[ÊëÇÂèñÈáè] amount=${amount}, servingSize=${servingSize}, ratio=${ratio}, carbs=${selectedItem.carbs}, result=${selectedItem.carbs * ratio}`);
                                                            return Math.round(selectedItem.calories * ratio);
                                                        })()}kcal
                                                    </p>
                                                </div>
                                                <div>
                                                    <p className="text-xs text-gray-600">P</p>
                                                    <p className="font-bold text-red-600">{(selectedItem.protein * (Number(amount) / (selectedItem.servingSize || 100))).toFixed(1)}g</p>
                                                </div>
                                                <div>
                                                    <p className="text-xs text-gray-600">F</p>
                                                    <p className="font-bold text-yellow-600">{(selectedItem.fat * (Number(amount) / (selectedItem.servingSize || 100))).toFixed(1)}g</p>
                                                </div>
                                                <div>
                                                    <p className="text-xs text-gray-600">C</p>
                                                    <p className="font-bold text-green-600">{(selectedItem.carbs * (Number(amount) / (selectedItem.servingSize || 100))).toFixed(1)}g</p>
                                                </div>
                                            </div>
                                        </div>

                                        {/* ËøΩÂä†„Éú„Çø„É≥ */}
                                        <button
                                            onClick={() => {
                                                const numAmount = Number(amount);
                                                // „Éá„Éº„Çø„Éô„Éº„Çπ„ÅØservingSize„ÅÇ„Åü„Çä„ÅÆÂÄ§„Å™„ÅÆ„Åß„ÄÅservingSize„ÅßÂâ≤„Çã
                                                const baseAmount = selectedItem.servingSize || 100;
                                                const ratio = numAmount / baseAmount;

                                                const vitamins = {};
                                                const minerals = {};

                                                if (selectedItem.vitamins) {
                                                    Object.keys(selectedItem.vitamins).forEach(key => {
                                                        vitamins[key] = selectedItem.vitamins[key] * ratio;
                                                    });
                                                }

                                                if (selectedItem.minerals) {
                                                    Object.keys(selectedItem.minerals).forEach(key => {
                                                        minerals[key] = selectedItem.minerals[key] * ratio;
                                                    });
                                                }

                                                const otherNutrients = {};
                                                const otherNutrientKeys = ['caffeine', 'catechin', 'tannin', 'polyphenol', 'chlorogenicAcid',
                                                                            'creatine', 'lArginine', 'lCarnitine', 'EPA', 'DHA', 'coQ10',
                                                                            'lutein', 'astaxanthin'];
                                                otherNutrientKeys.forEach(key => {
                                                    if (selectedItem[key]) {
                                                        otherNutrients[key] = selectedItem[key] * ratio;
                                                    }
                                                });

                                                const newItem = {
                                                    name: selectedItem.name,
                                                    amount: numAmount,
                                                    unit: selectedItem.servingUnit || 'g', // Âçò‰Ωç„Çí‰øùÂ≠ò
                                                    protein: selectedItem.protein * ratio,
                                                    fat: selectedItem.fat * ratio,
                                                    carbs: selectedItem.carbs * ratio,
                                                    calories: selectedItem.calories * ratio,
                                                    vitamins: vitamins,
                                                    minerals: minerals,
                                                    otherNutrients: otherNutrients
                                                };

                                                if (editingItemIndex !== null) {
                                                    const updatedItems = [...addedItems];
                                                    updatedItems[editingItemIndex] = newItem;
                                                    setAddedItems(updatedItems);
                                                    setEditingItemIndex(null);
                                                } else {
                                                    setAddedItems([...addedItems, newItem]);
                                                }

                                                setSelectedItem(null);
                                                // „Éá„Éï„Ç©„É´„ÉàÈáè„Å´„É™„Çª„ÉÉ„ÉàÔºàselectedItem„Åånull„Å´„Å™„Çã„Å®useEffect„ÅØÁô∫ÁÅ´„Åó„Å™„ÅÑ„ÅÆ„ÅßÊâãÂãï„ÅßË®≠ÂÆöÔºâ
                                                setAmount(type === 'supplement' ? '1' : '100');
                                            }}
                                            className="w-full bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition"
                                        >
                                            {editingItemIndex !== null ? 'Êõ¥Êñ∞' : 'ËøΩÂä†'}
                                        </button>
                                    </div>
                                )}
                                    </div>
                                </div>
                            </div>
                        )}

                        {showCustomSupplementForm && (
                            <div className="bg-green-50 border border-green-200 p-4 rounded-lg">
                                <div className="flex justify-between items-center mb-4">
                                    <h3 className="font-bold text-green-800 flex items-center gap-2">
                                        <Icon name="Plus" size={20} />
                                        „Ç´„Çπ„Çø„É†„Ç¢„Ç§„ÉÜ„É†„Çí‰ΩúÊàê
                                    </h3>
                                    <button
                                        onClick={() => setShowCustomSupplementForm(false)}
                                        className="text-gray-500 hover:text-gray-700"
                                    >
                                        <Icon name="X" size={20} />
                                    </button>
                                </div>
                                <p className="text-sm text-gray-600 mb-4">
                                    „Éá„Éº„Çø„Éô„Éº„Çπ„Å´„Å™„ÅÑÈ£üÊùê„ÉªÊñôÁêÜ„Éª„Çµ„Éó„É™„É°„É≥„Éà„ÇíÁã¨Ëá™„Å´ÁôªÈå≤„Åß„Åç„Åæ„Åô
                                </p>
                                <div className="space-y-3">
                                    {/* Row 1: ÂêçÂâçÂÖ•Âäõ */}
                                    <div>
                                        <label className="text-xs font-medium text-gray-700 mb-1 block">ÂêçÂâç</label>
                                        <input
                                            type="text"
                                            value={customSupplementData.name}
                                            onChange={(e) => setCustomSupplementData({...customSupplementData, name: e.target.value})}
                                            placeholder={
                                                customSupplementData.itemType === 'food' ? '‰æã: Ëá™ÂÆ∂Ë£Ω„Éó„É≠„ÉÜ„Ç§„É≥„Éê„Éº' :
                                                customSupplementData.itemType === 'recipe' ? '‰æã: Ëá™ÂÆ∂Ë£Ω„Ç´„É¨„Éº' :
                                                '‰æã: „Éû„É´„ÉÅ„Éì„Çø„Éü„É≥'
                                            }
                                            className="w-full px-3 py-2 text-sm border rounded-lg"
                                        />
                                    </div>

                                    {/* Row 2: „Ç¢„Ç§„ÉÜ„É†„Çø„Ç§„ÉóÈÅ∏ÊäûÔºà‰∏ÄË¶ßÂºèÔºâ */}
                                    <div>
                                        <label className="text-xs font-medium text-gray-700 mb-1 block">Á®ÆÈ°û</label>
                                                            <div className="space-y-1">
                                                                <button
                                                                    type="button"
                                                                    onClick={() => setCustomSupplementData({...customSupplementData, itemType: 'food'})}
                                                                    className={`w-full px-3 py-2 rounded-lg text-sm font-medium transition flex items-center gap-2 ${
                                                                        customSupplementData.itemType === 'food'
                                                                            ? 'bg-green-600 text-white'
                                                                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                                    }`}
                                                                >
                                                                    <Icon name="Apple" size={16} />
                                                                    <span>È£üÊùê</span>
                                                                </button>
                                                                <button
                                                                    type="button"
                                                                    onClick={() => setCustomSupplementData({...customSupplementData, itemType: 'recipe'})}
                                                                    className={`w-full px-3 py-2 rounded-lg text-sm font-medium transition flex items-center gap-2 ${
                                                                        customSupplementData.itemType === 'recipe'
                                                                            ? 'bg-green-600 text-white'
                                                                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                                    }`}
                                                                >
                                                                    <Icon name="ChefHat" size={16} />
                                                                    <span>ÊñôÁêÜ</span>
                                                                </button>
                                                                <button
                                                                    type="button"
                                                                    onClick={() => setCustomSupplementData({...customSupplementData, itemType: 'supplement'})}
                                                                    className={`w-full px-3 py-2 rounded-lg text-sm font-medium transition flex items-center gap-2 ${
                                                                        customSupplementData.itemType === 'supplement'
                                                                            ? 'bg-blue-600 text-white'
                                                                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                                    }`}
                                                                >
                                                                    <Icon name="Pill" size={16} />
                                                                    <span>„Çµ„Éó„É™</span>
                                                                </button>
                                                            </div>
                                                        </div>

                                                        {/* Row 3: „Ç´„ÉÜ„Ç¥„É™„Å®ÈáçÈáè */}
                                                        <div className="grid grid-cols-2 gap-2">
                                                            <div>
                                                                <label className="text-xs font-medium text-gray-700 mb-1 block">„Ç´„ÉÜ„Ç¥„É™</label>
                                                                {customSupplementData.itemType === 'recipe' ? (
                                                                    <input
                                                                        type="text"
                                                                        value="ÊñôÁêÜ"
                                                                        disabled
                                                                        className="w-full px-3 py-2 text-sm border rounded-lg bg-gray-100"
                                                                    />
                                                                ) : (
                                                                    <select
                                                                        value={customSupplementData.category}
                                                                        onChange={(e) => setCustomSupplementData({...customSupplementData, category: e.target.value})}
                                                                        className="w-full px-3 py-2 text-sm border rounded-lg"
                                                                    >
                                                                        {customSupplementData.itemType === 'supplement' ? (
                                                                            <>
                                                                                <option value="„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´">„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´</option>
                                                                                <option value="„Éó„É≠„ÉÜ„Ç§„É≥">„Éó„É≠„ÉÜ„Ç§„É≥</option>
                                                                                <option value="„Ç¢„Éü„ÉéÈÖ∏">„Ç¢„Éü„ÉéÈÖ∏</option>
                                                                                <option value="„Éâ„É™„É≥„ÇØ">„Éâ„É™„É≥„ÇØ</option>
                                                                                <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                                                                            </>
                                                                        ) : (
                                                                            <>
                                                                                <option value="Á©ÄÈ°û">Á©ÄÈ°û</option>
                                                                                <option value="ËÇâÈ°û">ËÇâÈ°û</option>
                                                                                <option value="È≠ö‰ªãÈ°û">È≠ö‰ªãÈ°û</option>
                                                                                <option value="ÈáéËèúÈ°û">ÈáéËèúÈ°û</option>
                                                                                <option value="ÊûúÁâ©È°û">ÊûúÁâ©È°û</option>
                                                                                <option value="‰π≥Ë£ΩÂìÅ">‰π≥Ë£ΩÂìÅ</option>
                                                                                <option value="Ë™øÂë≥Êñô">Ë™øÂë≥Êñô</option>
                                                                                <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                                                                            </>
                                                                        )}
                                                                    </select>
                                                                )}
                                                            </div>
                                                            <div>
                                                                <label className="text-xs font-medium text-gray-700 mb-1 block">1ÂõûÂàÜ„ÅÆÈáè</label>
                                                                <div className="flex gap-2">
                                                                    <input
                                                                        type="number"
                                                                        value={customSupplementData.servingSize}
                                                                        onChange={(e) => setCustomSupplementData({...customSupplementData, servingSize: e.target.value === '' ? '' : (parseFloat(e.target.value) || 1)})}
                                                                        placeholder="Èáè"
                                                                        className="flex-1 px-3 py-2 text-sm border rounded-lg"
                                                                    />
                                                                    <select
                                                                        value={customSupplementData.servingUnit}
                                                                        onChange={(e) => setCustomSupplementData({...customSupplementData, servingUnit: e.target.value})}
                                                                        className="px-3 py-2 text-sm border rounded-lg"
                                                                    >
                                                                        <option value="g">g</option>
                                                                        <option value="mg">mg</option>
                                                                        <option value="ml">ml</option>
                                                                    </select>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div className="border-t pt-2">
                                                            <p className="text-xs font-medium text-gray-700 mb-2">Âü∫Êú¨Ê†ÑÈ§äÁ¥†Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                                            <div className="grid grid-cols-2 gap-2">
                                                                <div>
                                                                    <label className="text-xs text-gray-600">„Ç´„É≠„É™„Éº (kcal)</label>
                                                                    <input type="number" value={customSupplementData.calories} onChange={(e) => setCustomSupplementData({...customSupplementData, calories: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                                </div>
                                                                <div>
                                                                    <label className="text-xs text-gray-600">„Çø„É≥„Éë„ÇØË≥™ (g)</label>
                                                                    <input type="number" value={customSupplementData.protein} onChange={(e) => setCustomSupplementData({...customSupplementData, protein: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                                </div>
                                                                <div>
                                                                    <label className="text-xs text-gray-600">ËÑÇË≥™ (g)</label>
                                                                    <input type="number" value={customSupplementData.fat} onChange={(e) => setCustomSupplementData({...customSupplementData, fat: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                                </div>
                                                                <div>
                                                                    <label className="text-xs text-gray-600">ÁÇ≠Ê∞¥ÂåñÁâ© (g)</label>
                                                                    <input type="number" value={customSupplementData.carbs} onChange={(e) => setCustomSupplementData({...customSupplementData, carbs: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div className="border-t pt-2">
                                                            <p className="text-xs font-medium text-gray-700 mb-2">„Éì„Çø„Éü„É≥Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                                            <div className="grid grid-cols-2 gap-2">
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥A (Œºg)</label><input type="number" value={customSupplementData.vitaminA} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminA: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B1 (mg)</label><input type="number" value={customSupplementData.vitaminB1} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB1: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B2 (mg)</label><input type="number" value={customSupplementData.vitaminB2} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB2: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B6 (mg)</label><input type="number" value={customSupplementData.vitaminB6} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB6: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B12 (Œºg)</label><input type="number" value={customSupplementData.vitaminB12} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB12: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥C (mg)</label><input type="number" value={customSupplementData.vitaminC} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminC: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥D (Œºg)</label><input type="number" value={customSupplementData.vitaminD} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminD: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥E (mg)</label><input type="number" value={customSupplementData.vitaminE} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminE: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥K (Œºg)</label><input type="number" value={customSupplementData.vitaminK} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminK: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éä„Ç§„Ç¢„Ç∑„É≥ (mg)</label><input type="number" value={customSupplementData.niacin} onChange={(e) => setCustomSupplementData({...customSupplementData, niacin: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éë„É≥„Éà„ÉÜ„É≥ÈÖ∏ (mg)</label><input type="number" value={customSupplementData.pantothenicAcid} onChange={(e) => setCustomSupplementData({...customSupplementData, pantothenicAcid: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éì„Ç™„ÉÅ„É≥ (Œºg)</label><input type="number" value={customSupplementData.biotin} onChange={(e) => setCustomSupplementData({...customSupplementData, biotin: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">ËëâÈÖ∏ (Œºg)</label><input type="number" value={customSupplementData.folicAcid} onChange={(e) => setCustomSupplementData({...customSupplementData, folicAcid: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                            </div>
                                                        </div>

                                                        <div className="border-t pt-2">
                                                            <p className="text-xs font-medium text-gray-700 mb-2">„Éü„Éç„É©„É´Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                                            <div className="grid grid-cols-2 gap-2">
                                                                <div><label className="text-xs text-gray-600">„Éä„Éà„É™„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.sodium} onChange={(e) => setCustomSupplementData({...customSupplementData, sodium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Ç´„É™„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.potassium} onChange={(e) => setCustomSupplementData({...customSupplementData, potassium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Ç´„É´„Ç∑„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.calcium} onChange={(e) => setCustomSupplementData({...customSupplementData, calcium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éû„Ç∞„Éç„Ç∑„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.magnesium} onChange={(e) => setCustomSupplementData({...customSupplementData, magnesium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„É™„É≥ (mg)</label><input type="number" value={customSupplementData.phosphorus} onChange={(e) => setCustomSupplementData({...customSupplementData, phosphorus: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">ÈâÑ (mg)</label><input type="number" value={customSupplementData.iron} onChange={(e) => setCustomSupplementData({...customSupplementData, iron: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">‰∫úÈâõ (mg)</label><input type="number" value={customSupplementData.zinc} onChange={(e) => setCustomSupplementData({...customSupplementData, zinc: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">ÈäÖ (mg)</label><input type="number" value={customSupplementData.copper} onChange={(e) => setCustomSupplementData({...customSupplementData, copper: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Éû„É≥„Ç¨„É≥ (mg)</label><input type="number" value={customSupplementData.manganese} onChange={(e) => setCustomSupplementData({...customSupplementData, manganese: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„É®„Ç¶Á¥† (Œºg)</label><input type="number" value={customSupplementData.iodine} onChange={(e) => setCustomSupplementData({...customSupplementData, iodine: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„Çª„É¨„É≥ (Œºg)</label><input type="number" value={customSupplementData.selenium} onChange={(e) => setCustomSupplementData({...customSupplementData, selenium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„ÇØ„É≠„É† (Œºg)</label><input type="number" value={customSupplementData.chromium} onChange={(e) => setCustomSupplementData({...customSupplementData, chromium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                                <div><label className="text-xs text-gray-600">„É¢„É™„Éñ„Éá„É≥ (Œºg)</label><input type="number" value={customSupplementData.molybdenum} onChange={(e) => setCustomSupplementData({...customSupplementData, molybdenum: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                            </div>
                                                        </div>

                                                        <div className="border-t pt-2">
                                                            <p className="text-xs font-medium text-gray-700 mb-2">„Åù„ÅÆ‰ªñÊ†ÑÈ§äÁ¥†</p>
                                                            {customSupplementData.otherNutrients.map((nutrient, idx) => (
                                                                <div key={idx} className="flex gap-1 mb-2">
                                                                    <input type="text" value={nutrient.name} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].name = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Âêç" className="flex-1 px-2 py-1 text-xs border rounded" />
                                                                    <input type="number" value={nutrient.amount} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].amount = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Èáè" className="w-16 px-2 py-1 text-xs border rounded" />
                                                                    <input type="text" value={nutrient.unit} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].unit = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Âçò‰Ωç" className="w-12 px-1 py-1 text-xs border rounded" />
                                                                    <button onClick={() => { const updated = customSupplementData.otherNutrients.filter((_, i) => i !== idx); setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} className="text-red-500 px-1"><Icon name="X" size={14} /></button>
                                                                </div>
                                                            ))}
                                                            <button onClick={() => setCustomSupplementData({...customSupplementData, otherNutrients: [...customSupplementData.otherNutrients, {name: '', amount: '', unit: ''}]})} className="w-full px-2 py-1.5 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:bg-gray-50 text-xs">+ ËøΩÂä†</button>
                                                        </div>

                                                        <button
                                                            onClick={() => {
                                                                if (!customSupplementData.name.trim()) {
                                                                    alert('„Ç¢„Ç§„ÉÜ„É†Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                                                                    return;
                                                                }

                                                                // „Ç´„Çπ„Çø„É†ÊñôÁêÜ„ÅÆÂ†¥Âêà„ÅØ„Ç´„ÉÜ„Ç¥„É™„Çí„ÄåÊñôÁêÜ„Äç„Å´Áµ±‰∏Ä
                                                                const finalCategory = customSupplementData.itemType === 'recipe' ? 'ÊñôÁêÜ' : customSupplementData.category;

                                                                // localStorage„Å´‰øùÂ≠ò„Åô„Çã„Éá„Éº„Çø
                                                                const customItem = {
                                                                    itemType: customSupplementData.itemType,
                                                                    name: customSupplementData.name,
                                                                    category: finalCategory,
                                                                    servingSize: customSupplementData.servingSize,
                                                                    servingUnit: customSupplementData.servingUnit,
                                                                    calories: customSupplementData.calories,
                                                                    protein: customSupplementData.protein,
                                                                    fat: customSupplementData.fat,
                                                                    carbs: customSupplementData.carbs,
                                                                    vitamins: {
                                                                        A: customSupplementData.vitaminA || 0,
                                                                        B1: customSupplementData.vitaminB1 || 0,
                                                                        B2: customSupplementData.vitaminB2 || 0,
                                                                        B6: customSupplementData.vitaminB6 || 0,
                                                                        B12: customSupplementData.vitaminB12 || 0,
                                                                        C: customSupplementData.vitaminC || 0,
                                                                        D: customSupplementData.vitaminD || 0,
                                                                        E: customSupplementData.vitaminE || 0,
                                                                        K: customSupplementData.vitaminK || 0,
                                                                        B3: customSupplementData.niacin || 0,
                                                                        B5: customSupplementData.pantothenicAcid || 0,
                                                                        B7: customSupplementData.biotin || 0,
                                                                        B9: customSupplementData.folicAcid || 0
                                                                    },
                                                                    minerals: {
                                                                        sodium: customSupplementData.sodium || 0,
                                                                        potassium: customSupplementData.potassium || 0,
                                                                        calcium: customSupplementData.calcium || 0,
                                                                        magnesium: customSupplementData.magnesium || 0,
                                                                        phosphorus: customSupplementData.phosphorus || 0,
                                                                        iron: customSupplementData.iron || 0,
                                                                        zinc: customSupplementData.zinc || 0,
                                                                        copper: customSupplementData.copper || 0,
                                                                        manganese: customSupplementData.manganese || 0,
                                                                        iodine: customSupplementData.iodine || 0,
                                                                        selenium: customSupplementData.selenium || 0,
                                                                        chromium: customSupplementData.chromium || 0
                                                                    }
                                                                };

                                                                // localStorage„Å´‰øùÂ≠ò
                                                                const customFoods = JSON.parse(localStorage.getItem('customFoods') || '[]');
                                                                customFoods.push(customItem);
                                                                localStorage.setItem('customFoods', JSON.stringify(customFoods));

                                                                // addedItems„Å´ËøΩÂä†ÔºàË°®Á§∫Áî®Ôºâ
                                                                const newItem = {
                                                                    name: customSupplementData.name,
                                                                    amount: `${customSupplementData.servingSize}${customSupplementData.servingUnit}`,
                                                                    calories: customSupplementData.calories,
                                                                    protein: customSupplementData.protein,
                                                                    fat: customSupplementData.fat,
                                                                    carbs: customSupplementData.carbs,
                                                                    category: finalCategory,
                                                                    isCustom: true,
                                                                    vitamins: customItem.vitamins,
                                                                    minerals: customItem.minerals
                                                                };
                                                                setAddedItems([...addedItems, newItem]);

                                                                // „Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
                                                                setCustomSupplementData({
                                                                    itemType: 'food',
                                                                    name: '', category: '„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´', servingSize: 1, servingUnit: 'g',
                                                                    calories: 0, protein: 0, fat: 0, carbs: 0,
                                                                    vitaminA: 0, vitaminB1: 0, vitaminB2: 0, vitaminB6: 0, vitaminB12: 0,
                                                                    vitaminC: 0, vitaminD: 0, vitaminE: 0, vitaminK: 0,
                                                                    niacin: 0, pantothenicAcid: 0, biotin: 0, folicAcid: 0,
                                                                    sodium: 0, potassium: 0, calcium: 0, magnesium: 0, phosphorus: 0,
                                                                    iron: 0, zinc: 0, copper: 0, manganese: 0, iodine: 0, selenium: 0, chromium: 0, molybdenum: 0,
                                                                    otherNutrients: []
                                                                });
                                                                setShowCustomSupplementForm(false);

                                                                alert('„Ç´„Çπ„Çø„É†„Ç¢„Ç§„ÉÜ„É†„Çí‰ΩúÊàê„Åó„Åæ„Åó„ÅüÔºÅ');
                                                            }}
                                                            className="w-full px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition text-sm font-medium"
                                                        >
                                                            ËøΩÂä†
                                                        </button>
                                </div>
                            </div>
                        )}

                        {!selectedItem && !showAIFoodRecognition && !showCustomSupplementForm && !showSearchModal ? null : selectedItem && (
                            <div className="space-y-4">
                                <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                                    <div className="flex justify-between items-start mb-2">
                                        <div>
                                            <h4 className="font-bold text-lg">{selectedItem.name}</h4>
                                            <p className="text-sm text-gray-600">{selectedItem.category}</p>
                                        </div>
                                        <button
                                            onClick={() => {
                                                setSelectedItem(null);
                                                setEditingItemIndex(null);
                                            }}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={20} />
                                        </button>
                                    </div>
                                    <div className="grid grid-cols-4 gap-2 mt-3 text-sm">
                                        <div>
                                            <p className="text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold text-cyan-600">{selectedItem.calories}kcal</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">P</p>
                                            <p className="font-bold text-red-600">{selectedItem.protein}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">F</p>
                                            <p className="font-bold text-yellow-600">{selectedItem.fat}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">C</p>
                                            <p className="font-bold text-green-600">{selectedItem.carbs}g</p>
                                        </div>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-2">
                                        ‚Äª{selectedItem.servingSize || 100}{selectedItem.servingUnit || 'g'}„ÅÇ„Åü„Çä
                                    </p>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                        Èáè (g)
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: 'È£ü‰∫ãÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                content: `È£üÊùê„ÅÆÈáè„Çí„Ç∞„É©„É†Âçò‰Ωç„ÅßÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶Â§ß„Åæ„Åã„Å™Èáè„ÇíË®≠ÂÆö
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà100g„ÄÅ200g„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ
4. Â¢óÊ∏õ„Éú„Çø„É≥Ôºà-100ÔΩû+100Ôºâ„ÅßÂæÆË™øÊï¥

„ÄêÂÖ•Âäõ„ÅÆ„Ç≥„ÉÑ„Äë
‚Ä¢ „Çà„ÅèÈ£ü„Åπ„ÇãÈáè„ÇíË¶ö„Åà„Å¶„Åä„Åè„Å®‰æøÂà©„Åß„Åô
‚Ä¢ ‰æã: „ÅîÈ£ØËå∂Á¢ó1ÊùØ ‚âí 150g
‚Ä¢ ‰æã: È∂è„ÇÄ„Å≠ËÇâÔºàÊâã„ÅÆ„Å≤„ÇâÂ§ßÔºâ‚âí 100g
‚Ä¢ ‰æã: Âçµ1ÂÄã ‚âí 50g

„ÄêPFCËá™ÂãïË®àÁÆó„Äë
ÂÖ•Âäõ„Åó„ÅüÈáè„Å´Âøú„Åò„Å¶„ÄÅ„Åü„Çì„Å±„ÅèË≥™ÔºàPÔºâ„ÉªËÑÇË≥™ÔºàFÔºâ„ÉªÁÇ≠Ê∞¥ÂåñÁâ©ÔºàCÔºâ„ÅåËá™ÂãïË®àÁÆó„Åï„Çå„ÄÅ1Êó•„ÅÆÁõÆÊ®ô„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ`
                                            })}
                                            className="text-indigo-600 hover:text-indigo-800"
                                        >
                                            <Icon name="Info" size={14} />
                                        </button>
                                    </label>

                                    {/* „Çπ„É©„Ç§„ÉÄ„Éº */}
                                    <div className="mb-3">
                                        <input
                                            type="range"
                                            min="0"
                                            max="500"
                                            step="5"
                                            value={amount}
                                            onChange={(e) => setAmount(e.target.value)}
                                            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600"
                                            style={{
                                                background: `linear-gradient(to right, #4f46e5 0%, #4f46e5 ${(amount/500)*100}%, #e5e7eb ${(amount/500)*100}%, #e5e7eb 100%)`
                                            }}
                                        />
                                        <div className="flex justify-between text-xs text-gray-500 mt-1">
                                            <span onClick={() => setAmount(0)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">0g</span>
                                            <span onClick={() => setAmount(100)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">100g</span>
                                            <span onClick={() => setAmount(200)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">200g</span>
                                            <span onClick={() => setAmount(300)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">300g</span>
                                            <span onClick={() => setAmount(400)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">400g</span>
                                            <span onClick={() => setAmount(500)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">500g</span>
                                        </div>
                                    </div>

                                    <input
                                        type="number"
                                        value={amount}
                                        onChange={(e) => setAmount(e.target.value)}
                                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                                    />
                                    {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                                    <div className="grid grid-cols-6 gap-1 mt-2">
                                        <button
                                            onClick={() => setAmount(Math.max(0, Number(amount) - 100))}
                                            className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                        >
                                            -100
                                        </button>
                                        <button
                                            onClick={() => setAmount(Math.max(0, Number(amount) - 50))}
                                            className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                        >
                                            -50
                                        </button>
                                        <button
                                            onClick={() => setAmount(Math.max(0, Number(amount) - 10))}
                                            className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                        >
                                            -10
                                        </button>
                                        <button
                                            onClick={() => setAmount(Number(amount) + 10)}
                                            className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                        >
                                            +10
                                        </button>
                                        <button
                                            onClick={() => setAmount(Number(amount) + 50)}
                                            className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                        >
                                            +50
                                        </button>
                                        <button
                                            onClick={() => setAmount(Number(amount) + 100)}
                                            className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                        >
                                            +100
                                        </button>
                                    </div>
                                </div>

                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <p className="text-sm font-medium mb-2">ÊëÇÂèñÈáè</p>
                                    <div className="grid grid-cols-4 gap-2">
                                        <div>
                                            <p className="text-xs text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold" style={{color: '#7686BA'}}>
                                                {Math.round(selectedItem.calories * (Number(amount) / (selectedItem.servingSize || 100)))}kcal
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">P</p>
                                            <p className="font-bold text-red-600">{(selectedItem.protein * (Number(amount) / (selectedItem.servingSize || 100))).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">F</p>
                                            <p className="font-bold text-yellow-600">{(selectedItem.fat * (Number(amount) / (selectedItem.servingSize || 100))).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">C</p>
                                            <p className="font-bold text-green-600">{(selectedItem.carbs * (Number(amount) / (selectedItem.servingSize || 100))).toFixed(1)}g</p>
                                        </div>
                                    </div>
                                </div>

                                <button
                                    onClick={() => {
                                        const numAmount = Number(amount);
                                        const ratio = numAmount / (selectedItem.servingSize || 100);

                                        // Calculate vitamins and minerals based on amount
                                        const vitamins = {};
                                        const minerals = {};

                                        if (selectedItem.vitamins) {
                                            Object.keys(selectedItem.vitamins).forEach(key => {
                                                vitamins[key] = selectedItem.vitamins[key] * ratio;
                                            });
                                        }

                                        if (selectedItem.minerals) {
                                            Object.keys(selectedItem.minerals).forEach(key => {
                                                minerals[key] = selectedItem.minerals[key] * ratio;
                                            });
                                        }

                                        // „Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥†„ÇíË®àÁÆó
                                        const otherNutrients = {};
                                        const otherNutrientKeys = ['caffeine', 'catechin', 'tannin', 'polyphenol', 'chlorogenicAcid',
                                                                    'creatine', 'lArginine', 'lCarnitine', 'EPA', 'DHA', 'coQ10',
                                                                    'lutein', 'astaxanthin'];
                                        otherNutrientKeys.forEach(key => {
                                            if (selectedItem[key]) {
                                                otherNutrients[key] = selectedItem[key] * ratio;
                                            }
                                        });

                                        const newItem = {
                                            name: selectedItem.name,
                                            amount: numAmount,
                                            protein: selectedItem.protein * ratio,
                                            fat: selectedItem.fat * ratio,
                                            carbs: selectedItem.carbs * ratio,
                                            calories: selectedItem.calories * ratio,
                                            vitamins: vitamins,
                                            minerals: minerals,
                                            otherNutrients: otherNutrients
                                        };

                                        // Á∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÊó¢Â≠ò„Ç¢„Ç§„ÉÜ„É†„ÇíÊõ¥Êñ∞„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØÊñ∞Ë¶èËøΩÂä†
                                        if (editingItemIndex !== null) {
                                            const updatedItems = [...addedItems];
                                            updatedItems[editingItemIndex] = newItem;
                                            setAddedItems(updatedItems);
                                            setEditingItemIndex(null);
                                        } else {
                                            setAddedItems([...addedItems, newItem]);
                                        }

                                        setSelectedItem(null);
                                        setAmount('100');
                                        setShowSearchModal(true);
                                    }}
                                    className="w-full bg-indigo-600 text-white font-bold py-2 rounded-lg hover:bg-indigo-700 transition text-sm"
                                >
                                    {editingItemIndex !== null ? 'Êõ¥Êñ∞' : '„Ç¢„Ç§„ÉÜ„É†„ÇíËøΩÂä†'}
                                </button>
                            </div>
                        )}

                        {/* ‚ë¢ËøΩÂä†Ê∏à„Åø„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß */}
                        {addedItems.length > 0 && (
                            <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                                <div className="flex justify-between items-center mb-3">
                                    <p className="text-sm font-medium text-indigo-900">ËøΩÂä†Ê∏à„Åø ({addedItems.length}ÂìÅÁõÆ)</p>
                                </div>
                                <div className="space-y-2 max-h-40 overflow-y-auto">
                                    {addedItems.map((item, index) => (
                                        <div key={index} className="bg-white p-2 rounded-lg flex justify-between items-center">
                                            <div className="flex-1">
                                                <p className="text-sm font-medium">{item.name}</p>
                                                <p className="text-xs text-gray-600">{item.amount}g - {Math.round(item.calories)}kcal</p>
                                            </div>
                                            <div className="flex gap-2">
                                                <button
                                                    onClick={() => {
                                                        // Á∑®ÈõÜÊôÇ„ÅØ100g„ÅÇ„Åü„Çä„ÅÆÊ†ÑÈ§ä‰æ°„Å´Êàª„ÅôÂøÖË¶Å„Åå„ÅÇ„Çã
                                                        const originalRatio = 100 / item.amount;
                                                        setSelectedItem({
                                                            name: item.name,
                                                            calories: item.calories * originalRatio,
                                                            protein: item.protein * originalRatio,
                                                            fat: item.fat * originalRatio,
                                                            carbs: item.carbs * originalRatio,
                                                            vitamins: item.vitamins,
                                                            minerals: item.minerals,
                                                            category: item.category || ''
                                                        });
                                                        setAmount(item.amount.toString());
                                                        setEditingItemIndex(index);
                                                    }}
                                                    className="text-blue-500 hover:text-blue-700"
                                                >
                                                    <Icon name="Pencil" size={16} />
                                                </button>
                                                <button
                                                    onClick={() => setAddedItems(addedItems.filter((_, i) => i !== index))}
                                                    className="text-red-500 hover:text-red-700"
                                                >
                                                    <Icon name="Trash2" size={16} />
                                                </button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                                <div className="mt-3 pt-3 border-t border-indigo-200">
                                    <div className="grid grid-cols-4 gap-2 text-xs">
                                        <div>
                                            <p className="text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold" style={{color: '#7686BA'}}>
                                                {Math.round(addedItems.reduce((sum, item) => sum + item.calories, 0))}kcal
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">P</p>
                                            <p className="font-bold text-red-600">
                                                {addedItems.reduce((sum, item) => sum + item.protein, 0).toFixed(1)}g
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">F</p>
                                            <p className="font-bold text-yellow-600">
                                                {addedItems.reduce((sum, item) => sum + item.fat, 0).toFixed(1)}g
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">C</p>
                                            <p className="font-bold text-green-600">
                                                {addedItems.reduce((sum, item) => sum + item.carbs, 0).toFixed(1)}g
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                {/* „Ç¢„Ç§„ÉÜ„É†„ÇíËøΩÂä†„Éú„Çø„É≥ */}
                                <button
                                    onClick={() => {
                                        setSelectedItem(null);
                                        setShowSearchModal(true);
                                    }}
                                    className="w-full bg-indigo-600 text-white font-bold py-2 rounded-lg hover:bg-indigo-700 transition text-sm mt-3"
                                >
                                    „Ç¢„Ç§„ÉÜ„É†„ÇíËøΩÂä†
                                </button>

                                {/* Ë®òÈå≤„Å®„Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥ */}
                                <div className="flex gap-2 mt-3">
                                    <button
                                        onClick={async () => {
                                            // „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁ∑®ÈõÜ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà
                                            if (editingTemplate) {
                                                const updatedTemplate = {
                                                    ...editingTemplate,
                                                    items: addedItems,
                                                    name: mealName || editingTemplate.name
                                                };
                                                await DataService.saveMealTemplate(user.uid, updatedTemplate);
                                                alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
                                                onClose();
                                                return;
                                            }

                                            // ÈÄöÂ∏∏„ÅÆË®òÈå≤„É¢„Éº„Éâ
                                            const totalCalories = addedItems.reduce((sum, item) => sum + item.calories, 0);
                                            const newMeal = {
                                                id: Date.now(),
                                                time: new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' }),
                                                name: mealName || 'È£ü‰∫ã',
                                                calories: Math.round(totalCalories),
                                                items: addedItems.map(item => ({
                                                    name: item.name,
                                                    amount: `${item.amount}g`,
                                                    protein: item.protein,
                                                    fat: item.fat,
                                                    carbs: item.carbs,
                                                    vitamins: item.vitamins,
                                                    minerals: item.minerals
                                                }))
                                            };

                                            onAdd(newMeal);
                                        }}
                                        className="flex-1 bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition"
                                    >
                                        {editingTemplate ? '„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞' : 'Ë®òÈå≤'}
                                    </button>
                                    <button
                                        onClick={() => {
                                            setAddedItems([]);
                                            onClose();
                                        }}
                                        className="px-4 bg-gray-200 text-gray-700 font-bold py-3 rounded-lg hover:bg-gray-300 transition"
                                    >
                                        „Ç≠„É£„É≥„Çª„É´
                                    </button>
                                </div>
                            </div>
                        )}

                        {/* AIÈ£ü‰∫ãË™çË≠ò„É¢„Éº„ÉÄ„É´ */}
                        {showAIFoodRecognition && (
                            <AIFoodRecognition
                                onFoodsRecognized={handleFoodsRecognized}
                                onClose={() => setShowAIFoodRecognition(false)}
                            />
                        )}

                        {/* „Ç´„Çπ„Çø„É†‰ΩúÊàê„É¢„Éº„ÉÄ„É´ÔºàÈ£üÊùê„ÉªÊñôÁêÜ„Éª„Çµ„Éó„É™ÂÖ±ÈÄöÔºâ */}
                        {showCustomFoodCreator && (
                            <CustomFoodCreator
                                initialName=""
                                itemType={customSupplementData.itemType}
                                onClose={() => setShowCustomFoodCreator(false)}
                                onSave={(customFood) => {
                                    // ÂÖ®„Å¶„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíaddedItems„Å´ËøΩÂä†ÔºàÁµ±‰∏ÄÁöÑ„Å™Âá¶ÁêÜÔºâ
                                    setAddedItems([...addedItems, {
                                        ...customFood,
                                        amount: customFood.servingSize || customFood.amount || 100,
                                        isCustom: true
                                    }]);
                                    setShowCustomFoodCreator(false);
                                }}
                            />
                        )}
                    </div>
                );
            };

            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
                    <div className="bg-white rounded-2xl w-full max-w-md max-h-[80vh] overflow-hidden slide-up flex flex-col">
                        <div className="bg-white border-b p-4 flex justify-between items-center flex-shrink-0">
                            <h3 className="text-lg font-bold">
                                {type === 'meal' && 'È£ü‰∫ã„ÇíË®òÈå≤'}
                                {type === 'workout' && '„Éà„É¨„Éº„Éã„É≥„Ç∞„ÇíË®òÈå≤'}
                                {type === 'condition' && '„Ç≥„É≥„Éá„Ç£„Ç∑„Éß„É≥„ÇíË®òÈå≤'}
                            </h3>
                            <button onClick={() => {
                                // È£ü‰∫ãË®òÈå≤‰∏≠„Å´È£üÊùê„ÇíÈÅ∏Êäû„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åæ„ÅöÊ§úÁ¥¢„É™„Çπ„Éà„Å´Êàª„Çã
                                if (type === 'meal' && selectedItem) {
                                    setSelectedItem(null);
                                }
                                // „Éà„É¨„Éº„Éã„É≥„Ç∞Ë®òÈå≤‰∏≠„Å´Á®ÆÁõÆ„ÇíÈÅ∏Êäû„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åæ„ÅöÊ§úÁ¥¢„É™„Çπ„Éà„Å´Êàª„Çã
                                else if (type === 'workout' && currentExercise) {
                                    setCurrentExercise(null);
                                }
                                // „Åù„Çå‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÅØ„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
                                else {
                                    onClose();
                                }
                            }} className="p-2 hover:bg-gray-100 rounded-full">
                                <Icon name="X" size={20} />
                            </button>
                        </div>
                        <div className="p-6 overflow-y-auto flex-1">
                            {type === 'meal' && renderFoodInput()}
                            {type === 'workout' && renderWorkoutInput()}
                            {type === 'condition' && renderConditionInput()}
                        </div>
                    </div>
                </div>
            );
        };
