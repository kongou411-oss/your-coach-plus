// ===== Add Item Component =====
        const AddItemView = ({ type, onClose, onAdd, userProfile, predictedData, unlockedFeatures, user, currentRoutine, usageDays, dailyRecord }) => {
            const [searchTerm, setSearchTerm] = useState('');
            const [selectedItem, setSelectedItem] = useState(null);
            const [amount, setAmount] = useState(type === 'supplement' ? '1' : '100');
            const [expandedCategories, setExpandedCategories] = useState({});
            const [mealName, setMealName] = useState('');
            const [addedItems, setAddedItems] = useState([]);
            const [mealTemplates, setMealTemplates] = useState([]);
            const [supplementTemplates, setSupplementTemplates] = useState([]);
            const [showTemplates, setShowTemplates] = useState(false);
            const [templateName, setTemplateName] = useState('');
            const [selectedExercise, setSelectedExercise] = useState(null);

            // WorkoutÁî®„ÅÆstate
            const [exercises, setExercises] = useState([]);
            const [currentExercise, setCurrentExercise] = useState(null);
            const [sets, setSets] = useState([]);
            const [currentSet, setCurrentSet] = useState({
                weight: 50,
                reps: 10,
                distance: 0.5,
                tut: 30,
                restInterval: 90,
                duration: 0
            });
            const [workoutTemplates, setWorkoutTemplates] = useState([]);
            const [showCustomExerciseForm, setShowCustomExerciseForm] = useState(false);
            const [workoutInfoModal, setWorkoutInfoModal] = useState({ show: false, title: '', content: '' });
            const [showAdvancedTraining, setShowAdvancedTraining] = useState(false);
            const [customExerciseData, setCustomExerciseData] = useState({
                name: '',
                category: '„Åù„ÅÆ‰ªñ',
                subcategory: '',
                exerciseType: 'anaerobic',
                jointType: 'single',
                defaultDistance: 0.5,
                defaultTutPerRep: 3,
                exerciseFactor: 1.0,
                epocRate: 0.15,
                intervalMultiplier: 1.3,
                equipment: '',
                difficulty: 'ÂàùÁ¥ö',
                primaryMuscles: [],
                secondaryMuscles: []
            });

            // „ÉÜ„É≥„Éó„É¨„Éº„ÉàË™≠„ÅøËæº„Åø
            useEffect(() => {
                if (type === 'meal' && unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id)) {
                    DataService.getMealTemplates(user.uid).then(setMealTemplates);
                } else if (type === 'supplement' && unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id)) {
                    DataService.getSupplementTemplates(user.uid).then(setSupplementTemplates);
                }
            }, [type]);

            const renderConditionInput = () => {
                const [condition, setCondition] = useState({
                    sleepHours: 7,
                    sleep: 3,
                    fatigue: 3,
                    stress: 3,
                    mood: 3,
                    thinking: 3,
                    appetite: 3,
                    gut: 3,
                    weight: userProfile.weight || 0,
                    bodyFat: userProfile.bodyFat || 0,
                    notes: ''
                });

                const RatingButton = ({ label, value, onChange, options }) => (
                    <div className="space-y-2">
                        <label className="block text-sm font-medium text-gray-700">{label}</label>
                        <div className="grid grid-cols-5 gap-2">
                            {options.map((opt, idx) => (
                                <button
                                    key={idx}
                                    type="button"
                                    onClick={() => onChange(opt.value)}
                                    className={`py-3 px-2 rounded-lg border-2 transition ${
                                        value === opt.value
                                            ? 'border-indigo-600 bg-indigo-50 shadow-md'
                                            : 'border-gray-200 hover:border-gray-300'
                                    }`}
                                >
                                    <div className="text-2xl mb-1">{opt.emoji}</div>
                                    <div className="text-xs font-medium">{opt.label}</div>
                                </button>
                            ))}
                        </div>
                    </div>
                );

                return (
                    <div className="space-y-5">
                        {/* Áù°Áú†ÊôÇÈñì */}
                        <RatingButton
                            label="‚è∞ Áù°Áú†ÊôÇÈñì"
                            value={condition.sleepHours}
                            onChange={(val) => setCondition({...condition, sleepHours: val})}
                            options={[
                                { value: 5, emoji: 'üò´', label: '5h‰ª•‰∏ã' },
                                { value: 6, emoji: 'üò™', label: '6h' },
                                { value: 7, emoji: 'üòê', label: '7h' },
                                { value: 8, emoji: 'üòä', label: '8h' },
                                { value: 9, emoji: 'üåü', label: '9h‰ª•‰∏ä' }
                            ]}
                        />

                        <RatingButton
                            label="üò¥ Áù°Áú†„ÅÆË≥™"
                            value={condition.sleep}
                            onChange={(val) => setCondition({...condition, sleep: val})}
                            options={[
                                { value: 1, emoji: 'üò´', label: 'ÊúÄÊÇ™' },
                                { value: 2, emoji: 'üò™', label: 'ÊÇ™„ÅÑ' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üòä', label: 'ËâØ„ÅÑ' },
                                { value: 5, emoji: 'üåü', label: 'ÊúÄÈ´ò' }
                            ]}
                        />

                        <RatingButton
                            label="üí™ Áñ≤Âä¥Â∫¶ÔºàÂõûÂæ©ÂÖ∑ÂêàÔºâ"
                            value={condition.fatigue}
                            onChange={(val) => setCondition({...condition, fatigue: val})}
                            options={[
                                { value: 1, emoji: 'ü•±', label: '„Éò„Éà„Éò„Éà' },
                                { value: 2, emoji: 'üòì', label: 'Áñ≤„Çå' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üôÇ', label: 'ÂõûÂæ©' },
                                { value: 5, emoji: 'üí™', label: 'Áµ∂Â•ΩË™ø' }
                            ]}
                        />

                        <RatingButton
                            label="üò∞ „Çπ„Éà„É¨„Çπ„É¨„Éô„É´"
                            value={condition.stress}
                            onChange={(val) => setCondition({...condition, stress: val})}
                            options={[
                                { value: 1, emoji: 'üòå', label: '„Å™„Åó' },
                                { value: 2, emoji: 'üôÇ', label: 'Â∞ë„Åó' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üò∞', label: 'Â§ö„ÅÑ' },
                                { value: 5, emoji: 'ü§Ø', label: 'Ê•µÂ∫¶' }
                            ]}
                        />

                        <RatingButton
                            label="üòä Ê∞óÂàÜ"
                            value={condition.mood}
                            onChange={(val) => setCondition({...condition, mood: val})}
                            options={[
                                { value: 1, emoji: 'üò¢', label: 'ËêΩ„Å°Ëæº„Åø' },
                                { value: 2, emoji: 'üòï', label: 'ÂæÆÂ¶ô' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üòä', label: 'ËâØ„ÅÑ' },
                                { value: 5, emoji: 'ü§ó', label: 'ÊúÄÈ´ò' }
                            ]}
                        />

                        <RatingButton
                            label="üß† ÊÄùËÄÉ„ÅÆ„ÇØ„É™„Ç¢„Åï"
                            value={condition.thinking}
                            onChange={(val) => setCondition({...condition, thinking: val})}
                            options={[
                                { value: 1, emoji: 'üòµ', label: '„Éï„Ç©„Ç∞' },
                                { value: 2, emoji: 'üòï', label: '„Åº„Çì„ÇÑ„Çä' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üôÇ', label: '„ÇØ„É™„Ç¢' },
                                { value: 5, emoji: '‚ú®', label: 'Ë∂Ö„ÇØ„É™„Ç¢' }
                            ]}
                        />

                        <RatingButton
                            label="üçΩÔ∏è È£üÊ¨≤"
                            value={condition.appetite}
                            onChange={(val) => setCondition({...condition, appetite: val})}
                            options={[
                                { value: 1, emoji: 'üò£', label: '„Å™„Åó' },
                                { value: 2, emoji: 'üòï', label: 'Â∞ë„Å™„ÅÑ' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üòã', label: '„ÅÇ„Çä' },
                                { value: 5, emoji: 'ü§§', label: 'Êó∫Áõõ' }
                            ]}
                        />

                        <RatingButton
                            label="ü¶† ËÖ∏ÂÜÖÁí∞Â¢É"
                            value={condition.gut}
                            onChange={(val) => setCondition({...condition, gut: val})}
                            options={[
                                { value: 1, emoji: 'üòñ', label: 'ÊÇ™„ÅÑ' },
                                { value: 2, emoji: 'üòï', label: '‰∏çË™ø' },
                                { value: 3, emoji: 'üòê', label: 'ÊôÆÈÄö' },
                                { value: 4, emoji: 'üôÇ', label: 'ËâØÂ•Ω' },
                                { value: 5, emoji: '‚ú®', label: 'Âø´Ë™ø' }
                            ]}
                        />

                        {/* ‰ΩìÁµÑÊàêË®òÈå≤ */}
                        <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                            <h3 className="font-bold text-sm mb-3 flex items-center gap-2">
                                <Icon name="Scale" size={16} />
                                ‰ΩìÁµÑÊàêË®òÈå≤Ôºà‰ªªÊÑèÔºâ
                            </h3>
                            <div className="grid grid-cols-2 gap-3">
                                <div>
                                    <label className="block text-xs font-medium mb-1 flex items-center gap-1">
                                        ‰ΩìÈáç (kg)
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: '‰ΩìÈáçË®òÈå≤„Å´„Å§„ÅÑ„Å¶',
                                                content: `ÊØéÊó•„ÅÆ‰ΩìÈáç„ÇíË®òÈå≤„Åó„Å¶Â§âÂåñ„ÇíËøΩË∑°„Åó„Åæ„Åô„ÄÇ

„ÄêË®òÈå≤„ÅÆ„Çø„Ç§„Éü„É≥„Ç∞„Äë
‚Ä¢ Ëµ∑Â∫äÂæå„ÄÅ„Éà„Ç§„É¨„ÇíÊ∏à„Åæ„Åõ„ÅüÂæå
‚Ä¢ ÊúùÈ£üÂâç„ÅÆÁ©∫ËÖπÊôÇ
‚Ä¢ ÊØéÊó•Âêå„ÅòÊôÇÈñìÂ∏Ø„Å´Ê∏¨ÂÆö

„ÄêÊ¥ªÁî®ÊñπÊ≥ï„Äë
‰ΩìÈáç„ÅÆÂ§âÂåñ„ÇíÂ±•Ê≠¥„Ç∞„É©„Éï„ÅßÁ¢∫Ë™ç„Åß„Åç„ÄÅ„ÉÄ„Ç§„Ç®„ÉÉ„Éà„ÇÑ„Éê„É´„ÇØ„Ç¢„ÉÉ„Éó„ÅÆÈÄ≤Êçó„ÇíÂèØË¶ñÂåñ„Åß„Åç„Åæ„Åô„ÄÇÁõÆÊ®ô„Å´Âøú„Åò„Åü‰ΩìÈáçÁÆ°ÁêÜ„Å´ÂΩπÁ´ã„Å°„Åæ„Åô„ÄÇ`
                                            })}
                                            className="text-indigo-600 hover:text-indigo-800"
                                        >
                                            <Icon name="Info" size={12} />
                                        </button>
                                    </label>
                                    <input
                                        type="number"
                                        step="0.1"
                                        value={condition.weight}
                                        onChange={(e) => setCondition({...condition, weight: parseFloat(e.target.value) || 0})}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none text-sm"
                                        placeholder="‰æã: 65.5"
                                    />
                                </div>
                                <div>
                                    <label className="block text-xs font-medium mb-1 flex items-center gap-1">
                                        ‰ΩìËÑÇËÇ™Áéá (%)
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: '‰ΩìËÑÇËÇ™ÁéáË®òÈå≤„Å´„Å§„ÅÑ„Å¶',
                                                content: `‰ΩìËÑÇËÇ™Áéá„ÇíË®òÈå≤„Åó„Å¶‰ΩìÁµÑÊàê„ÅÆÂ§âÂåñ„ÇíËøΩË∑°„Åó„Åæ„Åô„ÄÇ

„ÄêÊ∏¨ÂÆöÊñπÊ≥ï„Äë
‚Ä¢ ‰ΩìÁµÑÊàêË®à„ÅßÊ∏¨ÂÆö
‚Ä¢ Ëµ∑Â∫äÂæå„ÄÅÁ©∫ËÖπÊôÇ„Å´Ê∏¨ÂÆö
‚Ä¢ ÊØéÊó•Âêå„ÅòÊôÇÈñìÂ∏Ø„ÉªÊù°‰ª∂„ÅßÊ∏¨ÂÆö

„ÄêÊ¥ªÁî®ÊñπÊ≥ï„Äë
‰ΩìÈáç„Å®‰ΩìËÑÇËÇ™Áéá„Åã„ÇâÈô§ËÑÇËÇ™‰ΩìÈáçÔºàLBMÔºâ„ÇíË®àÁÆó„Åó„ÄÅÁ≠ãËÇâÈáè„ÅÆÂ¢óÊ∏õ„ÇíÊääÊè°„Åß„Åç„Åæ„Åô„ÄÇ„Éú„Éá„Ç£„É°„Ç§„ÇØ„ÅÆË≥™„ÇíË©ï‰æ°„Åô„ÇãÈáçË¶Å„Å™ÊåáÊ®ô„Åß„Åô„ÄÇ`
                                            })}
                                            className="text-indigo-600 hover:text-indigo-800"
                                        >
                                            <Icon name="Info" size={12} />
                                        </button>
                                    </label>
                                    <input
                                        type="number"
                                        step="0.1"
                                        value={condition.bodyFat}
                                        onChange={(e) => setCondition({...condition, bodyFat: parseFloat(e.target.value) || 0})}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none text-sm"
                                        placeholder="‰æã: 15.5"
                                    />
                                </div>
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium mb-2">„É°„É¢Ôºà‰ªªÊÑèÔºâ</label>
                            <textarea
                                value={condition.notes}
                                onChange={(e) => setCondition({...condition, notes: e.target.value})}
                                placeholder="‰ΩìË™ø„ÇÑÊ∞ó„Å´„Å™„Çã„Åì„Å®„ÇíË®òÈå≤..."
                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                                rows="3"
                            />
                        </div>

                        <button
                            onClick={() => {
                                const newCondition = {
                                    id: Date.now(),
                                    time: new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' }),
                                    ...condition
                                };

                                onAdd(newCondition);

                                // ‰ΩìÁµÑÊàê„Çí„Éó„É≠„Éï„Ç£„Éº„É´„Å´Âç≥ÊôÇÂèçÊò†ÔºàË®òÈå≤Âæå„Å´ÂÆüË°åÔºâ
                                if (condition.weight > 0 || condition.bodyFat > 0) {
                                    setTimeout(() => {
                                        const currentProfile = JSON.parse(localStorage.getItem(STORAGE_KEYS.USER_PROFILE)) || {};
                                        if (condition.weight > 0) {
                                            currentProfile.weight = condition.weight;
                                        }
                                        if (condition.bodyFat > 0) {
                                            currentProfile.bodyFat = condition.bodyFat;
                                            currentProfile.bodyFatPercentage = condition.bodyFat;
                                            // LBMÔºàÈô§ËÑÇËÇ™‰ΩìÈáçÔºâ„ÇíÂÜçË®àÁÆó
                                            currentProfile.leanBodyMass = currentProfile.weight * (1 - currentProfile.bodyFat / 100);
                                        }
                                        localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(currentProfile));
                                        // „Éö„Éº„Ç∏„Çí„É™„É≠„Éº„Éâ„Åó„Å¶Êõ¥Êñ∞„ÇíÂèçÊò†
                                        window.location.reload();
                                    }, 100);
                                }
                            }}
                            className="w-full bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition"
                        >
                            Ë®òÈå≤„Åô„Çã
                        </button>
                    </div>
                );
            };

            const renderSupplementInput = () => {
                const fuzzyMatch = (text, query) => {
                    if (!query || query.trim() === '') return true;
                    const normalize = (str) => {
                        return str
                            .toLowerCase()
                            .replace(/[ÔºàÔºâ\(\)]/g, '') // Êã¨Âºß„ÇíÂâäÈô§
                            .replace(/[\u3041-\u3096]/g, (m) => String.fromCharCode(m.charCodeAt(0) + 0x60)) // „Å≤„Çâ„Åå„Å™‚Üí„Ç´„Çø„Ç´„Éä
                            .replace(/\s+/g, ''); // Á©∫ÁôΩÂâäÈô§
                    };
                    const normalizedText = normalize(text);
                    const normalizedQuery = normalize(query);
                    return normalizedText.includes(normalizedQuery);
                };

                const [addedItems, setAddedItems] = useState([]);
                const [showCustomSupplementForm, setShowCustomSupplementForm] = useState(false);
                const [customSupplementData, setCustomSupplementData] = useState({
                    name: '',
                    category: '„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´',
                    servingSize: 1,
                    servingUnit: 'g',
                    calories: 0,
                    protein: 0,
                    fat: 0,
                    carbs: 0,
                    vitaminA: 0, vitaminB1: 0, vitaminB2: 0, vitaminB6: 0, vitaminB12: 0,
                    vitaminC: 0, vitaminD: 0, vitaminE: 0, vitaminK: 0,
                    niacin: 0, pantothenicAcid: 0, biotin: 0, folicAcid: 0,
                    sodium: 0, potassium: 0, calcium: 0, magnesium: 0, phosphorus: 0,
                    iron: 0, zinc: 0, copper: 0, manganese: 0, iodine: 0, selenium: 0, chromium: 0, molybdenum: 0,
                    otherNutrients: [] // [{name: '', amount: '', unit: ''}]
                });

                const filteredSupplements = supplementDB.filter(supp =>
                    fuzzyMatch(supp.name, searchTerm)
                );

                // „ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠ò
                const saveAsTemplate = async () => {
                    if (!templateName.trim() || addedItems.length === 0) {
                        alert('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„ÄÅ„Çµ„Éó„É™„É°„É≥„Éà„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }
                    const template = {
                        id: Date.now(),
                        name: templateName,
                        items: addedItems
                    };
                    await DataService.saveSupplementTemplate(user.uid, template);
                    const templates = await DataService.getSupplementTemplates(user.uid);
                    setSupplementTemplates(templates);
                    alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                    setTemplateName('');
                };

                const loadTemplate = (template) => {
                    // „Éá„Ç£„Éº„Éó„Ç≥„Éî„Éº„Åó„Å¶ÂèÇÁÖß„ÇíÂàá„ÇãÔºàË§áË£Ω‰∏çÂÖ∑Âêà„ÇíÈò≤Ê≠¢Ôºâ
                    const copiedItems = JSON.parse(JSON.stringify(template.items));
                    setAddedItems(copiedItems);
                };

                const deleteTemplate = async (templateId) => {
                    if (confirm('„Åì„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
                        await DataService.deleteSupplementTemplate(user.uid, templateId);
                        const templates = await DataService.getSupplementTemplates(user.uid);
                        setSupplementTemplates(templates);
                    }
                };

                return (
                    <div className="space-y-4">
                        {/* ‚ë†Ê§úÁ¥¢Ê¨Ñ */}
                        <input
                            type="text"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            placeholder="„Çµ„Éó„É™„É°„É≥„Éà„ÇíÊ§úÁ¥¢..."
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                        />

                        {/* ‚ë°Êäò„Çä„Åü„Åü„Åø„Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ß */}
                        {!selectedItem ? (
                            <div className="space-y-2 max-h-96 overflow-y-auto">
                                {(() => {
                                    const categories = {};
                                    filteredSupplements.forEach(supp => {
                                        if (!categories[supp.category]) {
                                            categories[supp.category] = [];
                                        }
                                        categories[supp.category].push(supp);
                                    });

                                    return Object.keys(categories).map(category => (
                                        <div key={category} className="border rounded-lg overflow-hidden">
                                            <button
                                                onClick={() => setExpandedCategories(prev => ({...prev, [category]: !prev[category]}))}
                                                className="w-full px-4 py-3 bg-gray-50 hover:bg-gray-100 flex justify-between items-center"
                                            >
                                                <span className="font-medium">{category}</span>
                                                <div className="flex items-center gap-2">
                                                    <span className="text-xs text-gray-500">{categories[category].length}ÂìÅÁõÆ</span>
                                                    <Icon name={expandedCategories[category] ? 'ChevronDown' : 'ChevronRight'} size={20} />
                                                </div>
                                            </button>
                                            {expandedCategories[category] && (
                                                <div className="p-2 space-y-1">
                                                    {categories[category].map(supp => (
                                                        <button
                                                            key={supp.id}
                                                            onClick={() => setSelectedItem(supp)}
                                                            className="w-full text-left px-3 py-2 hover:bg-blue-50 rounded-lg transition"
                                                        >
                                                            <div className="flex justify-between items-center">
                                                                <span className="font-medium">{supp.name}</span>
                                                                <div className="text-right text-xs text-gray-500">
                                                                    <div>{supp.calories}kcal</div>
                                                                    <div>P:{supp.protein}g</div>
                                                                </div>
                                                            </div>
                                                        </button>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                    ));
                                })()}
                            </div>
                        ) : (
                            <div className="space-y-4">
                                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                                    <div className="flex justify-between items-start mb-2">
                                        <div>
                                            <h4 className="font-bold text-lg">{selectedItem.name}</h4>
                                            <p className="text-sm text-gray-600">{selectedItem.category}</p>
                                        </div>
                                        <button
                                            onClick={() => setSelectedItem(null)}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={20} />
                                        </button>
                                    </div>
                                    <div className="grid grid-cols-4 gap-2 mt-3 text-sm">
                                        <div>
                                            <p className="text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold">{selectedItem.calories}kcal</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">P</p>
                                            <p className="font-bold">{selectedItem.protein}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">F</p>
                                            <p className="font-bold">{selectedItem.fat}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">C</p>
                                            <p className="font-bold">{selectedItem.carbs}g</p>
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                        ÂõûÊï∞Ôºà1ÂõûÂàÜ = {selectedItem.unit || `${selectedItem.servingSize || 1}${selectedItem.servingUnit || 'g'}`}Ôºâ
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: '„Çµ„Éó„É™„É°„É≥„ÉàÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                content: `„Çµ„Éó„É™„É°„É≥„Éà„ÅÆÊëÇÂèñÂõûÊï∞„ÇíÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶ÂõûÊï∞„ÇíË®≠ÂÆöÔºà1ÔΩû20ÂõûÔºâ
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà1„ÄÅ5„ÄÅ10„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ

„Äê1ÂõûÂàÜ„Å®„ÅØÔºü„Äë
‚Ä¢ „Éó„É≠„ÉÜ„Ç§„É≥: ‰ªòÂ±û„Çπ„Éó„Éº„É≥1ÊùØÔºàÁ¥Ñ25gÔºâ
‚Ä¢ „ÇØ„É¨„Ç¢„ÉÅ„É≥: ‰ªòÂ±û„Çπ„Éó„Éº„É≥1ÊùØÔºàÁ¥Ñ5gÔºâ
‚Ä¢ „Éû„É´„ÉÅ„Éì„Çø„Éü„É≥: 1Á≤í„Éª1Èå†
‚Ä¢ BCAA: ‰ªòÂ±û„Çπ„Éó„Éº„É≥1ÊùØÔºàÁ¥Ñ5gÔºâ

„ÄêÂÖ•Âäõ‰æã„Äë
‚Ä¢ „Éó„É≠„ÉÜ„Ç§„É≥„ÇíÊúùÊô©2ÂõûÈ£≤„ÇÄ ‚Üí „Äå2„Äç„Å®ÂÖ•Âäõ
‚Ä¢ „Éû„É´„ÉÅ„Éì„Çø„Éü„É≥„Çí1Êó•1Á≤í ‚Üí „Äå1„Äç„Å®ÂÖ•Âäõ
‚Ä¢ „ÇØ„É¨„Ç¢„ÉÅ„É≥„Çí1Êó•4Âõû ‚Üí „Äå4„Äç„Å®ÂÖ•Âäõ

„ÄêPFCËá™ÂãïË®àÁÆó„Äë
ÂÖ•Âäõ„Åó„ÅüÂõûÊï∞„Å´Âøú„Åò„Å¶„ÄÅ„Åü„Çì„Å±„ÅèË≥™ÔºàPÔºâ„ÉªËÑÇË≥™ÔºàFÔºâ„ÉªÁÇ≠Ê∞¥ÂåñÁâ©ÔºàCÔºâ„ÅåËá™ÂãïË®àÁÆó„Åï„Çå„ÄÅ1Êó•„ÅÆÁõÆÊ®ô„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ`
                                            })}
                                            className="text-blue-600 hover:text-blue-800"
                                        >
                                            <Icon name="Info" size={14} />
                                        </button>
                                    </label>
                                    <div className="mb-3">
                                        <input
                                            type="range"
                                            min="1"
                                            max="20"
                                            step="1"
                                            value={amount || 1}
                                            onChange={(e) => setAmount(e.target.value)}
                                            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
                                            style={{
                                                background: `linear-gradient(to right, #2563eb 0%, #2563eb ${((amount || 1)/20)*100}%, #e5e7eb ${((amount || 1)/20)*100}%, #e5e7eb 100%)`
                                            }}
                                        />
                                        <div className="flex justify-between text-xs text-gray-500 mt-1">
                                            <span onClick={() => setAmount(1)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">1</span>
                                            <span onClick={() => setAmount(5)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">5</span>
                                            <span onClick={() => setAmount(10)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">10</span>
                                            <span onClick={() => setAmount(15)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">15</span>
                                            <span onClick={() => setAmount(20)} className="cursor-pointer hover:text-blue-600 hover:font-bold transition">20</span>
                                        </div>
                                    </div>
                                    <input
                                        type="number"
                                        value={amount || '1'}
                                        onChange={(e) => setAmount(e.target.value)}
                                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                                        placeholder="1"
                                    />
                                </div>

                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <p className="text-sm font-medium mb-2">ÊëÇÂèñÈáèÔºà{amount || 1}ÂõûÂàÜÔºâ</p>
                                    <div className="grid grid-cols-4 gap-2">
                                        <div>
                                            <p className="text-xs text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold text-blue-600">
                                                {Math.round(selectedItem.calories * Number(amount || 1))}kcal
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">P</p>
                                            <p className="font-bold">{(selectedItem.protein * Number(amount || 1)).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">F</p>
                                            <p className="font-bold">{(selectedItem.fat * Number(amount || 1)).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">C</p>
                                            <p className="font-bold">{(selectedItem.carbs * Number(amount || 1)).toFixed(1)}g</p>
                                        </div>
                                    </div>
                                </div>

                                <button
                                    onClick={() => {
                                        const numAmount = Number(amount || 1);

                                        // Calculate vitamins and minerals based on amount
                                        const vitamins = {};
                                        const minerals = {};

                                        if (selectedItem.vitamins) {
                                            Object.keys(selectedItem.vitamins).forEach(key => {
                                                vitamins[key] = selectedItem.vitamins[key] * numAmount;
                                            });
                                        }

                                        if (selectedItem.minerals) {
                                            Object.keys(selectedItem.minerals).forEach(key => {
                                                minerals[key] = selectedItem.minerals[key] * numAmount;
                                            });
                                        }

                                        // „Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥†„ÇíË®àÁÆó
                                        const otherNutrients = {};
                                        const otherNutrientKeys = ['caffeine', 'catechin', 'tannin', 'polyphenol', 'chlorogenicAcid',
                                                                    'creatine', 'lArginine', 'lCarnitine', 'EPA', 'DHA', 'coQ10',
                                                                    'lutein', 'astaxanthin'];
                                        otherNutrientKeys.forEach(key => {
                                            if (selectedItem[key]) {
                                                otherNutrients[key] = selectedItem[key] * numAmount;
                                            }
                                        });

                                        // unit„Éï„Ç£„Éº„É´„Éâ„Åã„ÇâÂàÜÈáè„Å®Âçò‰Ωç„ÇíÊäΩÂá∫
                                        let servingSize = selectedItem.servingSize || 1;
                                        let servingUnit = selectedItem.servingUnit || 'g';

                                        if (selectedItem.unit) {
                                            // "30g" ‚Üí servingSize=30, servingUnit="g"
                                            // "1Á≤í" ‚Üí servingSize=1, servingUnit="Á≤í"
                                            // "2Á≤í" ‚Üí servingSize=2, servingUnit="Á≤í"
                                            const match = selectedItem.unit.match(/^(\d+(?:\.\d+)?)(.*)/);
                                            if (match) {
                                                servingSize = parseFloat(match[1]);
                                                servingUnit = match[2] || 'g';
                                            }
                                        }

                                        const newItem = {
                                            name: selectedItem.name,
                                            amount: `${numAmount}ÂõûÂàÜ`,
                                            servings: numAmount,
                                            totalWeight: servingSize * numAmount,
                                            servingSize: servingSize,
                                            servingUnit: servingUnit,
                                            unit: selectedItem.unit || `${servingSize}${servingUnit}`,
                                            protein: selectedItem.protein * numAmount,
                                            fat: selectedItem.fat * numAmount,
                                            carbs: selectedItem.carbs * numAmount,
                                            calories: selectedItem.calories * numAmount,
                                            vitamins: vitamins,
                                            minerals: minerals,
                                            otherNutrients: otherNutrients
                                        };
                                        setAddedItems([...addedItems, newItem]);
                                        setSelectedItem(null);
                                        setAmount('1');
                                    }}
                                    className="w-full bg-blue-600 text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition"
                                >
                                    ËøΩÂä†
                                </button>
                            </div>
                        )}

                        {/* ‚ë¢ËøΩÂä†Ê∏à„Åø„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß */}
                        {addedItems.length > 0 && (
                            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                                <p className="text-sm font-medium text-blue-900 mb-3">ËøΩÂä†Ê∏à„Åø ({addedItems.length}ÂìÅÁõÆ)</p>
                                <div className="space-y-2">
                                    {addedItems.map((item, index) => (
                                        <div key={index} className="flex justify-between items-center bg-white p-2 rounded">
                                            <span className="text-sm">{item.name} √ó {item.amount}</span>
                                            <button
                                                onClick={() => setAddedItems(addedItems.filter((_, i) => i !== index))}
                                                className="text-red-500 hover:text-red-700"
                                            >
                                                <Icon name="X" size={16} />
                                            </button>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* ‚ë£„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºà‰∏ÄË¶ß+Êñ∞Ë¶è‰øùÂ≠òÔºâ - 12Êó•‰ª•‰∏ä„ÅßÈñãÊîæ */}
                        {unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id) && !selectedItem && (
                            <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-lg">
                                <button
                                    onClick={() => setShowTemplates(!showTemplates)}
                                    className="w-full flex items-center justify-between mb-3"
                                >
                                    <span className="font-medium text-yellow-800 flex items-center gap-2">
                                        <Icon name="BookTemplate" size={16} />
                                        „ÉÜ„É≥„Éó„É¨„Éº„Éà
                                    </span>
                                    <Icon name={showTemplates ? "ChevronUp" : "ChevronDown"} size={16} />
                                </button>

                                {showTemplates && (
                                    <div className="space-y-3">
                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß */}
                                        {supplementTemplates.length > 0 && (
                                            <div className="space-y-2">
                                                {supplementTemplates.map(template => (
                                                    <div key={template.id} className="flex items-center gap-2 bg-white p-2 rounded border">
                                                        <button
                                                            onClick={() => loadTemplate(template)}
                                                            className="flex-1 text-left text-sm hover:text-blue-600"
                                                        >
                                                            <p className="font-medium">{template.name}</p>
                                                            <p className="text-xs text-gray-500">{template.items.length}ÂìÅÁõÆ</p>
                                                        </button>
                                                        <button
                                                            onClick={() => deleteTemplate(template.id)}
                                                            className="p-1 text-red-500 hover:text-red-700"
                                                        >
                                                            <Icon name="Trash2" size={16} />
                                                        </button>
                                                    </div>
                                                ))}
                                            </div>
                                        )}

                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊñ∞Ë¶è‰øùÂ≠ò */}
                                        {addedItems.length > 0 && (
                                            <div className="pt-3 border-t border-yellow-300">
                                                <p className="text-xs text-yellow-800 mb-2">Êñ∞„Åó„ÅÑ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶‰øùÂ≠ò</p>
                                                <div className="flex gap-2">
                                                    <input
                                                        type="text"
                                                        value={templateName}
                                                        onChange={(e) => setTemplateName(e.target.value)}
                                                        placeholder="„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêçÔºà‰æã: Êúù„ÅÆÂÆöÁï™„Çµ„Éó„É™Ôºâ"
                                                        className="flex-1 px-3 py-2 text-sm border border-yellow-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:outline-none"
                                                    />
                                                    <button
                                                        onClick={saveAsTemplate}
                                                        className="px-3 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition text-sm font-medium"
                                                    >
                                                        ‰øùÂ≠ò
                                                    </button>
                                                </div>
                                            </div>
                                        )}

                                        {supplementTemplates.length === 0 && addedItems.length === 0 && (
                                            <p className="text-sm text-gray-600">‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                                        )}
                                    </div>
                                )}
                            </div>
                        )}

                        {/* „Ç´„Çπ„Çø„É†„Çµ„Éó„É™„É°„É≥„Éà‰ΩúÊàê */}
                        {!selectedItem && (
                            <div className="bg-green-50 border border-green-200 p-3 rounded-lg">
                                <div className="w-full flex items-center justify-between">
                                    <button
                                        onClick={() => setShowCustomSupplementForm(!showCustomSupplementForm)}
                                        className="flex-1 flex items-center gap-2 font-medium text-green-800"
                                    >
                                        <Icon name="Plus" size={16} />
                                        „Ç´„Çπ„Çø„É†„Çµ„Éó„É™„É°„É≥„Éà„Çí‰ΩúÊàê
                                    </button>
                                    <button type="button" onClick={() => {
                                        setWorkoutInfoModal({
                                            show: true,
                                            title: '„Ç´„Çπ„Çø„É†„Çµ„Éó„É™„É°„É≥„Éà‰ΩúÊàê„Å´„Å§„ÅÑ„Å¶',
                                            content: `„Éá„Éº„Çø„Éô„Éº„Çπ„Å´„Å™„ÅÑ„Çµ„Éó„É™„É°„É≥„Éà„ÇíÁã¨Ëá™„Å´ÁôªÈå≤„Åß„Åç„Åæ„Åô„ÄÇ

„ÄêÂü∫Êú¨ÊÉÖÂ†±„ÅÆÂÖ•Âäõ„Äë
‚Ä¢ ÂêçÂâç: „Çµ„Éó„É™„É°„É≥„Éà„ÅÆÂêçÁß∞Ôºà‰æã: „Éû„Ç§„Éó„É≠„ÉÜ„Ç§„É≥ „Éõ„Ç®„Ç§Ôºâ
‚Ä¢ „Ç´„ÉÜ„Ç¥„É™: Á®ÆÈ°û„ÇíÈÅ∏ÊäûÔºà„Éó„É≠„ÉÜ„Ç§„É≥„ÄÅ„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´„ÄÅ„Ç¢„Éü„ÉéÈÖ∏„Å™„Å©Ôºâ
‚Ä¢ 1ÂõûÂàÜ„ÅÆÈáè: 1Âõû„ÅÇ„Åü„Çä„ÅÆÊëÇÂèñÈáè„Å®Âçò‰ΩçÔºà‰æã: 30g„ÄÅ500mlÔºâ

„ÄêÊ†ÑÈ§äÁ¥†„ÅÆÂÖ•Âäõ„Äë
‚Ä¢ Âü∫Êú¨Ê†ÑÈ§äÁ¥†: „Ç´„É≠„É™„Éº„ÄÅ„Çø„É≥„Éë„ÇØË≥™„ÄÅËÑÇË≥™„ÄÅÁÇ≠Ê∞¥ÂåñÁâ©
‚Ä¢ „Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´: Ë©≥Á¥∞„Å™ÂæÆÈáèÊ†ÑÈ§äÁ¥†Ôºà‰ªªÊÑèÔºâ
‚Ä¢ „Åô„Åπ„Å¶„Äå1ÂõûÂàÜ„ÅÇ„Åü„Çä„Äç„ÅÆÂê´ÊúâÈáè„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ

„Äê„Éá„Éº„Çø„ÅÆÂèÇÁÖßÊñπÊ≥ï„Äë
1. ÂïÜÂìÅ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÊ†ÑÈ§äÊàêÂàÜË°®Á§∫„ÇíÁ¢∫Ë™ç
2. „É°„Éº„Ç´„ÉºÂÖ¨Âºè„Çµ„Ç§„Éà„ÅÆË£ΩÂìÅÊÉÖÂ†±„Éö„Éº„Ç∏
3. Ê†ÑÈ§ä„Éá„Éº„Çø„Éô„Éº„ÇπÔºàÊñáÈÉ®ÁßëÂ≠¶ÁúÅ„ÅÆÈ£üÂìÅÊàêÂàÜ„Éá„Éº„Çø„Éô„Éº„Çπ„Å™„Å©Ôºâ

„Äê‰ΩúÊàêÂæå„ÅÆ‰Ωø„ÅÑÊñπ„Äë
‰øùÂ≠ò„Åô„Çã„Å®„ÄÅ„Çµ„Éó„É™„É°„É≥„ÉàÈÅ∏ÊäûÁîªÈù¢„Å´ËøΩÂä†„Åï„Çå„ÄÅ‰ªñ„ÅÆ„Çµ„Éó„É™„Å®ÂêåÊßò„Å´Ë®òÈå≤„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô„ÄÇÂõûÊï∞ÔºàservingsÔºâ„ÇíÂÖ•Âäõ„Åô„Çã„Å®„ÄÅPFC„Å´Ëá™ÂãïÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ

„ÄêÊ≥®ÊÑèÁÇπ„Äë
‚Ä¢ Ê≠£Á¢∫„Å™Ê†ÑÈ§äÊÉÖÂ†±„ÅÆÂÖ•Âäõ„ÅåÈáçË¶Å„Åß„Åô
‚Ä¢ „Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´„ÅØ‰ªªÊÑèÈ†ÖÁõÆ„Åß„ÅôÔºà„Çè„Åã„ÇãÁØÑÂõ≤„ÅßÂÖ•ÂäõÔºâ
‚Ä¢ ‰ΩúÊàêÂæå„ÇÇÁ∑®ÈõÜ„ÉªÂâäÈô§„ÅåÂèØËÉΩ„Åß„Åô`
                                        });
                                    }} className="text-green-700 hover:text-green-900 p-1">
                                        <Icon name="Info" size={14} />
                                    </button>
                                    <button
                                        onClick={() => setShowCustomSupplementForm(!showCustomSupplementForm)}
                                        className="text-green-800 p-1"
                                    >
                                        <Icon name={showCustomSupplementForm ? "ChevronUp" : "ChevronDown"} size={16} />
                                    </button>
                                </div>
                                {showCustomSupplementForm && (
                                    <div className="mt-3 space-y-3 max-h-96 overflow-y-auto">
                                        <input
                                            type="text"
                                            value={customSupplementData.name}
                                            onChange={(e) => setCustomSupplementData({...customSupplementData, name: e.target.value})}
                                            placeholder="ÂêçÂâçÔºà‰æã: „Éû„É´„ÉÅ„Éì„Çø„Éü„É≥Ôºâ"
                                            className="w-full px-3 py-2 text-sm border rounded-lg"
                                        />
                                        <div className="grid grid-cols-2 gap-2">
                                            <select
                                                value={customSupplementData.category}
                                                onChange={(e) => setCustomSupplementData({...customSupplementData, category: e.target.value})}
                                                className="w-full px-3 py-2 text-sm border rounded-lg"
                                            >
                                                <option value="„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´">„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´</option>
                                                <option value="„Éó„É≠„ÉÜ„Ç§„É≥">„Éó„É≠„ÉÜ„Ç§„É≥</option>
                                                <option value="„Ç¢„Éü„ÉéÈÖ∏">„Ç¢„Éü„ÉéÈÖ∏</option>
                                                <option value="„Éâ„É™„É≥„ÇØ">„Éâ„É™„É≥„ÇØ</option>
                                                <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                                            </select>
                                            <div className="flex gap-2">
                                                <input
                                                    type="number"
                                                    value={customSupplementData.servingSize}
                                                    onChange={(e) => setCustomSupplementData({...customSupplementData, servingSize: e.target.value === '' ? '' : (parseFloat(e.target.value) || 1)})}
                                                    placeholder="1ÂõûÂàÜ„ÅÆÈáè"
                                                    className="flex-1 px-3 py-2 text-sm border rounded-lg"
                                                />
                                                <select
                                                    value={customSupplementData.servingUnit}
                                                    onChange={(e) => setCustomSupplementData({...customSupplementData, servingUnit: e.target.value})}
                                                    className="px-3 py-2 text-sm border rounded-lg"
                                                >
                                                    <option value="g">g</option>
                                                    <option value="mg">mg</option>
                                                    <option value="ml">ml</option>
                                                </select>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">Âü∫Êú¨Ê†ÑÈ§äÁ¥†Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                            <div className="grid grid-cols-2 gap-2">
                                                <div>
                                                    <label className="text-xs text-gray-600">„Ç´„É≠„É™„Éº (kcal)</label>
                                                    <input type="number" value={customSupplementData.calories} onChange={(e) => setCustomSupplementData({...customSupplementData, calories: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                                <div>
                                                    <label className="text-xs text-gray-600">„Çø„É≥„Éë„ÇØË≥™ (g)</label>
                                                    <input type="number" value={customSupplementData.protein} onChange={(e) => setCustomSupplementData({...customSupplementData, protein: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                                <div>
                                                    <label className="text-xs text-gray-600">ËÑÇË≥™ (g)</label>
                                                    <input type="number" value={customSupplementData.fat} onChange={(e) => setCustomSupplementData({...customSupplementData, fat: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                                <div>
                                                    <label className="text-xs text-gray-600">ÁÇ≠Ê∞¥ÂåñÁâ© (g)</label>
                                                    <input type="number" value={customSupplementData.carbs} onChange={(e) => setCustomSupplementData({...customSupplementData, carbs: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" />
                                                </div>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">„Éì„Çø„Éü„É≥Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                            <div className="grid grid-cols-2 gap-2">
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥A (Œºg)</label><input type="number" value={customSupplementData.vitaminA} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminA: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B1 (mg)</label><input type="number" value={customSupplementData.vitaminB1} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB1: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B2 (mg)</label><input type="number" value={customSupplementData.vitaminB2} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB2: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B6 (mg)</label><input type="number" value={customSupplementData.vitaminB6} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB6: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥B12 (Œºg)</label><input type="number" value={customSupplementData.vitaminB12} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminB12: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥C (mg)</label><input type="number" value={customSupplementData.vitaminC} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminC: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥D (Œºg)</label><input type="number" value={customSupplementData.vitaminD} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminD: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥E (mg)</label><input type="number" value={customSupplementData.vitaminE} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminE: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Çø„Éü„É≥K (Œºg)</label><input type="number" value={customSupplementData.vitaminK} onChange={(e) => setCustomSupplementData({...customSupplementData, vitaminK: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éä„Ç§„Ç¢„Ç∑„É≥ (mg)</label><input type="number" value={customSupplementData.niacin} onChange={(e) => setCustomSupplementData({...customSupplementData, niacin: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éë„É≥„Éà„ÉÜ„É≥ÈÖ∏ (mg)</label><input type="number" value={customSupplementData.pantothenicAcid} onChange={(e) => setCustomSupplementData({...customSupplementData, pantothenicAcid: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éì„Ç™„ÉÅ„É≥ (Œºg)</label><input type="number" value={customSupplementData.biotin} onChange={(e) => setCustomSupplementData({...customSupplementData, biotin: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">ËëâÈÖ∏ (Œºg)</label><input type="number" value={customSupplementData.folicAcid} onChange={(e) => setCustomSupplementData({...customSupplementData, folicAcid: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">„Éü„Éç„É©„É´Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                            <div className="grid grid-cols-2 gap-2">
                                                <div><label className="text-xs text-gray-600">„Éä„Éà„É™„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.sodium} onChange={(e) => setCustomSupplementData({...customSupplementData, sodium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Ç´„É™„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.potassium} onChange={(e) => setCustomSupplementData({...customSupplementData, potassium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Ç´„É´„Ç∑„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.calcium} onChange={(e) => setCustomSupplementData({...customSupplementData, calcium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éû„Ç∞„Éç„Ç∑„Ç¶„É† (mg)</label><input type="number" value={customSupplementData.magnesium} onChange={(e) => setCustomSupplementData({...customSupplementData, magnesium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„É™„É≥ (mg)</label><input type="number" value={customSupplementData.phosphorus} onChange={(e) => setCustomSupplementData({...customSupplementData, phosphorus: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">ÈâÑ (mg)</label><input type="number" value={customSupplementData.iron} onChange={(e) => setCustomSupplementData({...customSupplementData, iron: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">‰∫úÈâõ (mg)</label><input type="number" value={customSupplementData.zinc} onChange={(e) => setCustomSupplementData({...customSupplementData, zinc: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">ÈäÖ (mg)</label><input type="number" value={customSupplementData.copper} onChange={(e) => setCustomSupplementData({...customSupplementData, copper: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Éû„É≥„Ç¨„É≥ (mg)</label><input type="number" value={customSupplementData.manganese} onChange={(e) => setCustomSupplementData({...customSupplementData, manganese: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„É®„Ç¶Á¥† (Œºg)</label><input type="number" value={customSupplementData.iodine} onChange={(e) => setCustomSupplementData({...customSupplementData, iodine: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„Çª„É¨„É≥ (Œºg)</label><input type="number" value={customSupplementData.selenium} onChange={(e) => setCustomSupplementData({...customSupplementData, selenium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„ÇØ„É≠„É† (Œºg)</label><input type="number" value={customSupplementData.chromium} onChange={(e) => setCustomSupplementData({...customSupplementData, chromium: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                                <div><label className="text-xs text-gray-600">„É¢„É™„Éñ„Éá„É≥ (Œºg)</label><input type="number" value={customSupplementData.molybdenum} onChange={(e) => setCustomSupplementData({...customSupplementData, molybdenum: e.target.value === '' ? '' : parseFloat(e.target.value)})} className="w-full px-2 py-1 text-sm border rounded" /></div>
                                            </div>
                                        </div>

                                        <div className="border-t pt-2">
                                            <p className="text-xs font-medium text-gray-700 mb-2">„Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥†Ôºà{customSupplementData.servingSize}{customSupplementData.servingUnit}„ÅÇ„Åü„ÇäÔºâ</p>
                                            {customSupplementData.otherNutrients.map((nutrient, idx) => (
                                                <div key={idx} className="flex gap-2 mb-2">
                                                    <input type="text" value={nutrient.name} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].name = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Ê†ÑÈ§äÁ¥†Âêç" className="flex-1 px-2 py-1 text-sm border rounded" />
                                                    <input type="number" value={nutrient.amount} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].amount = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Èáè" className="w-20 px-2 py-1 text-sm border rounded" />
                                                    <input type="text" value={nutrient.unit} onChange={(e) => { const updated = [...customSupplementData.otherNutrients]; updated[idx].unit = e.target.value; setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} placeholder="Âçò‰Ωç" className="w-16 px-2 py-1 text-sm border rounded" />
                                                    <button onClick={() => { const updated = customSupplementData.otherNutrients.filter((_, i) => i !== idx); setCustomSupplementData({...customSupplementData, otherNutrients: updated}); }} className="text-red-500"><Icon name="X" size={16} /></button>
                                                </div>
                                            ))}
                                            <button onClick={() => setCustomSupplementData({...customSupplementData, otherNutrients: [...customSupplementData.otherNutrients, {name: '', amount: '', unit: ''}]})} className="w-full px-3 py-2 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:bg-gray-50 text-sm">+ Ê†ÑÈ§äÁ¥†„ÇíËøΩÂä†</button>
                                        </div>

                                        <button
                                            onClick={() => {
                                                if (!customSupplementData.name.trim()) {
                                                    alert('„Çµ„Éó„É™„É°„É≥„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                                                    return;
                                                }
                                                const customSupplement = {
                                                    id: Date.now(),
                                                    ...customSupplementData,
                                                    isCustom: true
                                                };
                                                setSelectedItem(customSupplement);
                                                setCustomSupplementData({
                                                    name: '', category: '„Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´', servingSize: 1, servingUnit: 'g',
                                                    calories: 0, protein: 0, fat: 0, carbs: 0,
                                                    vitaminA: 0, vitaminB1: 0, vitaminB2: 0, vitaminB6: 0, vitaminB12: 0,
                                                    vitaminC: 0, vitaminD: 0, vitaminE: 0, vitaminK: 0,
                                                    niacin: 0, pantothenicAcid: 0, biotin: 0, folicAcid: 0,
                                                    sodium: 0, potassium: 0, calcium: 0, magnesium: 0, phosphorus: 0,
                                                    iron: 0, zinc: 0, copper: 0, manganese: 0, iodine: 0, selenium: 0, chromium: 0, molybdenum: 0,
                                                    otherNutrients: []
                                                });
                                                setShowCustomSupplementForm(false);
                                            }}
                                            className="w-full px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition text-sm font-medium"
                                        >
                                            ‰ΩúÊàê„Åó„Å¶ÈÅ∏Êäû
                                        </button>
                                    </div>
                                )}
                            </div>
                        )}

                        {/* ‚ë§Ë®òÈå≤„Éú„Çø„É≥ */}
                        {addedItems.length > 0 && !selectedItem && (
                            <button
                                onClick={async () => {
                                    const newSupplement = {
                                        id: Date.now(),
                                        time: new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' }),
                                        name: '„Çµ„Éó„É™„É°„É≥„Éà',
                                        icon: 'Pill',
                                        items: addedItems
                                    };

                                    // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶Ëá™Âãï‰øùÂ≠òÔºà„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„Åå„ÅÇ„Çä„ÄÅ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÊ©üËÉΩ„ÅåÈñãÊîæ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
                                    if (templateName && unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id)) {
                                        const template = {
                                            id: Date.now(),
                                            name: templateName,
                                            items: addedItems
                                        };
                                        await DataService.saveSupplementTemplate(user.uid, template);
                                        const templates = await DataService.getSupplementTemplates(user.uid);
                                        setSupplementTemplates(templates);
                                        setTemplateName('');
                                    }

                                    onAdd(newSupplement);
                                }}
                                className="w-full bg-blue-600 text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                Ë®òÈå≤„Åô„Çã
                            </button>
                        )}
                    </div>
                );
            };

            const renderWorkoutInput = () => {
                const fuzzyMatch = (text, query) => {
                    if (!query || query.trim() === '') return true;
                    const normalize = (str) => {
                        return str
                            .toLowerCase()
                            .replace(/[ÔºàÔºâ\(\)]/g, '') // Êã¨Âºß„ÇíÂâäÈô§
                            .replace(/[\u3041-\u3096]/g, (m) => String.fromCharCode(m.charCodeAt(0) + 0x60)) // „Å≤„Çâ„Åå„Å™‚Üí„Ç´„Çø„Ç´„Éä
                            .replace(/\s+/g, ''); // Á©∫ÁôΩÂâäÈô§
                    };
                    const normalizedText = normalize(text);
                    const normalizedQuery = normalize(query);
                    return normalizedText.includes(normalizedQuery);
                };

                useEffect(() => {
                    loadTemplates();
                    // „É´„Éº„ÉÜ„Ç£„É≥„Åã„Çâ„ÉØ„Éº„ÇØ„Ç¢„Ç¶„ÉàËá™ÂãïË™≠„ÅøËæº„Åø
                    if (currentRoutine && !currentRoutine.isRestDay && currentRoutine.exercises) {
                        // „É´„Éº„ÉÜ„Ç£„É≥„ÅÆÊúÄÂàù„ÅÆÁ®ÆÁõÆ„ÇíËá™ÂãïÈÅ∏Êäû
                        if (currentRoutine.exercises.length > 0) {
                            const firstExercise = currentRoutine.exercises[0];
                            setCurrentExercise(firstExercise.exercise);
                            if (firstExercise.sets && firstExercise.sets.length > 0) {
                                setSets(firstExercise.sets.map(set => ({
                                    ...set,
                                    duration: set.duration || 0
                                })));
                            }
                        }
                    }
                }, []);

                const loadTemplates = async () => {
                    const templates = await DataService.getWorkoutTemplates(user.uid);
                    setWorkoutTemplates(templates);
                };

                const saveAsTemplate = async () => {
                    if (exercises.length === 0 || !templateName.trim()) {
                        alert('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„ÄÅÁ®ÆÁõÆ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }
                    const template = {
                        id: Date.now(),
                        name: templateName,
                        exercises: exercises, // Ë§áÊï∞Á®ÆÁõÆ„Çí‰øùÂ≠ò
                        createdAt: new Date().toISOString()
                    };
                    await DataService.saveWorkoutTemplate(user.uid, template);
                    setTemplateName('');
                    alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                    loadTemplates();
                };

                const loadTemplate = (template) => {
                    // Êñ∞ÂΩ¢ÂºèÔºàË§áÊï∞Á®ÆÁõÆÔºâ„Å®ÊóßÂΩ¢ÂºèÔºàÂçò‰∏ÄÁ®ÆÁõÆÔºâ„ÅÆ‰∏°Êñπ„Å´ÂØæÂøú
                    if (template.exercises && Array.isArray(template.exercises)) {
                        // Êñ∞ÂΩ¢ÂºèÔºöË§áÊï∞Á®ÆÁõÆ„ÇíË™≠„ÅøËæº„Åø
                        setExercises(template.exercises);
                        setCurrentExercise(null);
                        setSets([]);
                    } else if (template.exercise) {
                        // ÊóßÂΩ¢ÂºèÔºöÂçò‰∏ÄÁ®ÆÁõÆ„ÇíË™≠„ÅøËæº„Åø
                        setCurrentExercise(template.exercise);
                        setSets(template.sets || []);
                    }
                    setShowTemplates(false);
                };

                const deleteTemplate = async (templateId) => {
                    if (confirm('„Åì„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
                        await DataService.deleteWorkoutTemplate(user.uid, templateId);
                        loadTemplates();
                    }
                };

                const handleWorkoutSave = async () => {
                    if (exercises.length === 0) {
                        alert('ÈÅãÂãï„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }

                    // ÁèæÂú®„ÅÆÊó•‰ªò„ÇíÂèñÂæó
                    const today = new Date().toISOString().split('T')[0];

                    // ÈÅãÂãï„Éá„Éº„Çø„Çí‰øùÂ≠ò
                    const workoutData = exercises.map(ex => ({
                        name: ex.exercise.name,
                        category: ex.exercise.category,
                        sets: ex.sets,
                        calories: ex.calories
                    }));

                    // dailyRecord„Å´‰øùÂ≠ò
                    const existingRecord = await DataService.getDailyRecord(user?.uid || DEV_USER_ID, today);
                    const updatedRecord = {
                        ...existingRecord,
                        exercises: [...(existingRecord.exercises || []), ...workoutData]
                    };

                    await DataService.saveDailyRecord(user?.uid || DEV_USER_ID, today, updatedRecord);

                    alert('ÈÅãÂãï„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                    onClose();
                };

                const filteredExercises = exerciseDB.filter(ex =>
                    fuzzyMatch(ex.name, searchTerm) ||
                    fuzzyMatch(ex.category, searchTerm)
                );

                // „Çª„ÉÉ„ÉàÂçò‰Ωç„Åß„ÅØ‰ΩìÁ©ç„ÅÆ„Åø„ÇíË®òÈå≤Ôºà„Ç´„É≠„É™„Éº„ÅØÁ®ÆÁõÆÂçò‰Ωç„ÅßË®àÁÆóÔºâ
                const calculateSetVolume = (set) => {
                    const weight = set.weight || 0;
                    const reps = set.reps || 0;
                    return weight * reps; // Á∑è‰ΩìÁ©ç (kg √ó reps)
                };

                // Á®ÆÁõÆÂÖ®‰Ωì„ÅÆ„Ç´„É≠„É™„Éº„ÇíË®àÁÆóÔºàË´ñÊñá„ÅÆÂõûÂ∏∞ÂºèÔºâ
                const calculateExerciseCalories = (sets) => {
                    /**
                     * „É¨„Ç∏„Çπ„Çø„É≥„ÇπÈÅãÂãï„Ç´„É≠„É™„ÉºÊ∂àË≤ª‰∫àÊ∏¨ÂºèÔºàÂõûÂ∏∞„É¢„Éá„É´Ôºâ
                     *
                     * „ÄêÁßëÂ≠¶ÁöÑÊ†πÊã†„Äë
                     * ÈñìÊé•ÁÜ±ÈáèÊ∏¨ÂÆöÊ≥ï„Å´„Çà„ÇãÂÆüÊ∏¨„Éá„Éº„Çø„Åã„ÇâÂ∞éÂá∫„Åï„Çå„ÅüÂ§öÈáçÁ∑öÂΩ¢ÂõûÂ∏∞Âºè
                     * R¬≤ = 0.751, SEE = 29.7 kcal, p < 0.0001
                     *
                     * „ÄêÈáçË¶Å„Äë„Åì„ÅÆÂºè„ÅØ1Âõû„ÅÆ„ÉØ„Éº„ÇØ„Ç¢„Ç¶„Éà„Çª„ÉÉ„Ç∑„Éß„É≥ÂÖ®‰Ωì„Å´ÂØæ„Åô„Çã‰∫àÊ∏¨Âºè
                     *
                     * „ÄêË®àÁÆóÂºè„Äë
                     * Ê≠£Âë≥kcal = 1.125(Ë∫´Èï∑, cm) - 0.662(Âπ¥ÈΩ¢, Ê≠≥) - 0.800(ËÑÇËÇ™Èáè, kg)
                     *           + 1.344(LBM, kg) + 2.278(Á∑è‰ΩìÁ©ç √ó 10^-3) - 144.846
                     *
                     * „ÄêÁ∑è‰ΩìÁ©ç„ÅÆÂÆöÁæ©„Äë
                     * Á∑è‰ΩìÁ©ç = Œ£(‰ΩøÁî®ÈáçÈáè(kg) √ó ÂõûÊï∞(reps)) ‚Üê ÂÖ®„Çª„ÉÉ„Éà„ÅÆÂêàË®à
                     */

                    // „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæó
                    const userProfile = JSON.parse(localStorage.getItem(STORAGE_KEYS.USER_PROFILE) || '{}');
                    const height = userProfile.height || 170; // Ë∫´Èï∑ (cm)
                    const age = userProfile.age || 30; // Âπ¥ÈΩ¢ (Ê≠≥)
                    const lbm = userProfile.leanBodyMass || 50; // Èô§ËÑÇËÇ™‰ΩìÈáç (kg)
                    const weight_total = userProfile.weight || 70; // ‰ΩìÈáç (kg)
                    const fatMass = weight_total - lbm; // ËÑÇËÇ™Èáè (kg)

                    // ÂÖ®„Çª„ÉÉ„Éà„ÅÆÁ∑è‰ΩìÁ©ç„ÇíË®àÁÆó
                    const totalVolume = sets.reduce((sum, set) => {
                        return sum + calculateSetVolume(set);
                    }, 0);

                    // ÂõûÂ∏∞Âºè„Å´„Çà„ÇãÊ∂àË≤ª„Ç´„É≠„É™„ÉºË®àÁÆó
                    const netKcal =
                        1.125 * height -
                        0.662 * age -
                        0.800 * fatMass +
                        1.344 * lbm +
                        2.278 * (totalVolume * 0.001) -
                        144.846;

                    // Ë≤†„ÅÆÂÄ§„ÇíÈò≤„Åê
                    return Math.max(netKcal, 0);
                };

                return (
                    <div className="space-y-4">
                        {/* ‚ë†Ê§úÁ¥¢Ê¨Ñ */}
                        <input
                            type="text"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            placeholder="Á®ÆÁõÆ„ÇíÊ§úÁ¥¢..."
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:outline-none"
                        />

                        {/* PG-KÂºèË™¨Êòé„Éê„Éä„Éº */}
                        <div className="bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-lg p-4">
                            <button
                                type="button"
                                onClick={() => setWorkoutInfoModal({
                                    show: true,
                                    title: 'PG-KÂºè„Å®„ÅØÔºü - METs„ÇíË∂Ö„Åà„ÅüÁßëÂ≠¶ÁöÑ„Ç´„É≠„É™„ÉºË®àÁÆó',
                                    content: `Your Coach+„ÅØ„ÄÅÂæìÊù•„ÅÆMETsÊ≥ï„ÅÆÈôêÁïå„ÇíÂÖãÊúç„Åó„ÅüÁã¨Ëá™„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÄåPG-KÂºèÔºàPG-Kinetic FormulaÔºâ„Äç„ÇíÊê≠Ëºâ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ

„ÄêÂæìÊù•„ÅÆMETsÊ≥ï„ÅÆËá¥ÂëΩÁöÑÊ¨†Èô•„Äë

‰∏ÄËà¨ÁöÑ„Å™„Éï„Ç£„ÉÉ„Éà„Éç„Çπ„Ç¢„Éó„É™„ÅØ„ÄÅMETs„Å®„ÅÑ„ÅÜÂõ∫ÂÆöÂÄ§„Åß„Ç´„É≠„É™„Éº„ÇíË®àÁÆó„Åó„Åæ„ÅôÔºö
‚Ä¢ „Ç¶„Çß„Ç§„Éà„Éà„É¨„Éº„Éã„É≥„Ç∞ÔºàËªΩÂ∫¶Ôºâ= 3.5 METs
‚Ä¢ „Ç¶„Çß„Ç§„Éà„Éà„É¨„Éº„Éã„É≥„Ç∞ÔºàÈ´òÂº∑Â∫¶Ôºâ= 6.0 METs

„Åì„Çå„Å´„ÅØ4„Å§„ÅÆÊ∑±Âàª„Å™ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„ÅôÔºö

1. **Á∑è‰ΩìÈáç„ÅÆ„Åø‰ΩøÁî®**
   ‚Üí Á≠ãËÇâÈáè„Å®ËÑÇËÇ™Èáè„ÇíÂå∫Âà•„Åó„Å™„ÅÑ
   ‚Üí Á≠ãËÇâË≥™„Å™‰∫∫„Åª„Å©‰∏çÊ≠£Á¢∫

2. **ÂÆüÈöõ„ÅÆ‰ªï‰∫ãÈáè„ÇíÁÑ°Ë¶ñ**
   ‚Üí 10kg„ÅÆ„ÉÄ„É≥„Éô„É´„ÇÇ200kg„ÅÆ„Éê„Éº„Éô„É´„ÇÇÂêå„ÅòÊâ±„ÅÑ
   ‚Üí ÈáçÈáè„ÉªÂõûÊï∞„ÉªË∑ùÈõ¢„ÅåÂèçÊò†„Åï„Çå„Å™„ÅÑ

3. **‰ºëÊÅØÊôÇÈñì„ÅÆÊ∑∑Âêå**
   ‚Üí „Çª„ÉÉ„ÉàÈñì„ÅÆ‰ºëÊÜ©„ÇÇ„ÄåÈ´òÂº∑Â∫¶„Äç„Å®„Åó„Å¶Ë®àÁÆó
   ‚Üí ÂÆüÈöõ„ÅÆÈÅãÂãïÊôÇÈñì„ÅÆ3„Äú4ÂÄç„ÇíÈÅéÂ§ßË©ï‰æ°

4. **„Ç¢„Éï„Çø„Éº„Éê„Éº„É≥ÂäπÊûúÔºàEPOCÔºâ„ÅÆÁÑ°Ë¶ñ**
   ‚Üí „Éà„É¨„Éº„Éã„É≥„Ç∞Âæå24„Äú48ÊôÇÈñìÁ∂ö„Åè‰ª£Ë¨ù‰∫¢ÈÄ≤„ÇíË®àÁÆóÂ§ñ
   ‚Üí Á≠ã„Éà„É¨„ÅÆÁúü‰æ°„ÇíË¶ãÈÄÉ„Åô

„ÄêPG-KÂºè„ÅÆÈù©Êñ∞ÊÄß„Äë

Your Coach+„ÅÆPG-KÂºè„ÅØ„ÄÅ„Åì„Çå„Çâ„Åô„Åπ„Å¶„ÇíËß£Ê±∫„Åó„Åæ„ÅôÔºö

**A: Áâ©ÁêÜÁöÑ‰ªï‰∫ãÈáè„ÅÆÊ≠£Á¢∫„Å™Ë®àÁÆó**
„Ç´„É≠„É™„Éº = (ÈáçÈáè √ó Ë∑ùÈõ¢ √ó ÂõûÊï∞ √ó Á®ÆÁõÆ‰øÇÊï∞) / 4184 / 0.22

‚Ä¢ ÈáçÈáè„ÉªË∑ùÈõ¢„ÉªÂõûÊï∞„ÇíÂÄãÂà•„Å´Ë®àÊ∏¨
‚Ä¢ Joule ‚Üí kcal „ÅÆÊ≠£Á¢∫„Å™Âçò‰ΩçÂ§âÊèõ
‚Ä¢ ‰∫∫‰Ωì„ÅÆÊ©üÊ¢∞ÂäπÁéáÔºàŒ∑=0.22Ôºâ„ÇíÁßëÂ≠¶ÁöÑ„Å´ÂèçÊò†
‚Ä¢ Á®ÆÁõÆ‰øÇÊï∞„ÅßÂÖ®Ë∫´ÂãïÂì°Â∫¶„ÇíË™øÊï¥

**B: ‰ΩìÁµÑÊàê„Å´Âü∫„Å•„Åè‰ª£Ë¨ù„Ç≥„Çπ„Éà**
‰ª£Ë¨ù = BMR/Áßí √ó ÈÅãÂãïÂº∑Â∫¶(1.5ÂÄç) √ó TUT

‚Ä¢ LBMÔºàÈô§ËÑÇËÇ™‰ΩìÈáçÔºâ„Å®ËÑÇËÇ™Èáè„ÇíÂàÜÈõ¢
‚Ä¢ BMR = (LBM √ó 22) + (ËÑÇËÇ™ √ó 4.5) kcal/day
‚Ä¢ „ÅÇ„Å™„ÅüÂõ∫Êúâ„ÅÆ‰ª£Ë¨ùËÉΩÂäõ„ÇíÂèçÊò†
‚Ä¢ „Çª„ÉÉ„Éà‰∏≠„ÅÆÁ∑äÂºµÊôÇÈñìÔºàTUTÔºâ„ÇíËÄÉÊÖÆ

**C: Êñ≠Á∂öÁöÑ„Éà„É¨„Éº„Éã„É≥„Ç∞„ÅÆÊ≠£Á¢∫„Å™Âá¶ÁêÜ**
‚Ä¢ „Çª„ÉÉ„ÉàÂçò‰Ωç„ÅßÂÄãÂà•Ë®àÁÆó
‚Ä¢ ‰ºëÊÅØÊôÇÈñì„ÇíÈÅéÂ§ßË©ï‰æ°„Åó„Å™„ÅÑ
‚Ä¢ ÂÆüÈöõ„ÅÆÈÅãÂãïÊôÇÈñì„ÅÆ„Åø„ÇíÊ≠£Á¢∫„Å´Ë©ï‰æ°

„ÄêÁßëÂ≠¶ÁöÑÊ†πÊã†„Äë

PG-KÂºè„ÅØ„ÄÅ„Ç¶„Çß„Çπ„Çø„É≥„Ç±„É≥„Çø„ÉÉ„Ç≠„ÉºÂ§ßÂ≠¶ÔºàWKUÔºâ„ÅÆÁ†îÁ©∂„ÅåË®ºÊòé„Åó„Åü2Â§ß‰∫àÊ∏¨Âõ†Â≠ê„ÇíÁµ±ÂêàÔºö

1. **Èô§ËÑÇËÇ™‰ΩìÈáçÔºàLBMÔºâ** - „Ç®„Éç„É´„ÇÆ„ÉºÊ∂àË≤ª„ÅÆ‰∏ªË¶ÅÂõ†
2. **Á∑è‰ªï‰∫ãÈáè** - ÂÆüÈöõ„Å´Ë°å„Å£„ÅüÁâ©ÁêÜÁöÑ„Å™‰ªï‰∫ã

„Åì„ÅÆÁ†îÁ©∂„ÅÆ‰∫àÊ∏¨Á≤æÂ∫¶ÔºàR¬≤=0.751Ôºâ„ÅØ„ÄÅ„Ç®„Éç„É´„ÇÆ„ÉºÊ∂àË≤ª„ÅÆÂ§âÂãï„ÅÆ75%„ÇíË™¨Êòé„Åß„Åç„Çã„Åì„Å®„ÇíÊÑèÂë≥„Åó„ÄÅ„Åì„ÅÆÂàÜÈáé„ÅßÈùûÂ∏∏„Å´È´ò„ÅÑÁ≤æÂ∫¶„Åß„Åô„ÄÇ

„Äê„ÅÇ„Å™„Åü„Å∏„ÅÆ‰æ°ÂÄ§„Äë

‚úì **Ê≠£ÂΩì„Å™Ë©ï‰æ°**: „ÅÇ„Å™„Åü„ÅÆÂä™Âäõ„ÅåÊ≠£Á¢∫„Å´Êï∞ÂÄ§Âåñ„Åï„Çå„Çã
‚úì **ÂÄãÂà•ÊúÄÈÅ©Âåñ**: „ÅÇ„Å™„Åü„ÅÆ‰ΩìÁµÑÊàê„Å´Âü∫„Å•„ÅèË®àÁÆó
‚úì **ÁßëÂ≠¶ÁöÑ‰ø°È†ºÊÄß**: Â≠¶Ë°ìÁ†îÁ©∂„Å´Âü∫„Å•„ÅÑ„ÅüÁã¨Ëá™ÊäÄË°ì
‚úì **„É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥**: Áúü„ÅÆ„Ç´„É≠„É™„ÉºÊ∂àË≤ª„ÇíÁü•„Çã„Åì„Å®„ÅßÁ∂ôÁ∂öÂäõUP

Âá∫ÂÖ∏: "METs„ÇíË∂Ö„Åà„Å¶: Á≠ãÂäõ„Éà„É¨„Éº„Éã„É≥„Ç∞„Å´„Åä„Åë„Çã„Ç®„Éç„É´„ÇÆ„ÉºÊ∂àË≤ªÈáè„ÅÆÁßëÂ≠¶ÁöÑÂÜçË©ï‰æ°"`
                                })}
                                className="w-full text-left flex items-start gap-3 hover:opacity-80 transition"
                            >
                                <div className="flex-shrink-0 w-10 h-10 bg-orange-600 rounded-full flex items-center justify-center">
                                    <Icon name="Zap" size={20} className="text-white" />
                                </div>
                                <div className="flex-1">
                                    <h3 className="font-bold text-orange-900 mb-1 flex items-center gap-2">
                                        PG-KÂºèÊê≠Ëºâ - METs„ÇíË∂Ö„Åà„ÅüÁßëÂ≠¶
                                        <Icon name="ChevronRight" size={16} className="text-orange-600" />
                                    </h3>
                                    <p className="text-xs text-orange-700">
                                        „ÅÇ„Å™„Åü„ÅÆ‰ΩìÁµÑÊàê„Å®ÂÆüÈöõ„ÅÆ‰ªï‰∫ãÈáè„Åß„ÄÅÊ≠£Á¢∫„Å´„Ç´„É≠„É™„Éº„ÇíË®àÁÆó„Åó„Åæ„Åô
                                    </p>
                                </div>
                            </button>
                        </div>

                        {/* ‚ë°Êäò„Çä„Åü„Åü„Åø„Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ß */}
                        {!currentExercise ? (
                            <div className="space-y-2 max-h-96 overflow-y-auto">
                                    {(() => {
                                        const categories = {};
                                        filteredExercises.forEach(ex => {
                                            if (!categories[ex.category]) {
                                                categories[ex.category] = [];
                                            }
                                            categories[ex.category].push(ex);
                                        });

                                        return Object.keys(categories).map(category => (
                                            <div key={category} className="border rounded-lg overflow-hidden">
                                                <button
                                                    onClick={() => setExpandedCategories(prev => ({...prev, [category]: !prev[category]}))}
                                                    className="w-full px-4 py-3 bg-gray-50 hover:bg-gray-100 flex justify-between items-center"
                                                >
                                                    <span className="font-medium">{category}</span>
                                                    <div className="flex items-center gap-2">
                                                        <span className="text-xs text-gray-500">{categories[category].length}Á®ÆÁõÆ</span>
                                                        <Icon name={expandedCategories[category] ? 'ChevronDown' : 'ChevronRight'} size={20} />
                                                    </div>
                                                </button>
                                                {expandedCategories[category] && (
                                                    <div className="p-2 space-y-1">
                                                        {categories[category].map(exercise => (
                                                            <button
                                                                key={exercise.id}
                                                                onClick={() => setCurrentExercise(exercise)}
                                                                className="w-full text-left px-3 py-2 hover:bg-orange-50 rounded-lg transition"
                                                            >
                                                                <div className="flex justify-between items-center">
                                                                    <div>
                                                                        <p className="font-medium">{exercise.name}</p>
                                                                        <p className="text-xs text-gray-500">{exercise.subcategory}</p>
                                                                    </div>
                                                                    <span className="text-xs bg-gray-100 px-2 py-1 rounded-full self-start">
                                                                        {exercise.exerciseType === 'aerobic' ? 'ÊúâÈÖ∏Á¥†' : 'ÁÑ°ÈÖ∏Á¥†'}
                                                                    </span>
                                                                </div>
                                                            </button>
                                                        ))}
                                                    </div>
                                                )}
                                            </div>
                                        ));
                                    })()}
                                </div>
                        ) : (
                            <div className="space-y-4">
                                <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                                    <div className="flex justify-between items-start mb-2">
                                        <div>
                                            <h4 className="font-bold text-lg">{currentExercise.name}</h4>
                                            <p className="text-sm text-gray-600">{currentExercise.category}</p>
                                        </div>
                                        <button
                                            onClick={() => {
                                                setCurrentExercise(null);
                                                setSets([]);
                                            }}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={20} />
                                        </button>
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    {/* ÈáçÈáèÂÖ•Âäõ */}
                                    <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            ÈáçÈáè (kg)
                                                <button
                                                    type="button"
                                                    onClick={() => setWorkoutInfoModal({
                                                        show: true,
                                                        title: '„Éà„É¨„Éº„Éã„É≥„Ç∞ÈáçÈáèÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                        content: `‰ΩøÁî®„Åó„ÅüÈáçÈáè„Çí„Ç≠„É≠„Ç∞„É©„É†Âçò‰Ωç„ÅßÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶Â§ß„Åæ„Åã„Å™ÈáçÈáè„ÇíË®≠ÂÆöÔºà0ÔΩû500kgÔºâ
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà100kg„ÄÅ200kg„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ
4. Â¢óÊ∏õ„Éú„Çø„É≥Ôºà-10ÔΩû+10Ôºâ„ÅßÂæÆË™øÊï¥

„ÄêÂÖ•Âäõ„ÅÆÁõÆÂÆâ„Äë
‚Ä¢ „ÉÄ„É≥„Éô„É´: ÁâáÊâã„ÅÆÈáçÈáèÔºà‰æã: 10kgÔºâ
‚Ä¢ „Éê„Éº„Éô„É´: „Éó„É¨„Éº„ÉàËæº„Åø„ÅÆÁ∑èÈáçÈáèÔºà‰æã: 60kgÔºâ
‚Ä¢ „Éû„Ç∑„É≥: ÈÅ∏Êäû„Åó„Åü„Ç¶„Çß„Ç§„Éà„ÅÆÈáçÈáè
‚Ä¢ Ëá™Èáç„Éà„É¨„Éº„Éã„É≥„Ç∞: ‰ΩìÈáç„ÇíÂÖ•Âäõ

„ÄêPGÂºè„Åß„ÅÆÊ¥ªÁî®„Äë
ÈáçÈáè„ÅØÈÅãÂãïÂº∑Â∫¶„ÅÆÈáçË¶Å„Å™ÊåáÊ®ô„Åß„Åô„ÄÇPGÂºè„Åß„ÅØ„ÄÅÈáçÈáè„Å®ÂõûÊï∞„ÄÅÂèØÂãïË∑ùÈõ¢„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶Áâ©ÁêÜÁöÑ‰ªï‰∫ãÈáè„ÇíÁÆóÂá∫„Åó„ÄÅÊ≠£Á¢∫„Å™Ê∂àË≤ª„Ç´„É≠„É™„Éº„ÇíË®àÁÆó„Åó„Åæ„Åô„ÄÇ`
                                                    })}
                                                    className="text-indigo-600 hover:text-indigo-800"
                                                >
                                                    <Icon name="Info" size={14} />
                                                </button>
                                            </label>
                                            {/* „Çπ„É©„Ç§„ÉÄ„Éº - ÈáçÈáè */}
                                            <div className="mb-3">
                                                <input
                                                    type="range"
                                                    min="0"
                                                    max="500"
                                                    step="2.5"
                                                    value={currentSet.weight}
                                                    onChange={(e) => setCurrentSet({...currentSet, weight: e.target.value === '' ? '' : Number(e.target.value)})}
                                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-orange-600"
                                                    style={{
                                                        background: `linear-gradient(to right, #ea580c 0%, #ea580c ${(currentSet.weight/500)*100}%, #e5e7eb ${(currentSet.weight/500)*100}%, #e5e7eb 100%)`
                                                    }}
                                                />
                                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 0})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">0kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 100})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">100kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 200})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">200kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 300})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">300kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 400})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">400kg</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, weight: 500})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">500kg</span>
                                                </div>
                                            </div>
                                            <input
                                                type="number"
                                                value={currentSet.weight}
                                                onChange={(e) => setCurrentSet({...currentSet, weight: e.target.value === '' ? '' : Number(e.target.value)})}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:outline-none"
                                            />
                                            {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                                            <div className="grid grid-cols-6 gap-1 mt-2">
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Math.max(0, Number(currentSet.weight) - 10)})}
                                                    className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                                >
                                                    -10
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Math.max(0, Number(currentSet.weight) - 5)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Math.max(0, Number(currentSet.weight) - 2.5)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -2.5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Number(currentSet.weight) + 2.5})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +2.5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Number(currentSet.weight) + 5})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, weight: Number(currentSet.weight) + 10})}
                                                    className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                                >
                                                    +10
                                                </button>
                                            </div>
                                    </div>

                                    {/* ÂõûÊï∞ÂÖ•Âäõ */}
                                    <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            ÂõûÊï∞
                                                <button
                                                    type="button"
                                                    onClick={() => setWorkoutInfoModal({
                                                        show: true,
                                                        title: '„Éà„É¨„Éº„Éã„É≥„Ç∞ÂõûÊï∞ÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                        content: `1„Çª„ÉÉ„Éà„ÅßÂÆüÊñΩ„Åó„ÅüÂõûÊï∞Ôºà„É¨„ÉÉ„ÉóÊï∞Ôºâ„ÇíÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶ÂõûÊï∞„ÇíË®≠ÂÆöÔºà1ÔΩû50ÂõûÔºâ
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà10Âõû„ÄÅ20Âõû„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ
4. Â¢óÊ∏õ„Éú„Çø„É≥Ôºà-5/-3/-1/+1/+3/+5Ôºâ„ÅßÂæÆË™øÊï¥

„Äê„Éà„É¨„Éº„Éã„É≥„Ç∞ÁõÆÁöÑÂà•„ÅÆÁõÆÂÆâ„Äë
‚Ä¢ Á≠ãÂäõÂêë‰∏ä: 1ÔΩû5ÂõûÔºàÈ´òÈáçÈáèÔºâ
‚Ä¢ Á≠ãËÇ•Â§ß: 6ÔΩû12ÂõûÔºà‰∏≠ÈáçÈáèÔºâ
‚Ä¢ Á≠ãÊåÅ‰πÖÂäõ: 13Âõû‰ª•‰∏äÔºà‰ΩéÔΩû‰∏≠ÈáçÈáèÔºâ
‚Ä¢ ÊúâÈÖ∏Á¥†ÈÅãÂãï: Á∂ôÁ∂öÊôÇÈñì„ÇíÁ∑èÊôÇÈñì„Å´ÂÖ•Âäõ

„ÄêPGÂºè„Åß„ÅÆÊ¥ªÁî®„Äë
ÂõûÊï∞„ÅØÈÅãÂãï„ÅÆË≥™„ÇíÁ§∫„ÅôÊåáÊ®ô„Åß„Åô„ÄÇÈáçÈáè√óÂõûÊï∞√óÂèØÂãïË∑ùÈõ¢„ÅßÁâ©ÁêÜÁöÑ‰ªï‰∫ãÈáè„ÅåÊ±∫„Åæ„Çä„ÄÅ„Åù„Çå„ÅåPGÂºè„Å´„Çà„ÇãÁ≤æÂØÜ„Å™Ê∂àË≤ª„Ç´„É≠„É™„ÉºË®àÁÆó„ÅÆÂü∫Á§é„Å®„Å™„Çä„Åæ„Åô„ÄÇ`
                                                    })}
                                                    className="text-indigo-600 hover:text-indigo-800"
                                                >
                                                    <Icon name="Info" size={14} />
                                                </button>
                                            </label>
                                            {/* „Çπ„É©„Ç§„ÉÄ„Éº - ÂõûÊï∞ */}
                                            <div className="mb-2">
                                                <input
                                                    type="range"
                                                    min="1"
                                                    max="50"
                                                    step="1"
                                                    value={currentSet.reps}
                                                    onChange={(e) => setCurrentSet({...currentSet, reps: e.target.value === '' ? '' : Number(e.target.value)})}
                                                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-orange-600"
                                                    style={{
                                                        background: `linear-gradient(to right, #ea580c 0%, #ea580c ${(currentSet.reps/50)*100}%, #e5e7eb ${(currentSet.reps/50)*100}%, #e5e7eb 100%)`
                                                    }}
                                                />
                                                <div className="flex justify-between text-xs text-gray-500 mt-1">
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 1})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">1Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 10})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">10Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 20})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">20Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 30})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">30Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 40})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">40Âõû</span>
                                                    <span onClick={() => setCurrentSet({...currentSet, reps: 50})} className="cursor-pointer hover:text-orange-600 hover:font-bold transition">50Âõû</span>
                                                </div>
                                            </div>
                                            <input
                                                type="number"
                                                value={currentSet.reps}
                                                onChange={(e) => setCurrentSet({...currentSet, reps: e.target.value === '' ? '' : Number(e.target.value)})}
                                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:outline-none"
                                            />
                                            {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                                            <div className="grid grid-cols-6 gap-1 mt-2">
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Math.max(1, Number(currentSet.reps) - 5)})}
                                                    className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                                >
                                                    -5
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Math.max(1, Number(currentSet.reps) - 3)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -3
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Math.max(1, Number(currentSet.reps) - 1)})}
                                                    className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                                >
                                                    -1
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Number(currentSet.reps) + 1})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +1
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Number(currentSet.reps) + 3})}
                                                    className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                                >
                                                    +3
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setCurrentSet({...currentSet, reps: Number(currentSet.reps) + 5})}
                                                    className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                                >
                                                    +5
                                                </button>
                                            </div>
                                    </div>

                                    {/* RMÊõ¥Êñ∞Ë®òÈå≤ÔºàÂ∏∏Ë®≠Ôºâ */}
                                    <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            RMÊõ¥Êñ∞Ë®òÈå≤Ôºà‰ªªÊÑèÔºâ
                                            <button
                                                type="button"
                                                onClick={() => setWorkoutInfoModal({
                                                    show: true,
                                                    title: 'RMÊõ¥Êñ∞Ë®òÈå≤„Å®„ÅØÔºü',
                                                    content: `„Åì„ÅÆÁ®ÆÁõÆ„ÅßËá™Â∑±„Éô„Çπ„ÉàÔºàRM: Repetition MaximumÔºâ„ÇíÊõ¥Êñ∞„Åó„ÅüÂ†¥Âêà„Å´Ë®òÈå≤„Åó„Åæ„Åô„ÄÇ

„ÄêRM„Å®„ÅØ„Äë
‚Ä¢ 1RM: 1Âõû„Å†„ÅëÊåô„Åí„Çâ„Çå„ÇãÊúÄÂ§ßÈáçÈáè
‚Ä¢ 5RM: 5Âõû„Å†„ÅëÊåô„Åí„Çâ„Çå„ÇãÊúÄÂ§ßÈáçÈáè
‚Ä¢ 10RM: 10Âõû„Å†„ÅëÊåô„Åí„Çâ„Çå„ÇãÊúÄÂ§ßÈáçÈáè

„ÄêË®òÈå≤‰æã„Äë
‚Ä¢ „Éô„É≥„ÉÅ„Éó„É¨„Çπ 1reps √ó 100kg
‚Ä¢ „Çπ„ÇØ„ÉØ„ÉÉ„Éà 5reps √ó 120kg
‚Ä¢ „Éá„ÉÉ„Éâ„É™„Éï„Éà 3reps √ó 150kg

„ÄêÊ¥ªÁî®ÊñπÊ≥ï„Äë
Â±•Ê≠¥ÁîªÈù¢„ÅßRMÊõ¥Êñ∞„ÅÆË®òÈå≤„ÇíÁ¢∫Ë™ç„Åß„Åç„ÄÅÁ≠ãÂäõ„ÅÆÊàêÈï∑„ÇíÂèØË¶ñÂåñ„Åß„Åç„Åæ„Åô„ÄÇÁõÆÊ®ôÈÅîÊàê„ÅÆ„É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥Á∂≠ÊåÅ„Å´ÂΩπÁ´ã„Å°„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÂΩ¢Âºè„Äë
„ÄåÁ®ÆÁõÆÂêç ÂõûÊï∞reps √ó ÈáçÈáèkg„Äç„ÅÆÂΩ¢Âºè„ÅßÂÖ•Âäõ„Åô„Çã„Å®Ë¶ã„ÇÑ„Åô„Åè„Å™„Çä„Åæ„Åô„ÄÇ
‰æã: „Éô„É≥„ÉÅ„Éó„É¨„Çπ 1reps √ó 100kg`
                                                })}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="Info" size={14} />
                                            </button>
                                        </label>
                                        <input
                                            type="text"
                                            value={currentSet.rmUpdate || ''}
                                            onChange={(e) => setCurrentSet({...currentSet, rmUpdate: e.target.value})}
                                            placeholder="‰æã: „Éô„É≥„ÉÅ„Éó„É¨„Çπ 1reps √ó 100kg"
                                            className="w-full px-3 py-2 border rounded-lg"
                                        />
                                    </div>

                                    {/* Á∑èÊôÇÈñìÔºàÂ∏∏Ë®≠Ôºâ */}
                                    <div>
                                        <label className="block text-sm font-medium mb-1 flex items-center gap-2">
                                            Á∑èÊôÇÈñì (ÂàÜ)
                                            <button
                                                type="button"
                                                onClick={() => setWorkoutInfoModal({
                                                    show: true,
                                                    title: 'Á∑èÊôÇÈñì„Å®„ÅØÔºü',
                                                    content: `„Åì„ÅÆÁ®ÆÁõÆ„Å´Ë≤ª„ÇÑ„Åó„ÅüÁ∑èÊôÇÈñì„ÇíÂàÜÂçò‰Ωç„ÅßÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ„Ç¶„Ç©„Éº„É†„Ç¢„ÉÉ„Éó„Åã„Çâ„ÇØ„Éº„É´„ÉÄ„Ç¶„É≥„Åæ„Åß„ÅÆÂÖ®‰ΩìÊôÇÈñì„Åß„Åô„ÄÇ

„ÄêÂÖ•Âäõ„ÅÆÁõÆÂÆâ„Äë
‚Ä¢ Á≠ã„Éà„É¨: 5ÔΩû15ÂàÜ/Á®ÆÁõÆÔºà„Çª„ÉÉ„ÉàÈñì‰ºëÊÜ©Âê´„ÇÄÔºâ
‚Ä¢ ÊúâÈÖ∏Á¥†ÈÅãÂãï: ÂÆüÊñΩ„Åó„ÅüÊôÇÈñìÔºà‰æã: „É©„É≥„Éã„É≥„Ç∞30ÂàÜÔºâ
‚Ä¢ „Çπ„Éà„É¨„ÉÉ„ÉÅ: ÂÆüÊñΩ„Åó„ÅüÊôÇÈñì

„ÄêÊÑèÂõ≥„Äë
Á∑èÊôÇÈñì„ÅØ„ÄÅ„Çª„ÉÉ„ÉàÈñì„ÅÆ‰ºëÊÜ©ÊôÇÈñì„ÇÑÊ∫ñÂÇôÂãï‰Ωú„ÇÇÂê´„ÇÅ„ÅüÁ∑èÂêàÁöÑ„Å™ÈÅãÂãïÊôÇÈñì„ÇíÊääÊè°„Åô„Çã„Åü„ÇÅ„ÅÆÊåáÊ®ô„Åß„Åô„ÄÇÁâπ„Å´ÊúâÈÖ∏Á¥†ÈÅãÂãï„ÇÑÊåÅ‰πÖÁ≥ª„Éà„É¨„Éº„Éã„É≥„Ç∞„Åß„ÅØÈáçË¶Å„Å™ÂÖ•ÂäõÈ†ÖÁõÆ„Å®„Å™„Çä„Åæ„Åô„ÄÇ

„Äê„Ç™„Éó„Ç∑„Éß„É≥„Äë
„Åì„ÅÆÈ†ÖÁõÆ„ÅØ‰ªªÊÑèÂÖ•Âäõ„Åß„Åô„ÄÇÁ©∫Ê¨Ñ„ÅÆÂ†¥Âêà„ÅØ‰ªñ„ÅÆ„Éë„É©„É°„Éº„Çø„Åã„ÇâÊ∂àË≤ª„Ç´„É≠„É™„Éº„ÇíÁÆóÂá∫„Åó„Åæ„Åô„ÄÇ`
                                                })}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="Info" size={14} />
                                            </button>
                                        </label>
                                        <input
                                            type="number"
                                            value={currentSet.duration}
                                            onChange={(e) => setCurrentSet({...currentSet, duration: e.target.value === '' ? '' : Number(e.target.value)})}
                                            placeholder="„Åì„ÅÆÁ®ÆÁõÆ„Å´„Åã„Åã„Å£„ÅüÊôÇÈñì"
                                            className="w-full px-3 py-2 border rounded-lg"
                                        />
                                    </div>

                                    {/* „Çª„ÉÉ„ÉàËøΩÂä†„Éú„Çø„É≥ */}
                                    <div className="grid grid-cols-2 gap-2">
                                        <button
                                            onClick={() => {
                                                setSets([...sets, { ...currentSet, setType: 'warmup' }]);
                                            }}
                                            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 flex items-center justify-center gap-2"
                                        >
                                            <Icon name="Zap" size={20} />
                                            <span>„Ç¢„ÉÉ„Éó„Çª„ÉÉ„ÉàËøΩÂä†</span>
                                        </button>
                                        <button
                                            onClick={() => {
                                                setSets([...sets, { ...currentSet, setType: 'main' }]);
                                            }}
                                            className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 flex items-center justify-center gap-2"
                                        >
                                            <Icon name="Plus" size={20} />
                                            <span>„É°„Ç§„É≥„Çª„ÉÉ„ÉàËøΩÂä†</span>
                                        </button>
                                    </div>

                                    {sets.length > 0 && (
                                        <div className="bg-gray-50 p-3 rounded-lg">
                                            <p className="text-sm font-medium mb-2">„Çª„ÉÉ„Éà‰∏ÄË¶ß</p>
                                            {sets.map((set, index) => (
                                                <div key={index} className="border-b border-gray-200 py-2 text-sm last:border-0">
                                                    <div className="flex justify-between items-center mb-1">
                                                        <div className="flex items-center gap-2">
                                                            <span className="font-medium">Set {index + 1}</span>
                                                            {set.setType === 'warmup' ? (
                                                                <span className="px-2 py-0.5 bg-blue-100 text-blue-700 rounded text-xs font-medium">
                                                                    „Ç¢„ÉÉ„Éó
                                                                </span>
                                                            ) : (
                                                                <span className="px-2 py-0.5 bg-orange-100 text-orange-700 rounded text-xs font-medium">
                                                                    „É°„Ç§„É≥
                                                                </span>
                                                            )}
                                                        </div>
                                                        <button
                                                            onClick={() => setSets(sets.filter((_, i) => i !== index))}
                                                            className="text-red-500 hover:text-red-700 p-1"
                                                        >
                                                            <Icon name="Trash2" size={16} />
                                                        </button>
                                                    </div>
                                                    <div className="text-xs text-gray-600 space-y-0.5">
                                                        <div><span>ÈáçÈáè: {set.weight}kg</span></div>
                                                        <div><span>ÂõûÊï∞: {set.reps}Âõû</span></div>
                                                        <div><span>‰ΩìÁ©ç: {calculateSetVolume(set)} kg√óreps</span></div>
                                                    </div>
                                                </div>
                                            ))}
                                            <div className="border-t mt-2 pt-2 space-y-1">
                                                <div className="flex justify-between text-sm text-gray-600">
                                                    <span>Á∑è‰ΩìÁ©ç</span>
                                                    <span>{sets.reduce((sum, s) => sum + calculateSetVolume(s), 0)} kg√óreps</span>
                                                </div>
                                                <div className="flex justify-between font-bold">
                                                    <span>Êé®ÂÆö„Ç´„É≠„É™„Éº</span>
                                                    <span className="text-orange-600">
                                                        {Math.round(calculateExerciseCalories(sets))}kcal
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    )}
                                </div>

                                <button
                                    onClick={() => {
                                        if (sets.length === 0) return;
                                        // Ë´ñÊñá„ÅÆÂõûÂ∏∞Âºè„ÅßÁ®ÆÁõÆÂÖ®‰Ωì„ÅÆ„Ç´„É≠„É™„Éº„ÇíË®àÁÆó
                                        const totalCalories = calculateExerciseCalories(sets);
                                        const newExercise = {
                                            exercise: currentExercise,
                                            sets: sets,
                                            calories: Math.round(totalCalories)
                                        };
                                        setExercises([...exercises, newExercise]);
                                        setCurrentExercise(null);
                                        setSets([]);
                                    }}
                                    disabled={sets.length === 0}
                                    className="w-full bg-orange-600 text-white font-bold py-3 rounded-lg hover:bg-orange-700 transition disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    Á®ÆÁõÆ„ÇíËøΩÂä†
                                </button>
                            </div>
                        )}

                        {/* Ë®òÈå≤Ê∏à„ÅøÁ®ÆÁõÆ‰∏ÄË¶ß */}
                        {exercises.length > 0 && (
                            <div className="bg-white p-4 rounded-lg shadow">
                                <h4 className="font-bold mb-3">Ë®òÈå≤Ê∏à„ÅøÁ®ÆÁõÆ</h4>
                                {exercises.map((ex, index) => (
                                    <div key={index} className="border-b py-3 last:border-0">
                                        <div className="flex justify-between items-start mb-2">
                                            <div>
                                                <p className="font-medium">{ex.exercise.name}</p>
                                                <p className="text-xs text-gray-600">{ex.sets.length}„Çª„ÉÉ„Éà</p>
                                            </div>
                                            <div className="flex items-center gap-2">
                                                <span className="font-bold text-orange-600">{ex.calories}kcal</span>
                                                <button
                                                    onClick={() => setExercises(exercises.filter((_, i) => i !== index))}
                                                    className="text-red-500 hover:text-red-700"
                                                >
                                                    <Icon name="Trash2" size={18} />
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                                <div className="border-t pt-3 mt-3 flex justify-between font-bold text-lg">
                                    <span>ÂêàË®àÊ∂àË≤ª„Ç´„É≠„É™„Éº</span>
                                    <span className="text-orange-600">
                                        {exercises.reduce((sum, ex) => sum + ex.calories, 0)}kcal
                                    </span>
                                </div>
                            </div>
                        )}

                        <button
                            onClick={handleWorkoutSave}
                            disabled={exercises.length === 0}
                            className="w-full bg-orange-600 text-white font-bold py-4 rounded-lg hover:bg-orange-700 transition disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                        >
                            <Icon name="Check" size={24} />
                            <span>ÈÅãÂãï„Çí‰øùÂ≠ò</span>
                        </button>

                        {/* ÈÅãÂãïÂ±•Ê≠¥ÁîªÈù¢ */}
                        <div className="bg-gray-50 p-4 rounded-lg">
                            <h4 className="font-bold mb-3">‰ªäÊó•„ÅÆÈÅãÂãïË®òÈå≤</h4>
                            <div className="space-y-2">
                                {(dailyRecord.exercises || []).map((exercise, index) => (
                                    <div key={index} className="bg-white p-3 rounded-lg shadow-sm">
                                        <p className="font-medium">{exercise.name}</p>
                                        <p className="text-sm text-gray-600">
                                            {exercise.sets?.length || 0}„Çª„ÉÉ„Éà / {Math.round(exercise.calories || 0)}kcal
                                        </p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                );
            };

// ========== ÈÅãÂãïË®òÈå≤„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÁµÇ‰∫Ü ==========

            const renderFoodInput = () => {
                // ÊõñÊòßÊ§úÁ¥¢Áî®„ÅÆ„Éò„É´„Éë„ÉºÈñ¢Êï∞
                const fuzzyMatch = (text, query) => {
                    if (!query || query.trim() === '') return true;
                    // „Å≤„Çâ„Åå„Å™„ÄÅ„Ç´„Çø„Ç´„Éä„ÄÅÊº¢Â≠ó„ÅÆÊ≠£Ë¶èÂåñ
                    const normalize = (str) => {
                        return str
                            .toLowerCase()
                            .replace(/[ÔºàÔºâ\(\)]/g, '') // Êã¨Âºß„ÇíÂâäÈô§
                            .replace(/[\u3041-\u3096]/g, (m) => String.fromCharCode(m.charCodeAt(0) + 0x60)) // „Å≤„Çâ„Åå„Å™‚Üí„Ç´„Çø„Ç´„Éä
                            .replace(/\s+/g, ''); // Á©∫ÁôΩÂâäÈô§
                    };
                    const normalizedText = normalize(text);
                    const normalizedQuery = normalize(query);
                    return normalizedText.includes(normalizedQuery);
                };

                // Helper function to map foodDatabase format to tracking format
                const mapNutrients = (food) => {
                    const vitamins = {
                        A: food.vitaminA || 0,
                        D: food.vitaminD || 0,
                        E: food.vitaminE || 0,
                        K: food.vitaminK || 0,
                        B1: food.vitaminB1 || 0,
                        B2: food.vitaminB2 || 0,
                        B3: food.niacin || 0,
                        B5: food.pantothenicAcid || 0,
                        B6: food.vitaminB6 || 0,
                        B7: food.biotin || 0,
                        B9: food.folicAcid || 0,
                        B12: food.vitaminB12 || 0,
                        C: food.vitaminC || 0
                    };
                    const minerals = {
                        calcium: food.calcium || 0,
                        iron: food.iron || 0,
                        magnesium: food.magnesium || 0,
                        phosphorus: food.phosphorus || 0,
                        potassium: food.potassium || 0,
                        sodium: food.sodium || 0,
                        zinc: food.zinc || 0,
                        copper: food.copper || 0,
                        manganese: food.manganese || 0,
                        selenium: food.selenium || 0,
                        iodine: food.iodine || 0,
                        chromium: food.chromium || 0
                    };
                    return {
                        vitamins,
                        minerals,
                        caffeine: food.caffeine || 0,
                        catechin: food.catechin || 0,
                        tannin: food.tannin || 0,
                        polyphenol: food.polyphenol || 0,
                        chlorogenicAcid: food.chlorogenicAcid || 0,
                        creatine: food.creatine || 0,
                        lArginine: food.lArginine || 0,
                        lCarnitine: food.lCarnitine || 0,
                        EPA: food.EPA || 0,
                        DHA: food.DHA || 0,
                        coQ10: food.coQ10 || 0,
                        lutein: food.lutein || 0,
                        astaxanthin: food.astaxanthin || 0
                    };
                };

                const filteredFoods = {};
                Object.keys(foodDB).forEach(category => {
                    const items = Object.keys(foodDB[category]).filter(name =>
                        fuzzyMatch(name, searchTerm)
                    );
                    if (items.length > 0) {
                        filteredFoods[category] = items;
                    }
                });

                // „ÉÜ„É≥„Éó„É¨„Éº„Éà‰øùÂ≠ò
                const saveAsTemplate = async () => {
                    if (!templateName.trim() || addedItems.length === 0) {
                        alert('„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„ÄÅÈ£üÊùê„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                        return;
                    }
                    const template = {
                        id: Date.now(),
                        name: templateName,
                        items: addedItems
                    };
                    await DataService.saveMealTemplate(user.uid, template);
                    const templates = await DataService.getMealTemplates(user.uid);
                    setMealTemplates(templates);
                    alert('„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                    setTemplateName('');
                };

                const loadTemplate = (template) => {
                    // „Éá„Ç£„Éº„Éó„Ç≥„Éî„Éº„Åó„Å¶ÂèÇÁÖß„ÇíÂàá„ÇãÔºàË§áË£Ω‰∏çÂÖ∑Âêà„ÇíÈò≤Ê≠¢Ôºâ
                    const copiedItems = JSON.parse(JSON.stringify(template.items));
                    setAddedItems(copiedItems);
                    setMealName(template.name);
                };

                const deleteTemplate = async (templateId) => {
                    if (confirm('„Åì„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
                        await DataService.deleteMealTemplate(user.uid, templateId);
                        const templates = await DataService.getMealTemplates(user.uid);
                        setMealTemplates(templates);
                    }
                };

                return (
                    <div className="space-y-4">
                        {/* ‚ë†Ê§úÁ¥¢Ê¨Ñ */}
                        <div>
                            <label className="block text-sm font-medium mb-2">È£ü‰∫ãÂêç</label>
                            <input
                                type="text"
                                value={mealName}
                                onChange={(e) => setMealName(e.target.value)}
                                placeholder="ÊúùÈ£ü„ÄÅ1È£üÁõÆ„Å™„Å©..."
                                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                            />
                        </div>

                        <input
                            type="text"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            placeholder="È£üÊùê„ÇíÊ§úÁ¥¢..."
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                        />

                        {/* ‚ë°Êäò„Çä„Åü„Åü„Åø„Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ßÔºà„Çà„Åè‰Ωø„ÅÜÈ£üÊùêÂê´„ÇÄÔºâ */}
                        {!selectedItem ? (
                            <div className="space-y-3">
                                {/* „Çà„Åè‰Ωø„ÅÜÈ£üÊùêÔºà‰∫àÊ∏¨Ôºâ - 9Êó•‰ª•‰∏ä„ÅßÈñãÊîæ */}
                                {usageDays >= 9 && predictedData?.commonMeals && predictedData.commonMeals.length > 0 && !searchTerm && addedItems.length === 0 && (
                                    <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-3 rounded-lg border border-purple-200">
                                        <div className="flex items-center gap-2 mb-2">
                                            <Icon name="Sparkles" size={16} className="text-purple-600" />
                                            <p className="text-sm font-medium text-purple-800 flex items-center gap-2">
                                                „Çà„Åè‰Ωø„ÅÜÈ£üÊùê
                                            </p>
                                        </div>
                                        <div className="flex flex-wrap gap-2">
                                            {predictedData.commonMeals.map(foodName => {
                                                // „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâË©≤ÂΩìÈ£üÊùê„ÇíÊé¢„Åô
                                                let foundFood = null;
                                                let foundCategory = null;
                                                Object.keys(foodDB).forEach(cat => {
                                                    if (foodDB[cat][foodName]) {
                                                        foundFood = foodDB[cat][foodName];
                                                        foundCategory = cat;
                                                    }
                                                });

                                                if (!foundFood) return null;

                                                return (
                                                    <button
                                                        key={foodName}
                                                        onClick={() => {
                                                            const nutrients = mapNutrients(foundFood);
                                                            setSelectedItem({ name: foodName, ...foundFood, category: foundCategory, ...nutrients });
                                                        }}
                                                        className="px-3 py-1.5 bg-white border border-purple-300 rounded-full text-sm hover:bg-purple-100 transition"
                                                    >
                                                        {foodName}
                                                    </button>
                                                );
                                            })}
                                        </div>
                                    </div>
                                )}

                                <div className="space-y-2 max-h-96 overflow-y-auto">
                                    {Object.keys(filteredFoods).map(category => (
                                        <div key={category} className="border rounded-lg overflow-hidden">
                                            <button
                                                onClick={() => setExpandedCategories(prev => ({...prev, [category]: !prev[category]}))}
                                                className="w-full px-4 py-3 bg-gray-50 hover:bg-gray-100 flex justify-between items-center"
                                            >
                                                <span className="font-medium">{category}</span>
                                                <Icon name={expandedCategories[category] ? 'ChevronDown' : 'ChevronRight'} size={20} />
                                            </button>
                                            {expandedCategories[category] && (
                                                <div className="p-2 space-y-1">
                                                    {filteredFoods[category].map(foodName => {
                                                        const food = foodDB[category][foodName];
                                                        return (
                                                            <button
                                                                key={foodName}
                                                                onClick={() => {
                                                                    const nutrients = mapNutrients(food);
                                                                    setSelectedItem({ name: foodName, ...food, category, ...nutrients });
                                                                }}
                                                                className="w-full text-left px-3 py-2 hover:bg-indigo-50 rounded-lg transition"
                                                            >
                                                                <div className="flex justify-between">
                                                                    <span>{foodName}</span>
                                                                    <span className="text-sm text-gray-500">{food.calories}kcal/100g</span>
                                                                </div>
                                                            </button>
                                                        );
                                                    })}
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        ) : (
                            <div className="space-y-4">
                                <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                                    <div className="flex justify-between items-start mb-2">
                                        <div>
                                            <h4 className="font-bold text-lg">{selectedItem.name}</h4>
                                            <p className="text-sm text-gray-600">{selectedItem.category}</p>
                                        </div>
                                        <button
                                            onClick={() => setSelectedItem(null)}
                                            className="text-gray-500 hover:text-gray-700"
                                        >
                                            <Icon name="X" size={20} />
                                        </button>
                                    </div>
                                    <div className="grid grid-cols-4 gap-2 mt-3 text-sm">
                                        <div>
                                            <p className="text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold">{selectedItem.calories}kcal</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">P</p>
                                            <p className="font-bold">{selectedItem.protein}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">F</p>
                                            <p className="font-bold">{selectedItem.fat}g</p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">C</p>
                                            <p className="font-bold">{selectedItem.carbs}g</p>
                                        </div>
                                    </div>
                                    <p className="text-xs text-gray-500 mt-2">‚Äª100g„ÅÇ„Åü„Çä</p>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                        Èáè (g)
                                        <button
                                            type="button"
                                            onClick={() => setWorkoutInfoModal({
                                                show: true,
                                                title: 'È£ü‰∫ãÂÖ•Âäõ„ÅÆ‰Ωø„ÅÑÊñπ',
                                                content: `È£üÊùê„ÅÆÈáè„Çí„Ç∞„É©„É†Âçò‰Ωç„ÅßÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ

„ÄêÂÖ•ÂäõÊñπÊ≥ï„Äë
1. „Çπ„É©„Ç§„ÉÄ„Éº„Çí„Éâ„É©„ÉÉ„Ç∞„Åó„Å¶Â§ß„Åæ„Åã„Å™Èáè„ÇíË®≠ÂÆö
2. ÁõÆÁõõ„ÇäÊï∞ÂÄ§Ôºà100g„ÄÅ200g„Å™„Å©Ôºâ„Çí„Çø„ÉÉ„Éó„ÅßÂç≥Â∫ß„Å´Ë®≠ÂÆö
3. ÂÖ•ÂäõÊ¨Ñ„Å´Áõ¥Êé•Êï∞ÂÄ§„ÇíÂÖ•Âäõ
4. Â¢óÊ∏õ„Éú„Çø„É≥Ôºà-100ÔΩû+100Ôºâ„ÅßÂæÆË™øÊï¥

„ÄêÂÖ•Âäõ„ÅÆ„Ç≥„ÉÑ„Äë
‚Ä¢ „Çà„ÅèÈ£ü„Åπ„ÇãÈáè„ÇíË¶ö„Åà„Å¶„Åä„Åè„Å®‰æøÂà©„Åß„Åô
‚Ä¢ ‰æã: „ÅîÈ£ØËå∂Á¢ó1ÊùØ ‚âí 150g
‚Ä¢ ‰æã: È∂è„ÇÄ„Å≠ËÇâÔºàÊâã„ÅÆ„Å≤„ÇâÂ§ßÔºâ‚âí 100g
‚Ä¢ ‰æã: Âçµ1ÂÄã ‚âí 50g

„ÄêPFCËá™ÂãïË®àÁÆó„Äë
ÂÖ•Âäõ„Åó„ÅüÈáè„Å´Âøú„Åò„Å¶„ÄÅ„Åü„Çì„Å±„ÅèË≥™ÔºàPÔºâ„ÉªËÑÇË≥™ÔºàFÔºâ„ÉªÁÇ≠Ê∞¥ÂåñÁâ©ÔºàCÔºâ„ÅåËá™ÂãïË®àÁÆó„Åï„Çå„ÄÅ1Êó•„ÅÆÁõÆÊ®ô„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ`
                                            })}
                                            className="text-indigo-600 hover:text-indigo-800"
                                        >
                                            <Icon name="Info" size={14} />
                                        </button>
                                    </label>

                                    {/* „Çπ„É©„Ç§„ÉÄ„Éº */}
                                    <div className="mb-3">
                                        <input
                                            type="range"
                                            min="0"
                                            max="500"
                                            step="5"
                                            value={amount}
                                            onChange={(e) => setAmount(e.target.value)}
                                            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600"
                                            style={{
                                                background: `linear-gradient(to right, #4f46e5 0%, #4f46e5 ${(amount/500)*100}%, #e5e7eb ${(amount/500)*100}%, #e5e7eb 100%)`
                                            }}
                                        />
                                        <div className="flex justify-between text-xs text-gray-500 mt-1">
                                            <span onClick={() => setAmount(0)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">0g</span>
                                            <span onClick={() => setAmount(100)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">100g</span>
                                            <span onClick={() => setAmount(200)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">200g</span>
                                            <span onClick={() => setAmount(300)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">300g</span>
                                            <span onClick={() => setAmount(400)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">400g</span>
                                            <span onClick={() => setAmount(500)} className="cursor-pointer hover:text-indigo-600 hover:font-bold transition">500g</span>
                                        </div>
                                    </div>

                                    <input
                                        type="number"
                                        value={amount}
                                        onChange={(e) => setAmount(e.target.value)}
                                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none"
                                    />
                                    {/* Â¢óÊ∏õ„Éú„Çø„É≥ */}
                                    <div className="grid grid-cols-6 gap-1 mt-2">
                                        <button
                                            onClick={() => setAmount(Math.max(0, Number(amount) - 100))}
                                            className="py-1.5 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200 font-medium"
                                        >
                                            -100
                                        </button>
                                        <button
                                            onClick={() => setAmount(Math.max(0, Number(amount) - 50))}
                                            className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                        >
                                            -50
                                        </button>
                                        <button
                                            onClick={() => setAmount(Math.max(0, Number(amount) - 10))}
                                            className="py-1.5 bg-red-50 text-red-600 rounded text-xs hover:bg-red-100 font-medium"
                                        >
                                            -10
                                        </button>
                                        <button
                                            onClick={() => setAmount(Number(amount) + 10)}
                                            className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                        >
                                            +10
                                        </button>
                                        <button
                                            onClick={() => setAmount(Number(amount) + 50)}
                                            className="py-1.5 bg-green-50 text-green-600 rounded text-xs hover:bg-green-100 font-medium"
                                        >
                                            +50
                                        </button>
                                        <button
                                            onClick={() => setAmount(Number(amount) + 100)}
                                            className="py-1.5 bg-green-100 text-green-600 rounded text-xs hover:bg-green-200 font-medium"
                                        >
                                            +100
                                        </button>
                                    </div>
                                </div>

                                <div className="bg-gray-50 p-4 rounded-lg">
                                    <p className="text-sm font-medium mb-2">ÊëÇÂèñÈáè</p>
                                    <div className="grid grid-cols-4 gap-2">
                                        <div>
                                            <p className="text-xs text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold text-indigo-600">
                                                {Math.round(selectedItem.calories * (Number(amount) / 100))}kcal
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">P</p>
                                            <p className="font-bold">{(selectedItem.protein * (Number(amount) / 100)).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">F</p>
                                            <p className="font-bold">{(selectedItem.fat * (Number(amount) / 100)).toFixed(1)}g</p>
                                        </div>
                                        <div>
                                            <p className="text-xs text-gray-600">C</p>
                                            <p className="font-bold">{(selectedItem.carbs * (Number(amount) / 100)).toFixed(1)}g</p>
                                        </div>
                                    </div>
                                </div>

                                <div className="flex gap-2">
                                    <button
                                        onClick={() => {
                                            const numAmount = Number(amount);
                                            const ratio = numAmount / 100;

                                            // Calculate vitamins and minerals based on amount
                                            const vitamins = {};
                                            const minerals = {};

                                            if (selectedItem.vitamins) {
                                                Object.keys(selectedItem.vitamins).forEach(key => {
                                                    vitamins[key] = selectedItem.vitamins[key] * ratio;
                                                });
                                            }

                                            if (selectedItem.minerals) {
                                                Object.keys(selectedItem.minerals).forEach(key => {
                                                    minerals[key] = selectedItem.minerals[key] * ratio;
                                                });
                                            }

                                            // „Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥†„ÇíË®àÁÆó
                                            const otherNutrients = {};
                                            const otherNutrientKeys = ['caffeine', 'catechin', 'tannin', 'polyphenol', 'chlorogenicAcid',
                                                                        'creatine', 'lArginine', 'lCarnitine', 'EPA', 'DHA', 'coQ10',
                                                                        'lutein', 'astaxanthin'];
                                            otherNutrientKeys.forEach(key => {
                                                if (selectedItem[key]) {
                                                    otherNutrients[key] = selectedItem[key] * ratio;
                                                }
                                            });

                                            // Add to the list of items
                                            const newItem = {
                                                name: selectedItem.name,
                                                amount: numAmount,
                                                protein: selectedItem.protein * ratio,
                                                fat: selectedItem.fat * ratio,
                                                carbs: selectedItem.carbs * ratio,
                                                calories: selectedItem.calories * ratio,
                                                vitamins: vitamins,
                                                minerals: minerals,
                                                otherNutrients: otherNutrients
                                            };
                                            setAddedItems([...addedItems, newItem]);
                                            setSelectedItem(null);
                                            setAmount('100');
                                        }}
                                        className="flex-1 bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition"
                                    >
                                        ËøΩÂä†
                                    </button>
                                    <button
                                        onClick={() => setSelectedItem(null)}
                                        className="px-4 bg-gray-200 text-gray-700 font-bold py-3 rounded-lg hover:bg-gray-300 transition"
                                    >
                                        „Ç≠„É£„É≥„Çª„É´
                                    </button>
                                </div>
                            </div>
                        )}

                        {/* ‚ë¢ËøΩÂä†Ê∏à„Åø„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß */}
                        {addedItems.length > 0 && (
                            <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
                                <div className="flex justify-between items-center mb-3">
                                    <p className="text-sm font-medium text-indigo-900">ËøΩÂä†Ê∏à„Åø ({addedItems.length}ÂìÅÁõÆ)</p>
                                </div>
                                <div className="space-y-2 max-h-40 overflow-y-auto">
                                    {addedItems.map((item, index) => (
                                        <div key={index} className="bg-white p-2 rounded-lg flex justify-between items-center">
                                            <div className="flex-1">
                                                <p className="text-sm font-medium">{item.name}</p>
                                                <p className="text-xs text-gray-600">{item.amount}g - {Math.round(item.calories)}kcal</p>
                                            </div>
                                            <button
                                                onClick={() => setAddedItems(addedItems.filter((_, i) => i !== index))}
                                                className="text-red-500 hover:text-red-700 ml-2"
                                            >
                                                <Icon name="Trash2" size={16} />
                                            </button>
                                        </div>
                                    ))}
                                </div>
                                <div className="mt-3 pt-3 border-t border-indigo-200">
                                    <div className="grid grid-cols-4 gap-2 text-xs">
                                        <div>
                                            <p className="text-gray-600">„Ç´„É≠„É™„Éº</p>
                                            <p className="font-bold text-indigo-600">
                                                {Math.round(addedItems.reduce((sum, item) => sum + item.calories, 0))}kcal
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">P</p>
                                            <p className="font-bold">
                                                {addedItems.reduce((sum, item) => sum + item.protein, 0).toFixed(1)}g
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">F</p>
                                            <p className="font-bold">
                                                {addedItems.reduce((sum, item) => sum + item.fat, 0).toFixed(1)}g
                                            </p>
                                        </div>
                                        <div>
                                            <p className="text-gray-600">C</p>
                                            <p className="font-bold">
                                                {addedItems.reduce((sum, item) => sum + item.carbs, 0).toFixed(1)}g
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* ‚ë£„ÉÜ„É≥„Éó„É¨„Éº„ÉàÔºà‰∏ÄË¶ß+Êñ∞Ë¶è‰øùÂ≠òÔºâ - 12Êó•‰ª•‰∏ä„ÅßÈñãÊîæ */}
                        {unlockedFeatures.includes(FEATURES.TRAINING_TEMPLATE.id) && !selectedItem && (
                            <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-lg">
                                <button
                                    onClick={() => setShowTemplates(!showTemplates)}
                                    className="w-full flex items-center justify-between mb-3"
                                >
                                    <span className="font-medium text-yellow-800 flex items-center gap-2">
                                        <Icon name="BookTemplate" size={16} />
                                        „ÉÜ„É≥„Éó„É¨„Éº„Éà
                                    </span>
                                    <Icon name={showTemplates ? "ChevronUp" : "ChevronDown"} size={16} />
                                </button>

                                {showTemplates && (
                                    <div className="space-y-3">
                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß */}
                                        {mealTemplates.length > 0 && (
                                            <div className="space-y-2">
                                                {mealTemplates.map(template => (
                                                    <div key={template.id} className="flex items-center gap-2 bg-white p-2 rounded border">
                                                        <button
                                                            onClick={() => loadTemplate(template)}
                                                            className="flex-1 text-left text-sm hover:text-indigo-600"
                                                        >
                                                            <p className="font-medium">{template.name}</p>
                                                            <p className="text-xs text-gray-500">{template.items.length}ÂìÅÁõÆ</p>
                                                        </button>
                                                        <button
                                                            onClick={() => deleteTemplate(template.id)}
                                                            className="p-1 text-red-500 hover:text-red-700"
                                                        >
                                                            <Icon name="Trash2" size={16} />
                                                        </button>
                                                    </div>
                                                ))}
                                            </div>
                                        )}

                                        {/* „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊñ∞Ë¶è‰øùÂ≠ò */}
                                        {addedItems.length > 0 && (
                                            <div className="pt-3 border-t border-yellow-300">
                                                <p className="text-xs text-yellow-800 mb-2">Êñ∞„Åó„ÅÑ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å®„Åó„Å¶‰øùÂ≠ò</p>
                                                <div className="flex gap-2">
                                                    <input
                                                        type="text"
                                                        value={templateName}
                                                        onChange={(e) => setTemplateName(e.target.value)}
                                                        placeholder="„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêçÔºà‰æã: ÊúùÈ£ü„Éë„Çø„Éº„É≥1Ôºâ"
                                                        className="flex-1 px-3 py-2 text-sm border border-yellow-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:outline-none"
                                                    />
                                                    <button
                                                        onClick={saveAsTemplate}
                                                        className="px-3 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition text-sm font-medium"
                                                    >
                                                        ‰øùÂ≠ò
                                                    </button>
                                                </div>
                                            </div>
                                        )}

                                        {mealTemplates.length === 0 && addedItems.length === 0 && (
                                            <p className="text-sm text-gray-600">‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                                        )}
                                    </div>
                                )}
                            </div>
                        )}

                        {/* ‚ë§Ë®òÈå≤„Éú„Çø„É≥ */}
                        {addedItems.length > 0 && !selectedItem && (
                            <button
                                onClick={async () => {
                                    const totalCalories = addedItems.reduce((sum, item) => sum + item.calories, 0);
                                    const newMeal = {
                                        id: Date.now(),
                                        time: new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' }),
                                        name: mealName || 'È£ü‰∫ã',
                                        calories: Math.round(totalCalories),
                                        items: addedItems.map(item => ({
                                            name: item.name,
                                            amount: `${item.amount}g`,
                                            protein: item.protein,
                                            fat: item.fat,
                                            carbs: item.carbs,
                                            vitamins: item.vitamins,
                                            minerals: item.minerals
                                        }))
                                    };

                                    onAdd(newMeal);
                                }}
                                className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-bold py-4 rounded-lg hover:from-indigo-700 hover:to-purple-700 transition shadow-lg"
                            >
                                Ë®òÈå≤„Åô„Çã ({addedItems.length}ÂìÅÁõÆ)
                            </button>
                        )}
                    </div>
                );
            };

            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
                    <div className="bg-white rounded-2xl w-full max-w-md max-h-[80vh] overflow-hidden slide-up flex flex-col">
                        <div className="bg-white border-b p-4 flex justify-between items-center flex-shrink-0">
                            <h3 className="text-lg font-bold">
                                {type === 'meal' && 'È£ü‰∫ã„ÇíË®òÈå≤'}
                                {type === 'workout' && '„Éà„É¨„Éº„Éã„É≥„Ç∞„ÇíË®òÈå≤'}
                                {type === 'supplement' && '„Çµ„Éó„É™„É°„É≥„Éà„ÇíË®òÈå≤'}
                                {type === 'condition' && '„Ç≥„É≥„Éá„Ç£„Ç∑„Éß„É≥„ÇíË®òÈå≤'}
                            </h3>
                            <button onClick={() => {
                                // È£ü‰∫ãË®òÈå≤‰∏≠„Å´È£üÊùê„ÇíÈÅ∏Êäû„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åæ„ÅöÊ§úÁ¥¢„É™„Çπ„Éà„Å´Êàª„Çã
                                if (type === 'meal' && selectedItem) {
                                    setSelectedItem(null);
                                }
                                // „Éà„É¨„Éº„Éã„É≥„Ç∞Ë®òÈå≤‰∏≠„Å´Á®ÆÁõÆ„ÇíÈÅ∏Êäû„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åæ„ÅöÊ§úÁ¥¢„É™„Çπ„Éà„Å´Êàª„Çã
                                else if (type === 'workout' && currentExercise) {
                                    setCurrentExercise(null);
                                }
                                // „Åù„Çå‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÅØ„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
                                else {
                                    onClose();
                                }
                            }} className="p-2 hover:bg-gray-100 rounded-full">
                                <Icon name="X" size={20} />
                            </button>
                        </div>
                        <div className="p-6 overflow-y-auto flex-1">
                            {type === 'meal' && renderFoodInput()}
                            {type === 'workout' && renderWorkoutInput()}
                            {type === 'supplement' && renderSupplementInput()}
                            {type === 'condition' && renderConditionInput()}
                        </div>
                    </div>
                </div>
            );
        };
