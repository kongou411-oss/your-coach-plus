// ===== Dashboard Component =====
const DashboardView = ({ dailyRecord, targetPFC, unlockedFeatures, onDeleteItem, profile, setInfoModal, yesterdayRecord, setDailyRecord, user, currentDate, onDateChange }) => {
    // ‰∫àÊ∏¨ÂÖ•Âäõ„ÇíÂÆüË°å„Åô„ÇãÈñ¢Êï∞
    const loadPredictedData = () => {
        if (!yesterdayRecord) {
            alert('ÂâçÊó•„ÅÆË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            return;
        }
        // ÂâçÊó•„ÅÆË®òÈå≤„ÇíË§áË£ΩÔºàID„Å®ÊôÇÂàª„ÅØÊñ∞„Åó„ÅèÁîüÊàêÔºâ
        const copiedRecord = {
            meals: [
                ...(dailyRecord.meals?.filter(m => !m.isPredicted) || []),
                ...(yesterdayRecord.meals?.map(meal => ({
                    ...meal,
                    id: Date.now() + Math.random(),
                    isPredicted: true // ‰∫àÊ∏¨„Éá„Éº„Çø„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ§∫„Åô„Éï„É©„Ç∞
                })) || [])
            ],
            workouts: [
                ...(dailyRecord.workouts?.filter(w => !w.isPredicted) || []),
                ...(yesterdayRecord.workouts?.map(workout => ({
                    ...workout,
                    id: Date.now() + Math.random(),
                    isPredicted: true
                })) || [])
            ],
            supplements: [
                ...(dailyRecord.supplements?.filter(s => !s.isPredicted) || []),
                ...(yesterdayRecord.supplements?.map(supp => ({
                    ...supp,
                    id: Date.now() + Math.random(),
                    isPredicted: true
                })) || [])
            ],
            conditions: dailyRecord.conditions
        };
        setDailyRecord(copiedRecord);
    };

    // ‰∫àÊ∏¨„Éá„Éº„Çø„ÅÆËá™ÂãïÂ±ïÈñã„ÅØhandleDateChange„ÅßË°å„ÅÜ„Åü„ÇÅ„ÄÅ„Åì„ÅÆuseEffect„ÅØÂâäÈô§
    // useEffect(() => {
    //     if (yesterdayRecord) {
    //         // ÂΩìÊó•„ÅÆË®òÈå≤„Åå„Åæ„Å†Á©∫„ÅÆÂ†¥Âêà„ÅÆ„Åø„ÄÅÂâçÊó•„Éá„Éº„Çø„ÇíÂ±ïÈñã
    //         const isEmpty = !dailyRecord.meals?.length && !dailyRecord.workouts?.length && !dailyRecord.supplements?.length;
    //         if (isEmpty) {
    //             loadPredictedData();
    //         }
    //     }
    // }, [yesterdayRecord, dailyRecord]);
    // ÁèæÂú®„ÅÆÊëÇÂèñÈáèË®àÁÆó
    const currentIntake = {
        calories: 0,
        protein: 0,
        fat: 0,
        carbs: 0,
        vitamins: {
            A: 0, D: 0, E: 0, K: 0, B1: 0, B2: 0, B3: 0, B5: 0, B6: 0, B7: 0, B9: 0, B12: 0, C: 0
        },
        minerals: {
            calcium: 0, iron: 0, magnesium: 0, phosphorus: 0, potassium: 0, sodium: 0, zinc: 0, copper: 0, manganese: 0, selenium: 0, iodine: 0, chromium: 0
        }
    };

    // „Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥†„ÇíÂàùÊúüÂåñ
    currentIntake.otherNutrients = {};

    dailyRecord.meals?.forEach(meal => {
        currentIntake.calories += meal.calories || 0;
        meal.items?.forEach(item => {
            currentIntake.protein += item.protein || 0;
            currentIntake.fat += item.fat || 0;
            currentIntake.carbs += item.carbs || 0;

            // „Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´
            if (item.vitamins) {
                Object.keys(item.vitamins).forEach(v => {
                    currentIntake.vitamins[v] = (currentIntake.vitamins[v] || 0) + (item.vitamins[v] || 0);
                });
            }
            if (item.minerals) {
                Object.keys(item.minerals).forEach(m => {
                    currentIntake.minerals[m] = (currentIntake.minerals[m] || 0) + (item.minerals[m] || 0);
                });
            }
            if (item.otherNutrients) {
                Object.keys(item.otherNutrients).forEach(o => {
                    currentIntake.otherNutrients[o] = (currentIntake.otherNutrients[o] || 0) + (item.otherNutrients[o] || 0);
                });
            }
        });
    });

    // „Çµ„Éó„É™„É°„É≥„Éà„ÇÇÊëÇÂèñÈáè„Å´Âä†ÁÆó
    dailyRecord.supplements?.forEach(supp => {
        supp.items?.forEach(item => {
            currentIntake.calories += item.calories || 0;
            currentIntake.protein += item.protein || 0;
            currentIntake.fat += item.fat || 0;
            currentIntake.carbs += item.carbs || 0;

            if (item.vitamins) {
                Object.keys(item.vitamins).forEach(v => {
                    currentIntake.vitamins[v] = (currentIntake.vitamins[v] || 0) + (item.vitamins[v] || 0);
                });
            }
            if (item.minerals) {
                Object.keys(item.minerals).forEach(m => {
                    currentIntake.minerals[m] = (currentIntake.minerals[m] || 0) + (item.minerals[m] || 0);
                });
            }
            if (item.otherNutrients) {
                Object.keys(item.otherNutrients).forEach(o => {
                    currentIntake.otherNutrients[o] = (currentIntake.otherNutrients[o] || 0) + (item.otherNutrients[o] || 0);
                });
            }
        });
    });

    // ÈÅîÊàêÁéá„ÅÆË®àÁÆó
    const caloriesPercent = (currentIntake.calories / targetPFC.calories) * 100;
    const proteinPercent = (currentIntake.protein / targetPFC.protein) * 100;
    const fatPercent = (currentIntake.fat / targetPFC.fat) * 100;
    const carbsPercent = (currentIntake.carbs / targetPFC.carbs) * 100;

    // ‰ªäÊó•„Åã„Å©„ÅÜ„Åã„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºà„Çø„Ç§„Éà„É´Ë°®Á§∫Áî®Ôºâ
    const isToday = () => {
        const today = new Date();
        const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
        return currentDate === todayStr;
    };

    return (
        <div className="space-y-4">
            {/* PFC„Çµ„Éû„É™„Éº */}
            <div className="bg-white rounded-xl shadow-sm p-6 slide-up">
                <div className="flex items-center gap-2 mb-4">
                    <h3 className="text-lg font-bold">„Éá„Ç§„É™„ÉºË®òÈå≤</h3>
                    <button
                        onClick={() => setInfoModal({
                            show: true,
                            title: 'üìä Ê†ÑÈ§ä„ÅÆÂü∫Êú¨ÂéüÂâá',
                            content: `Á≠ãËÇâ„Çí‰Ωú„Çã„ÅÆ„ÇÇË∫´‰Ωì„ÇíÂ§â„Åà„Çã„ÅÆ„ÇÇ„Åô„Åπ„Å¶‰∏âÂ§ßÊ†ÑÈ§äÁ¥†„ÇíÂü∫„Å´„Åó„ÅüÈ£ü‰∫ã„ÄÇ

„Çø„É≥„Éë„ÇØË≥™„ÅØÁ≠ãËÇâ„ÉªÈ´™„ÉªÁöÆËÜö„ÅÆÁ¥†Êùê(4kcal/g)
ËÑÇË≥™„ÅØÈñ¢ÁØÄ‰øùË≠∑„Éª„Éõ„É´„É¢„É≥ÂàÜÊ≥å(9kcal/g)
ÁÇ≠Ê∞¥ÂåñÁâ©„ÅØÁ≠ãËÇâ„ÇÑËÑ≥„ÅÆ„Ç¨„ÇΩ„É™„É≥(4kcal/g)

„ÄêÈáçË¶ÅÂéüÂâá„Äë
Â¢óÈáè = „Ç™„Éº„Éê„Éº„Ç´„É≠„É™„Éº
Ê∏õÈáè = „Ç¢„É≥„ÉÄ„Éº„Ç´„É≠„É™„Éº

365Êó•Á∂ôÁ∂ö„Åó„Å¶ËâØ„ÅÑË∫´‰Ωì„Çí„Ç≠„Éº„Éó„Åô„Çã„ÄÇ

„ÄêÈ£ü‰∫ãË™øÊï¥„ÅÆÂü∫Êú¨„Äë
‚Ä¢ „Çø„É≥„Éë„ÇØË≥™„ÇíÂ¢ó„ÇÑ„Åô
‚Ä¢ ËÑÇË≥™„ÇíÂøÖË¶ÅÊúÄÂ∞èÈôê„Å´Êäë„Åà„Çã
‚Ä¢ ÁÇ≠Ê∞¥ÂåñÁâ©„ÅÆË≥™„Å®Èáè„ÇíÊé¢„Çã

Ë®≠ÂÆöÊúüÈñì: 1-12ÈÄ±Èñì
Á≠ãËÇâ„ÅÆÊñ∞Èô≥‰ª£Ë¨ùÂë®Êúü: 50Êó•`
                        })}
                        className="text-indigo-600 hover:text-indigo-800"
                    >
                        <Icon name="Info" size={18} />
                    </button>
                </div>
                <div className="space-y-4">
                    <div>
                        <div className="flex justify-between items-center mb-2">
                            <span className="font-medium">ÊëÇÂèñ„Ç´„É≠„É™„Éº</span>
                            <div className="text-sm text-right">
                                <div className="font-bold" style={{ color: '#8BA3C7' }}>
                                    {Math.round(currentIntake.calories)} / {targetPFC.calories} kcal
                                </div>
                            </div>
                        </div>
                        <div className="h-3 bg-gray-200 rounded-full overflow-hidden">
                            <div
                                className="h-full transition-all duration-500"
                                style={{
                                    width: `${Math.min(caloriesPercent, 100)}%`,
                                    backgroundColor: '#8BA3C7'
                                }}
                            ></div>
                        </div>
                    </div>
                    <div>
                        <div className="flex justify-between mb-2">
                            <span className="font-medium">„Çø„É≥„Éë„ÇØË≥™ (P)</span>
                            <span className="text-sm font-bold" style={{ color: '#EF4444' }}>
                                {currentIntake.protein.toFixed(1)} / {targetPFC.protein} g
                            </span>
                        </div>
                        <div className="h-3 bg-gray-200 rounded-full overflow-hidden">
                            <div
                                className="h-full transition-all duration-500"
                                style={{
                                    width: `${Math.min(proteinPercent, 100)}%`,
                                    backgroundColor: '#EF4444'
                                }}
                            ></div>
                        </div>
                    </div>
                    <div>
                        <div className="flex justify-between mb-2">
                            <span className="font-medium">ËÑÇË≥™ (F)</span>
                            <span className="text-sm font-bold" style={{ color: '#F59E0B' }}>
                                {currentIntake.fat.toFixed(1)} / {targetPFC.fat} g
                            </span>
                        </div>
                        <div className="h-3 bg-gray-200 rounded-full overflow-hidden">
                            <div
                                className="h-full transition-all duration-500"
                                style={{
                                    width: `${Math.min(fatPercent, 100)}%`,
                                    backgroundColor: '#F59E0B'
                                }}
                            ></div>
                        </div>
                    </div>
                    <div>
                        <div className="flex justify-between mb-2">
                            <span className="font-medium">ÁÇ≠Ê∞¥ÂåñÁâ© (C)</span>
                            <span className="text-sm font-bold" style={{ color: '#10B981' }}>
                                {currentIntake.carbs.toFixed(1)} / {targetPFC.carbs} g
                            </span>
                        </div>
                        <div className="h-3 bg-gray-200 rounded-full overflow-hidden">
                            <div
                                className="h-full transition-all duration-500"
                                style={{
                                    width: `${Math.min(carbsPercent, 100)}%`,
                                    backgroundColor: '#10B981'
                                }}
                            ></div>
                        </div>
                    </div>
                </div>

                {/* „Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´Ë©≥Á¥∞ÔºàÂÆàÁ†¥Èõ¢„Ç∑„Çπ„ÉÜ„É†„Å´Áµ±Âêà - 18Êó•‰ª•‰∏ä„ÅßÈñãÊîæÔºâ */}
                {unlockedFeatures.includes(FEATURES.MICRONUTRIENTS.id) && (
                    <details className="mt-4">
                        <summary className="cursor-pointer text-sm font-medium text-indigo-600 hover:text-indigo-700 flex items-center gap-2">
                            <Icon name="ChevronDown" size={16} />
                            „Éì„Çø„Éü„É≥„Éª„Éü„Éç„É©„É´+
                        </summary>
                        <div className="mt-4 space-y-4">
                        {/* „Éì„Çø„Éü„É≥ */}
                        <div>
                            <h4 className="text-sm font-bold mb-3 flex items-center gap-2">
                                <Icon name="Droplets" size={16} className="text-orange-500" />
                                „Éì„Çø„Éü„É≥
                            </h4>
                            <div className="grid grid-cols-2 gap-3">
                                {(() => {
                                    // ÂÆåÂÖ®ÂÄãÂà•ÂåñÂü∫Ê∫ñÂÄ§„ÇíÂèñÂæó
                                    const targets = LBMUtils.calculatePersonalizedMicronutrients(profile || {});
                                    const vitaminUnits = {
                                        A: 'Œºg', D: 'Œºg', E: 'mg', K: 'Œºg',
                                        B1: 'mg', B2: 'mg', B3: 'mg', B5: 'mg',
                                        B6: 'mg', B7: 'Œºg', B9: 'Œºg', B12: 'Œºg', C: 'mg'
                                    };
                                    return Object.entries(targets.vitamins).map(([key, target]) => {
                                        const current = currentIntake.vitamins[key] || 0;
                                        const percent = (current / target) * 100;
                                    return (
                                        <div key={key} className="bg-gray-50 p-2 rounded">
                                            <div className="flex justify-between text-xs mb-1">
                                                <span className="font-medium">„Éì„Çø„Éü„É≥{key}</span>
                                                <span className="text-gray-600">
                                                    {current.toFixed(1)} / {target}{vitaminUnits[key]}
                                                </span>
                                            </div>
                                            <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                                                <div
                                                    className="h-full bg-gradient-to-r from-orange-400 to-red-500 transition-all"
                                                    style={{ width: `${Math.min(percent, 100)}%` }}
                                                />
                                            </div>
                                        </div>
                                    );
                                })})()}
                            </div>
                        </div>

                        {/* „Éü„Éç„É©„É´ */}
                        <div>
                            <h4 className="text-sm font-bold mb-3 flex items-center gap-2">
                                <Icon name="Gem" size={16} className="text-purple-500" />
                                „Éü„Éç„É©„É´
                            </h4>
                            <div className="grid grid-cols-2 gap-3">
                                {(() => {
                                    // ÂÆåÂÖ®ÂÄãÂà•ÂåñÂü∫Ê∫ñÂÄ§„ÇíÂèñÂæó
                                    const targets = LBMUtils.calculatePersonalizedMicronutrients(profile || {});
                                    const mineralNames = {
                                        calcium: '„Ç´„É´„Ç∑„Ç¶„É†', iron: 'ÈâÑ', magnesium: '„Éû„Ç∞„Éç„Ç∑„Ç¶„É†',
                                        phosphorus: '„É™„É≥', potassium: '„Ç´„É™„Ç¶„É†', sodium: '„Éä„Éà„É™„Ç¶„É†',
                                        zinc: '‰∫úÈâõ', copper: 'ÈäÖ', manganese: '„Éû„É≥„Ç¨„É≥',
                                        selenium: '„Çª„É¨„É≥', iodine: '„É®„Ç¶Á¥†', chromium: '„ÇØ„É≠„É†'
                                    };
                                    const mineralUnits = {
                                        calcium: 'mg', iron: 'mg', magnesium: 'mg',
                                        phosphorus: 'mg', potassium: 'mg', sodium: 'mg',
                                        zinc: 'mg', copper: 'mg', manganese: 'mg',
                                        selenium: 'Œºg', iodine: 'Œºg', chromium: 'Œºg'
                                    };
                                    return Object.entries(targets.minerals).map(([key, target]) => {
                                        const current = currentIntake.minerals[key] || 0;
                                        const percent = (current / target) * 100;
                                    return (
                                        <div key={key} className="bg-gray-50 p-2 rounded">
                                            <div className="flex justify-between text-xs mb-1">
                                                <span className="font-medium">{mineralNames[key]}</span>
                                                <span className="text-gray-600">
                                                    {current.toFixed(1)} / {target}{mineralUnits[key]}
                                                </span>
                                            </div>
                                            <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                                                <div
                                                    className="h-full bg-gradient-to-r from-purple-400 to-indigo-500 transition-all"
                                                    style={{ width: `${Math.min(percent, 100)}%` }}
                                                />
                                            </div>
                                        </div>
                                    );
                                })})()}
                            </div>
                        </div>

                        {/* „Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥† */}
                        {Object.keys(currentIntake.otherNutrients || {}).length > 0 && (
                            <div>
                                <h4 className="text-sm font-bold mb-3 flex items-center gap-2">
                                    <Icon name="Sparkles" size={16} className="text-cyan-500" />
                                    „Åù„ÅÆ‰ªñ„ÅÆÊ†ÑÈ§äÁ¥†
                                </h4>
                                <div className="grid grid-cols-2 gap-3">
                                    {(() => {
                                        // ÂÆåÂÖ®ÂÄãÂà•ÂåñÂü∫Ê∫ñÂÄ§„ÇíÂèñÂæó
                                        const targets = LBMUtils.calculatePersonalizedMicronutrients(profile || {});
                                        const nutrientNames = {
                                            caffeine: '„Ç´„Éï„Çß„Ç§„É≥', catechin: '„Ç´„ÉÜ„Ç≠„É≥', tannin: '„Çø„É≥„Éã„É≥',
                                            polyphenol: '„Éù„É™„Éï„Çß„Éé„Éº„É´', chlorogenicAcid: '„ÇØ„É≠„É≠„Ç≤„É≥ÈÖ∏',
                                            creatine: '„ÇØ„É¨„Ç¢„ÉÅ„É≥', lArginine: 'L-„Ç¢„É´„ÇÆ„Éã„É≥', lCarnitine: 'L-„Ç´„É´„Éã„ÉÅ„É≥',
                                            EPA: 'EPA', DHA: 'DHA', coQ10: '„Ç≥„Ç®„É≥„Ç∂„Ç§„É†Q10',
                                            lutein: '„É´„ÉÜ„Ç§„É≥', astaxanthin: '„Ç¢„Çπ„Çø„Ç≠„Çµ„É≥„ÉÅ„É≥'
                                        };
                                        return Object.entries(currentIntake.otherNutrients).map(([key, value]) => {
                                            const target = targets.otherNutrients[key] || 100;
                                            const isGrams = key === 'creatine';
                                            const unit = isGrams ? 'g' : 'mg';
                                            const displayValue = isGrams ? (value / 1000).toFixed(2) : value.toFixed(1);
                                            const displayTarget = isGrams ? (target / 1000).toFixed(1) : target;
                                            const percent = (value / target) * 100;
                                        return (
                                            <div key={key} className="bg-gray-50 p-2 rounded">
                                                <div className="flex justify-between text-xs mb-1">
                                                    <span className="font-medium">{nutrientNames[key] || key}</span>
                                                    <span className="text-gray-600">
                                                        {displayValue} / {displayTarget}{unit}
                                                    </span>
                                                </div>
                                                <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                                                    <div
                                                        className="h-full bg-gradient-to-r from-cyan-400 to-teal-500 transition-all"
                                                        style={{ width: `${Math.min(percent, 100)}%` }}
                                                    />
                                                </div>
                                            </div>
                                        );
                                    })})()}
                                </div>
                            </div>
                        )}
                    </div>
                </details>
                )}
            </div>

            {/* Ë®òÈå≤‰∏ÄË¶ß */}
            <div className="bg-white rounded-xl shadow-sm p-6 slide-up">
                <div className="flex items-center gap-2 mb-4">
                    <h3 className="text-lg font-bold">Ë®òÈå≤</h3>
                    <button
                        onClick={() => setInfoModal({
                            show: true,
                            title: 'üìù Ë®òÈå≤„Å´„Å§„ÅÑ„Å¶',
                            content: `„ÄêÈÄöÂ∏∏„ÅÆË®òÈå≤„Äë\nFAB„É°„Éã„É•„Éº„ÅÆÔºã„Éú„Çø„É≥„Åã„Çâ„ÄÅÈ£ü‰∫ã„ÉªÈÅãÂãï„Éª„Çµ„Éó„É™„É°„É≥„Éà„ÇíË®òÈå≤„Åß„Åç„Åæ„Åô„ÄÇË®òÈå≤„Åó„ÅüÂÜÖÂÆπ„ÅØÂç≥Â∫ß„Å´„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´ÂèçÊò†„Åï„Çå„Åæ„Åô„ÄÇ\n\n„Äê‰∫àÊ∏¨ÂÖ•ÂäõÊ©üËÉΩ„Äë\nÂâçÊó•„ÅÆË®òÈå≤„ÇíËá™ÂãïÁöÑ„Å´Ë§áË£Ω„Åô„ÇãÊ©üËÉΩ„Åß„Åô„ÄÇ„Äå‰∫àÊ∏¨ÂÖ•Âäõ„Äç„Éú„Çø„É≥„ÇíÊäº„Åô„Å®„ÄÅÂâçÊó•„ÅÆË®òÈå≤„ÅåÂ±ïÈñã„Åï„Çå„Åæ„Åô„ÄÇÊØéÊó•Âêå„Åò„Çà„ÅÜ„Å™Ë®òÈå≤„Çí„Åô„ÇãÂ†¥Âêà„Å´‰æøÂà©„Åß„Åô„ÄÇ\n\nÈùí„ÅÑ„Éê„ÉÉ„Ç∏„ÄåÊò®Êó•„Åã„Çâ„Äç„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãÈ†ÖÁõÆ„Åå‰∫àÊ∏¨ÂÖ•Âäõ„Åï„Çå„ÅüË®òÈå≤„Åß„Åô„ÄÇ\n\n„Äê„ÇØ„É™„Ç¢„Éú„Çø„É≥„Äë\n„Äå‰∫àÊ∏¨ÂÖ•Âäõ„Çí„ÇØ„É™„Ç¢„Äç„Éú„Çø„É≥„ÇíÊäº„Åô„Å®„ÄÅ‰∫àÊ∏¨ÂÖ•Âäõ„ÅßÂ±ïÈñã„Åï„Çå„ÅüË®òÈå≤„ÅÆ„Åø„ÅåÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇÊâãÂãï„ÅßËøΩÂä†„Åó„ÅüË®òÈå≤„ÅØ„Åù„ÅÆ„Åæ„ÅæÊÆã„Çä„Åæ„Åô„ÄÇ`
                        })}
                        className="text-indigo-600 hover:text-indigo-800"
                    >
                        <Icon name="Info" size={18} />
                    </button>
                    <div className="ml-auto flex gap-2">
                        {yesterdayRecord && (
                            <button
                                onClick={loadPredictedData}
                                className="text-xs px-3 py-1 bg-purple-50 border border-purple-300 text-purple-700 rounded-lg hover:bg-purple-100 transition flex items-center gap-1"
                            >
                                <Icon name="Sparkles" size={14} />
                                ‰∫àÊ∏¨ÂÖ•Âäõ
                            </button>
                        )}
                        {yesterdayRecord && (dailyRecord.meals?.some(m => m.isPredicted) || dailyRecord.workouts?.some(w => w.isPredicted) || dailyRecord.supplements?.some(s => s.isPredicted)) && (
                            <button
                                onClick={async () => {
                                    // ‰∫àÊ∏¨ÂÖ•Âäõ„Åï„Çå„ÅüË®òÈå≤„ÅÆ„Åø„ÇíÂâäÈô§
                                    const clearedRecord = {
                                        ...dailyRecord,
                                        meals: dailyRecord.meals?.filter(m => !m.isPredicted) || [],
                                        workouts: dailyRecord.workouts?.filter(w => !w.isPredicted) || [],
                                        supplements: dailyRecord.supplements?.filter(s => !s.isPredicted) || [],
                                    };
                                    setDailyRecord(clearedRecord);
                                    const userId = user?.uid || DEV_USER_ID;
                                    await DataService.saveDailyRecord(userId, currentDate, clearedRecord);
                                }}
                                className="text-xs px-3 py-1 bg-blue-50 border border-blue-300 text-blue-700 rounded-lg hover:bg-blue-100 transition"
                            >
                                ‰∫àÊ∏¨ÂÖ•Âäõ„Çí„ÇØ„É™„Ç¢
                            </button>
                        )}
                    </div>
                </div>

                {(dailyRecord.meals?.length === 0 || !dailyRecord.meals) &&
                 (dailyRecord.workouts?.length === 0 || !dailyRecord.workouts) &&
                 (dailyRecord.supplements?.length === 0 || !dailyRecord.supplements) ? (
                    <div className="text-center py-12">
                        <Icon name="UtensilsCrossed" size={48} className="text-gray-300 mx-auto mb-4" />
                        <p className="text-gray-500 mb-3 font-semibold">„Åæ„Å†Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                        <div className="space-y-2">
                            <div className="flex items-center justify-center gap-2 text-sm text-indigo-600">
                                <span className="font-bold">‚ë†</span>
                                <Icon name="Settings" size={16} />
                                <span>ÔºöÂè≥‰∏ä„ÅÆË®≠ÂÆö„Åß„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂÖ•Âäõ</span>
                            </div>
                            <div className="flex items-center justify-center gap-2 text-sm text-indigo-600">
                                <span className="font-bold">‚ë°</span>
                                <Icon name="Plus" size={16} />
                                <span>ÔºöÂè≥‰∏ã„ÅÆÔºã„Éú„Çø„É≥„Åã„ÇâË®òÈå≤„ÇíÈñãÂßã</span>
                            </div>
                        </div>
                    </div>
                ) : (
                    <div className="space-y-3">
                        {dailyRecord.meals?.map((meal, index) => (
                            <div key={meal.id || index} className={`border rounded-lg p-4 hover:border-emerald-300 transition ${meal.isPredicted ? 'border-blue-300 bg-blue-50' : 'border-gray-200'}`}>
                                <div className="flex justify-between items-start">
                                    <div className="flex-1">
                                        <div className="flex items-center gap-2 mb-1">
                                            <Icon name="Utensils" size={16} className="text-emerald-600" />
                                            <p className="font-medium">{meal.name}</p>
                                            {meal.isPredicted && (
                                                <span className="text-xs bg-blue-500 text-white px-2 py-0.5 rounded-full flex items-center gap-1">
                                                    <Icon name="Sparkles" size={10} />
                                                    Êò®Êó•„Åã„Çâ
                                                </span>
                                            )}
                                        </div>
                                        <p className="text-sm text-gray-500 mb-2">{meal.time}</p>
                                        {meal.items?.map((item, i) => (
                                            <p key={i} className="text-sm text-gray-600">
                                                {item.name} {item.amount}
                                            </p>
                                        ))}
                                    </div>
                                    <div className="text-right">
                                        <p className="font-bold text-emerald-600 mb-2">{meal.calories} kcal</p>
                                        <button
                                            onClick={() => onDeleteItem('meal', meal.id)}
                                            className="text-red-500 hover:text-red-700 text-sm"
                                        >
                                            <Icon name="Trash2" size={16} />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        ))}
                        {dailyRecord.workouts?.map((workout, index) => (
                            <div key={workout.id || index} className={`border rounded-lg p-4 hover:border-orange-300 transition ${workout.isPredicted ? 'border-blue-300 bg-white' : 'border-gray-200 bg-white'}`}>
                                <div className="flex justify-between items-start">
                                    <div className="flex-1">
                                        <div className="flex items-center gap-2 mb-1">
                                            <Icon name="Dumbbell" size={16} className="text-orange-600" />
                                            <p className="font-medium">{workout.name}</p>
                                            {workout.isPredicted && (
                                                <span className="text-xs bg-blue-500 text-white px-2 py-0.5 rounded-full flex items-center gap-1">
                                                    <Icon name="Sparkles" size={10} />
                                                    Êò®Êó•„Åã„Çâ
                                                </span>
                                            )}
                                        </div>
                                        <p className="text-sm text-gray-500 mb-2">{workout.time}</p>
                                        {workout.exercises?.map((exercise, i) => (
                                            <div key={i} className="text-sm text-gray-600">
                                                <p className="font-medium">{exercise.name}</p>
                                                {exercise.sets?.map((set, si) => (
                                                    <p key={si} className="text-xs">
                                                        Set {si + 1}: {set.weight}kg √ó {set.reps}Âõû
                                                    </p>
                                                ))}
                                            </div>
                                        ))}
                                    </div>
                                    <div className="text-right">
                                        <div className="flex items-center gap-1 justify-end mb-2">
                                            <p className="font-bold text-orange-600">-{workout.caloriesBurned} kcal</p>
                                            <button
                                                type="button"
                                                onClick={() => setInfoModal({
                                                    show: true,
                                                    title: 'Áã¨Ëá™„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÄéPGÂºè„Äè„Å®„ÅØÔºü',
                                                    content: `ÂæìÊù•„ÅÆÊ∂àË≤ª„Ç´„É≠„É™„ÉºË®àÁÆóÔºàMETsÊ≥ïÔºâ„ÅÆÊ¨†ÁÇπ„ÇíÂÖãÊúç„Åô„Çã„Åü„ÇÅ„Å´Áã¨Ëá™ÈñãÁô∫„Åó„Åü„ÄÅÊú¨„Ç¢„Éó„É™„ÅÆÊ†∏ÂøÉÁöÑÊäÄË°ì„Åß„Åô„ÄÇ

Âçò„Å™„ÇãÈÅãÂãïÂº∑Â∫¶„Å†„Åë„Åß„Å™„Åè„ÄÅÁâ©ÁêÜÁöÑ‰ªï‰∫ãÈáèÔºàÈáçÈáè„ÄÅÂõûÊï∞„ÄÅÂèØÂãïË∑ùÈõ¢Ôºâ„ÇÑÁîüÁêÜÁöÑ„Ç≥„Çπ„ÉàÔºàTUT„ÄÅ„Ç§„É≥„Çø„Éº„Éê„É´Ôºâ„Å™„Å©„ÇíÂ§öËßíÁöÑ„Å´Ëß£Êûê„Åô„Çã„Åì„Å®„Åß„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„ÄåÁ¥îÁ≤ã„Å™Âä™Âäõ„Äç„ÇíÁßëÂ≠¶ÁöÑ„Åã„Å§Ê≠£ÂΩì„Å´Ë©ï‰æ°„Åó„Åæ„Åô„ÄÇ

„ÄêPGÂºè„ÅÆÁâπÂæ¥„Äë
‚Ä¢ ÂÄã‰∫∫„ÅÆLBMÔºàÈô§ËÑÇËÇ™‰ΩìÈáçÔºâ„Å´Âü∫„Å•„ÅèÁ≤æÂØÜË®àÁÆó
‚Ä¢ ÈáçÈáè„ÉªÂõûÊï∞„ÉªÂèØÂãïË∑ùÈõ¢„ÇíËÄÉÊÖÆ„Åó„ÅüÁâ©ÁêÜÁöÑ‰ªï‰∫ãÈáè
‚Ä¢ TUTÔºàÁ≠ãÁ∑äÂºµÊôÇÈñìÔºâ„ÇÑ„Ç§„É≥„Çø„Éº„Éê„É´„ÅÆÁîüÁêÜÁöÑ„Ç≥„Çπ„Éà
‚Ä¢ Âçò„Å™„ÇãÊôÇÈñì„Éô„Éº„Çπ„Åß„ÅØ„Å™„ÅÑÊ≠£Á¢∫„Å™Ë©ï‰æ°`
                                                })}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="Info" size={14} />
                                            </button>
                                        </div>
                                        <button
                                            onClick={() => onDeleteItem('workout', workout.id)}
                                            className="text-red-500 hover:text-red-700 text-sm"
                                        >
                                            <Icon name="Trash2" size={16} />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        ))}
                        {dailyRecord.supplements?.map((supplement, index) => {
                            // ÂêàË®à„Çø„É≥„Éë„ÇØË≥™„ÇíË®àÁÆó
                            const totalProtein = (supplement.items || []).reduce((sum, item) => sum + (item.protein || 0), 0);

                            return (
                                <div key={supplement.id || index} className={`border rounded-lg p-4 hover:border-blue-300 transition ${supplement.isPredicted ? 'border-blue-300 bg-white' : 'border-gray-200 bg-white'}`}>
                                    <div className="flex justify-between items-start">
                                        <div className="flex-1">
                                            <div className="flex items-center gap-2 mb-1">
                                                <Icon name="Pill" size={16} className="text-blue-600" />
                                                <p className="font-medium">{supplement.name}</p>
                                                {supplement.isPredicted && (
                                                    <span className="text-xs bg-blue-500 text-white px-2 py-0.5 rounded-full flex items-center gap-1">
                                                        <Icon name="Sparkles" size={10} />
                                                        Êò®Êó•„Åã„Çâ
                                                    </span>
                                                )}
                                            </div>
                                            <p className="text-sm text-gray-500 mb-2">{supplement.time}</p>
                                            {supplement.items?.map((item, i) => {
                                                // Ê≠£Á¢∫„Å™ÂàÜÈáèË°®Á§∫„ÇíÊúÄÈÅ©Âåñ
                                                const servings = item.servings || 1;
                                                const servingSize = item.servingSize || 0;
                                                const servingUnit = item.servingUnit || 'g';
                                                const totalAmount = servings * servingSize;
                                                const unit = item.unit || `${servingSize}${servingUnit}`;

                                                // Ë°®Á§∫ÂΩ¢Âºè„ÅÆÊúÄÈÅ©Âåñ
                                                let displayText = '';
                                                if (servings === 1) {
                                                    // 1ÂõûÂàÜ„ÅÆÂ†¥Âêà„ÅØ„Ç∑„É≥„Éó„É´„Å´Ë°®Á§∫
                                                    displayText = `${item.name} ${unit}`;
                                                } else {
                                                    // Ë§áÊï∞ÂõûÂàÜ„ÅÆÂ†¥Âêà
                                                    displayText = `${item.name} ${servings}ÂõûÂàÜ = ${totalAmount}${servingUnit}`;
                                                }

                                                return (
                                                    <p key={i} className="text-sm text-gray-600">
                                                        {displayText}
                                                    </p>
                                                );
                                            })}
                                        </div>
                                        <div className="text-right">
                                            <p className="text-sm text-blue-600">P: {totalProtein.toFixed(1)}g</p>
                                            <button
                                                onClick={() => onDeleteItem('supplement', supplement.id)}
                                                className="text-red-500 hover:text-red-700 text-sm mt-2"
                                            >
                                                <Icon name="Trash2" size={16} />
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}
            </div>
        </div>
    );
};
