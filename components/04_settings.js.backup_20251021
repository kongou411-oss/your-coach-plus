// ===== Settings Components =====
// ===== 設定画面 =====
const SettingsView = ({ onClose, userProfile, onUpdateProfile, userId, usageDays, unlockedFeatures, onOpenAddView, darkMode, onToggleDarkMode }) => {
    const [profile, setProfile] = useState({...userProfile});
    const [activeTab, setActiveTab] = useState('profile'); // 'profile', 'data', 'advanced'
    const [showCustomMultiplierInput, setShowCustomMultiplierInput] = useState(false);
    const [customMultiplierInputValue, setCustomMultiplierInputValue] = useState('');
    const [infoModal, setInfoModal] = useState({ show: false, title: '', content: '' });
    const [visualGuideModal, setVisualGuideModal] = useState({ show: false, gender: '男性', selectedLevel: 5 });
    const [currentTheme, setCurrentTheme] = useState(ThemeUtils.getCurrentTheme());
    const [allThemes] = useState(ThemeUtils.getAllThemes());

    const [localRoutines, setLocalRoutines] = useState(() => {
        const saved = localStorage.getItem(STORAGE_KEYS.ROUTINES);
        return saved ? JSON.parse(saved) : [];
    });
    const [mealTemplates, setMealTemplates] = useState([]);
    const [workoutTemplates, setWorkoutTemplates] = useState([]);
    const [supplementTemplates, setSupplementTemplates] = useState([]);
    const [aiCredits, setAiCredits] = useState(null);

    // テンプレート読み込み
    useEffect(() => {
        loadTemplates();
        loadAICredits();
    }, []);

    const loadAICredits = async () => {
        const credits = await GeminiAPI.getAICredits(userId);
        setAiCredits(credits);
    };

    const loadTemplates = async () => {
        const meals = await DataService.getMealTemplates(userId);
        const workouts = await DataService.getWorkoutTemplates(userId);
        const supplements = await DataService.getSupplementTemplates(userId);
        setMealTemplates(meals);
        setWorkoutTemplates(workouts);
        setSupplementTemplates(supplements);
    };

    const handleSave = () => {
        // LBM再計算
        const lbm = LBMUtils.calculateLBM(profile.weight, profile.bodyFatPercentage);
        const bmr = LBMUtils.calculateBMR(lbm);
        const tdeeBase = LBMUtils.calculateTDEE(lbm, profile.activityLevel, profile.customActivityMultiplier);

        const updatedProfile = {
            ...profile,
            leanBodyMass: lbm,
            bmr: bmr,
            tdeeBase: tdeeBase
        };

        onUpdateProfile(updatedProfile);
        onClose();
    };


    const handleClearData = () => {
        if (confirm('本当に全データを削除しますか？この操作は取り消せません。')) {
            localStorage.clear();
            alert('データを削除しました。ページをリロードしてください。');
        }
    };

    // テーマ変更ハンドラー
    const handleThemeChange = (themeId) => {
        const success = ThemeUtils.setTheme(themeId);
        if (success) {
            setCurrentTheme(themeId);
            // ダークモードの状態も同期（旧ダークモード切り替えとの互換性のため）
            if (themeId === 'dark' && !darkMode) {
                onToggleDarkMode();
            } else if (themeId !== 'dark' && darkMode) {
                onToggleDarkMode();
            }
        }
    };

    return (
        <>
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto slide-up">
                <div className="sticky top-0 bg-white border-b p-4 flex justify-between items-center z-10">
                    <h3 className="text-lg font-bold">設定</h3>
                    <button onClick={onClose} className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-full">
                        <Icon name="X" size={20} />
                    </button>
                </div>

                {/* 設定メニュー（折りたたみ式一覧） */}
                <div className="p-6 space-y-3">
                    {/* 使い方 */}
                    <details className="border rounded-lg border-indigo-300 bg-indigo-50">
                        <summary className="cursor-pointer p-4 hover:bg-indigo-100 font-medium flex items-center gap-2">
                            <Icon name="BookOpen" size={18} className="text-indigo-600" />
                            使い方
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t border-indigo-200">
                            <div className="space-y-4">
                                <p className="text-sm text-gray-700 font-semibold">YourCoachの基本フロー</p>

                                {/* フローチャート */}
                                <div className="bg-white p-4 rounded-lg border-2 border-indigo-200 space-y-3">
                                    {/* ステップ1 */}
                                    <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0 w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center font-bold text-sm">1</div>
                                        <div>
                                            <p className="font-bold text-indigo-900">プロフィール設定</p>
                                            <p className="text-xs text-gray-600">体重・体脂肪率・目的を入力 → LBM自動計算 → 個別化基準値決定</p>
                                        </div>
                                    </div>
                                    <div className="flex justify-center"><Icon name="ArrowDown" size={20} className="text-indigo-400" /></div>

                                    {/* ステップ2 */}
                                    <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0 w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center font-bold text-sm">2</div>
                                        <div>
                                            <p className="font-bold text-indigo-900">毎日の記録</p>
                                            <p className="text-xs text-gray-600">食事・トレーニング・サプリを記録 → PFC・ビタミン・ミネラル自動集計</p>
                                        </div>
                                    </div>
                                    <div className="flex justify-center"><Icon name="ArrowDown" size={20} className="text-indigo-400" /></div>

                                    {/* ステップ3 */}
                                    <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0 w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center font-bold text-sm">3</div>
                                        <div>
                                            <p className="font-bold text-indigo-900">達成状況を確認</p>
                                            <p className="text-xs text-gray-600">ダッシュボードで目標値との比較 → 不足栄養素を特定</p>
                                        </div>
                                    </div>
                                    <div className="flex justify-center"><Icon name="ArrowDown" size={20} className="text-indigo-400" /></div>

                                    {/* ステップ4 */}
                                    <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0 w-8 h-8 bg-indigo-600 text-white rounded-full flex items-center justify-center font-bold text-sm">4</div>
                                        <div>
                                            <p className="font-bold text-indigo-900">調整・最適化</p>
                                            <p className="text-xs text-gray-600">食事内容を調整 → 1-12週間サイクルで継続</p>
                                        </div>
                                    </div>
                                    <div className="flex justify-center"><Icon name="ArrowDown" size={20} className="text-indigo-400" /></div>

                                    {/* ステップ5 */}
                                    <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0 w-8 h-8 bg-green-600 text-white rounded-full flex items-center justify-center font-bold text-sm">✓</div>
                                        <div>
                                            <p className="font-bold text-green-900">目標達成</p>
                                            <p className="text-xs text-gray-600">理想の身体へ！365日継続でキープ</p>
                                        </div>
                                    </div>
                                </div>

                                {/* 守破離システム説明 */}
                                <div className="bg-gradient-to-r from-green-50 via-blue-50 to-purple-50 p-4 rounded-lg border border-gray-200">
                                    <p className="font-bold text-sm mb-2 flex items-center gap-2">
                                        <Icon name="TrendingUp" size={16} />
                                        守破離システム
                                    </p>
                                    <div className="space-y-2 text-xs">
                                        <p><span className="font-bold text-green-700">守(0-9日)</span>: 基礎記録機能で習慣化</p>
                                        <p><span className="font-bold text-blue-700">破(10-17日)</span>: AIコーチ・分析機能が開放</p>
                                        <p><span className="font-bold text-purple-700">離(18日~)</span>: 全機能開放、独自メソッド確立</p>
                                    </div>
                                </div>

                                {/* ポイント */}
                                <div className="bg-yellow-50 p-3 rounded-lg border border-yellow-200">
                                    <p className="font-bold text-yellow-900 text-xs mb-1">💡 重要ポイント</p>
                                    <ul className="text-xs text-gray-700 space-y-1 list-disc list-inside">
                                        <li>基準値はLBM・血液型・目的で完全個別化</li>
                                        <li>筋肉の新陳代謝周期は50日、焦らず継続</li>
                                        <li>テンプレート・ルーティン機能で効率化</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </details>
                    {/* カラーモード */}
                    <details className="border rounded-lg border-gray-300 bg-gray-50">
                        <summary className="cursor-pointer p-4 hover:bg-gray-100 font-medium flex items-center gap-2">
                            <Icon name="Palette" size={18} className="text-purple-600" />
                            カラーモード
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t border-gray-200">
                            <div className="space-y-4">
                                {/* テーマ選択 */}
                                <div className="p-3 bg-white rounded-lg border">
                                    <div className="mb-3">
                                        <p className="font-medium flex items-center gap-2">
                                            <Icon name="Palette" size={18} className="text-purple-600" />
                                            テーマ選択
                                        </p>
                                        <p className="text-xs text-gray-500 mt-1">アプリの見た目を変更できます</p>
                                    </div>
                                    <div className="grid grid-cols-2 gap-3">
                                        {allThemes.map(theme => (
                                            <button
                                                key={theme.id}
                                                onClick={() => handleThemeChange(theme.id)}
                                                className={`relative p-3 rounded-lg border-2 transition-all ${
                                                    currentTheme === theme.id
                                                        ? 'border-purple-500 ring-2 ring-purple-200'
                                                        : 'border-gray-200 hover:border-purple-300'
                                                }`}
                                            >
                                                {/* プレビューカラー */}
                                                <div className="flex gap-1 mb-2">
                                                    <div
                                                        className="w-8 h-8 rounded"
                                                        style={{ backgroundColor: theme.preview.bgColor }}
                                                    />
                                                    <div
                                                        className="w-8 h-8 rounded"
                                                        style={{ backgroundColor: theme.preview.primaryColor }}
                                                    />
                                                    <div
                                                        className="w-8 h-8 rounded"
                                                        style={{ backgroundColor: theme.preview.textColor }}
                                                    />
                                                </div>

                                                {/* テーマ名 */}
                                                <p className="font-bold text-sm text-left">{theme.name}</p>
                                                <p className="text-xs text-gray-600 text-left mt-1 line-clamp-2">
                                                    {theme.description}
                                                </p>

                                                {/* チェックマーク */}
                                                {currentTheme === theme.id && (
                                                    <div className="absolute top-2 right-2 bg-purple-500 text-white rounded-full p-1">
                                                        <Icon name="Check" size={12} />
                                                    </div>
                                                )}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </details>

                    {/* プロフィール */}
                    <details className="border rounded-lg">
                        <summary className="cursor-pointer p-4 hover:bg-gray-50 font-medium flex items-center gap-2">
                            <Icon name="User" size={18} className="text-indigo-600" />
                            プロフィール
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t">
                            {/* プロフィール内容 */}
                            <div className="space-y-3">
                            {/* 基本情報 */}
                            <details className="border rounded-lg" style={{marginTop: '1.5rem'}}>
                                <summary className="cursor-pointer p-3 hover:bg-gray-50 font-medium flex items-center gap-2">
                                    <Icon name="User" size={16} />
                                    基本情報
                                </summary>
                                <div className="p-4 pt-0 space-y-4">
                                    <div>
                                        <label className="block text-sm font-medium mb-2">ニックネーム</label>
                                        <input
                                            type="text"
                                            value={profile.nickname}
                                            onChange={(e) => setProfile({...profile, nickname: e.target.value})}
                                            className="w-full px-4 py-3 border rounded-lg"
                                        />
                                    </div>
                                    <div className="grid grid-cols-2 gap-4">
                                        <div>
                                            <label className="block text-sm font-medium mb-2">年齢</label>
                                            <input
                                                type="number"
                                                value={profile.age}
                                                onChange={(e) => setProfile({...profile, age: e.target.value === '' ? '' : e.target.value === '' ? '' : Number(e.target.value)})}
                                                className="w-full px-4 py-3 border rounded-lg"
                                            />
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium mb-2">性別</label>
                                            <select
                                                value={profile.gender}
                                                onChange={(e) => setProfile({...profile, gender: e.target.value})}
                                                className="w-full px-4 py-3 border rounded-lg"
                                            >
                                                <option value="男性">男性</option>
                                                <option value="女性">女性</option>
                                                <option value="その他">その他</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium mb-2">食文化</label>
                                        <div className="space-y-2">
                                            <p className="text-xs text-gray-600">
                                                あなたの食生活に近いものを複数選択してください。好みに合った、継続しやすい食材を優先的に提案します。
                                            </p>
                                            <div className="flex flex-wrap gap-2">
                                                {['アジア', '欧米', 'ラテン', 'その他'].map(culture => (
                                                    <label key={culture} className="flex items-center gap-2 px-3 py-2 border rounded-lg cursor-pointer hover:bg-gray-50">
                                                        <input
                                                            type="checkbox"
                                                            checked={(profile.culturalRoots || []).includes(culture)}
                                                            onChange={(e) => {
                                                                const roots = profile.culturalRoots || [];
                                                                if (e.target.checked) {
                                                                    setProfile({...profile, culturalRoots: [...roots, culture]});
                                                                } else {
                                                                    setProfile({...profile, culturalRoots: roots.filter(r => r !== culture)});
                                                                }
                                                            }}
                                                            className="rounded"
                                                        />
                                                        <span className="text-sm">{culture}</span>
                                                    </label>
                                                ))}
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium mb-2">スタイル</label>
                                        <select
                                            value={profile.style || '一般'}
                                            onChange={(e) => setProfile({...profile, style: e.target.value})}
                                            className="w-full px-4 py-3 border rounded-lg"
                                        >
                                            <option value="一般">一般</option>
                                            <option value="ボディメイカー">ボディメイカー</option>
                                        </select>
                                        <p className="text-xs text-gray-600 mt-1">
                                            {profile.style === 'ボディメイカー' ? '高タンパク・精密な栄養管理基準' : '標準的な栄養基準'}
                                        </p>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                            生活スタイル（活動レベル）
                                            <button
                                                type="button"
                                                onClick={() => setInfoModal({
                                                    show: true,
                                                    title: '活動レベル係数とは？',
                                                    content: `あなたの日常生活がどれだけ活動的かを数値化したものです。この係数を基礎代謝量に掛けることで、1日の大まかな消費カロリー（TDEE）を算出します。

【重要】
これはあくまで日常生活の活動量であり、トレーニングによる消費カロリーは、より精密な『PG式』で別途計算されます。より正確な設定をしたい方は、係数を直接入力することも可能です。`
                                                })}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="Info" size={16} />
                                            </button>
                                        </label>
                                        {!profile.customActivityMultiplier && (
                                            <select
                                                value={profile.activityLevel}
                                                onChange={(e) => setProfile({...profile, activityLevel: e.target.value === '' ? '' : Number(e.target.value)})}
                                                className="w-full px-4 py-3 border rounded-lg"
                                                disabled={profile.customActivityMultiplier}
                                            >
                                                <option value={1}>デスクワーク中心 - 1.05x</option>
                                                <option value={2}>立ち仕事が多い - 1.225x</option>
                                                <option value={3}>軽い肉体労働 - 1.4x</option>
                                                <option value={4}>重い肉体労働 - 1.575x</option>
                                                <option value={5}>非常に激しい肉体労働 - 1.75x</option>
                                            </select>
                                        )}
                                        {profile.customActivityMultiplier && (
                                            <div className="p-3 bg-indigo-50 border border-indigo-200 rounded-lg">
                                                <p className="text-sm text-indigo-800">
                                                    カスタム係数: <span className="font-bold">{profile.customActivityMultiplier}x</span>
                                                </p>
                                            </div>
                                        )}
                                        {showCustomMultiplierInput && !profile.customActivityMultiplier && (
                                            <div className="mt-2 p-3 bg-gray-50 border rounded-lg space-y-2">
                                                <label className="block text-sm font-medium">係数を入力 (1.0〜2.5)</label>
                                                <input
                                                    type="number"
                                                    step="0.01"
                                                    min="1.0"
                                                    max="2.5"
                                                    value={customMultiplierInputValue}
                                                    onChange={(e) => setCustomMultiplierInputValue(e.target.value)}
                                                    className="w-full px-3 py-2 border rounded-lg"
                                                    placeholder="例: 1.45"
                                                />
                                                <div className="flex gap-2">
                                                    <button
                                                        type="button"
                                                        onClick={() => {
                                                            const value = parseFloat(customMultiplierInputValue);
                                                            if (!isNaN(value) && value >= 1.0 && value <= 2.5) {
                                                                setProfile({...profile, customActivityMultiplier: value});
                                                                setShowCustomMultiplierInput(false);
                                                                setCustomMultiplierInputValue('');
                                                            } else {
                                                                alert('1.0から2.5の間の数値を入力してください');
                                                            }
                                                        }}
                                                        className="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
                                                    >
                                                        設定
                                                    </button>
                                                    <button
                                                        type="button"
                                                        onClick={() => {
                                                            setShowCustomMultiplierInput(false);
                                                            setCustomMultiplierInputValue('');
                                                        }}
                                                        className="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300"
                                                    >
                                                        キャンセル
                                                    </button>
                                                </div>
                                            </div>
                                        )}
                                        <button
                                            type="button"
                                            onClick={() => {
                                                if (profile.customActivityMultiplier) {
                                                    setProfile({...profile, customActivityMultiplier: null});
                                                } else {
                                                    const multipliers = {1: 1.05, 2: 1.225, 3: 1.4, 4: 1.575, 5: 1.75};
                                                    const currentMultiplier = multipliers[profile.activityLevel] || 1.4;
                                                    setCustomMultiplierInputValue(currentMultiplier.toString());
                                                    setShowCustomMultiplierInput(!showCustomMultiplierInput);
                                                }
                                            }}
                                            className="mt-2 text-sm text-indigo-600 hover:text-indigo-800 underline"
                                        >
                                            {profile.customActivityMultiplier ? '5段階選択に戻す' : showCustomMultiplierInput ? '入力を閉じる' : 'または、活動レベル係数を直接入力する'}
                                        </button>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                            目的
                                            <button
                                                type="button"
                                                onClick={() => setInfoModal({
                                                    show: true,
                                                    title: '目的の設定',
                                                    content: `あなたのボディメイクの目的を選択してください。目的に応じて推奨カロリーとPFCバランスが自動調整されます。

【減量（ダイエット）】
• 目標: 体脂肪を減らし、引き締まった体を作る
• カロリー: メンテナンスカロリー -300kcal
• タンパク質: 高め（筋肉維持のため）
• 推奨ペース: 週0.5〜0.7kg減

【リコンプ】
• 目標: 体脂肪を減らしながら筋肉を増やす
• カロリー: メンテナンスカロリー ±0kcal
• タンパク質: 非常に高め
• 最適: 初心者や体脂肪率が高めの方に最適

【増量（バルクアップ）】
• 目標: 筋肉量を増やし、体を大きくする
• カロリー: メンテナンスカロリー +300kcal
• タンパク質: 非常に高め
• 炭水化物: 多め（筋肉合成のエネルギー）
• 推奨ペース: 週0.5kg増

【維持（メンテナンス）】
• 目標: 現在の体重・体組成を維持
• カロリー: メンテナンスカロリー ±0kcal
• バランス型の栄養配分
• 健康的な生活習慣の維持

目的はいつでも変更できます。`
                                                })}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="Info" size={14} />
                                            </button>
                                        </label>
                                        <select
                                            value={profile.purpose}
                                            onChange={(e) => {
                                                const purpose = e.target.value;
                                                let pace = 0;
                                                let calorieAdjust = 0;
                                                if (purpose === 'ダイエット') {
                                                    pace = -1;
                                                    calorieAdjust = -300;
                                                } else if (purpose === 'バルクアップ') {
                                                    pace = 1;
                                                    calorieAdjust = 300;
                                                } else if (purpose === 'リコンプ') {
                                                    pace = 0;
                                                    calorieAdjust = 0;
                                                }
                                                setProfile({...profile, purpose, weightChangePace: pace, calorieAdjustment: calorieAdjust});
                                            }}
                                            className="w-full px-4 py-3 border rounded-lg"
                                        >
                                            <option value="ダイエット">減量（ダイエット）</option>
                                            <option value="リコンプ">リコンプ</option>
                                            <option value="バルクアップ">増量（バルクアップ）</option>
                                            <option value="メンテナンス">維持</option>
                                        </select>
                                        <p className="text-xs text-gray-600 mt-1">
                                            {profile.purpose === 'ダイエット' && '体脂肪を減らす'}
                                            {profile.purpose === 'リコンプ' && '体脂肪を減らしながら筋肉を増やす。初心者や体脂肪率が高めの方に最適'}
                                            {profile.purpose === 'バルクアップ' && '筋肉量を増やす'}
                                            {profile.purpose === 'メンテナンス' && '現状を維持'}
                                        </p>
                                    </div>
                                </div>
                            </details>

                            <button
                                onClick={handleSave}
                                className="w-full bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition"
                            >
                                保存
                            </button>
                            </div>
                        </div>
                    </details>


                    {/* サブスクリプション管理 */}
                    <details className="border rounded-lg border-purple-300 bg-purple-50" data-subscription-section open>
                        <summary className="cursor-pointer p-4 hover:bg-purple-100 font-medium flex items-center gap-2">
                            <Icon name="CreditCard" size={18} className="text-purple-600" />
                            サブスクリプション
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t bg-white">
                            {aiCredits && aiCredits.isPremium ? (
                                <div className="space-y-4">
                                    {/* プレミアム会員 */}
                                    <div className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 rounded-lg">
                                        <div className="flex items-center justify-between mb-2">
                                            <div className="flex items-center gap-2">
                                                <Icon name="Crown" size={24} className="text-yellow-300" />
                                                <span className="text-xl font-bold">Premium</span>
                                            </div>
                                            <span className="text-2xl font-bold">¥{SUBSCRIPTION_PLAN.price}/月</span>
                                        </div>
                                        <p className="text-sm opacity-90">全機能利用可能 + AI分析クレジット付き</p>
                                    </div>

                                    {/* AIクレジット残高 */}
                                    <div className="border-2 border-indigo-200 rounded-lg p-4 bg-indigo-50">
                                        <div className="flex items-center justify-between mb-3">
                                            <div className="flex items-center gap-2">
                                                <Icon name="Sparkles" size={20} className="text-indigo-600" />
                                                <span className="font-bold text-indigo-900">AIクレジット残高</span>
                                            </div>
                                            <button
                                                onClick={loadAICredits}
                                                className="text-indigo-600 hover:text-indigo-800"
                                            >
                                                <Icon name="RefreshCw" size={16} />
                                            </button>
                                        </div>

                                        <div className="flex items-end gap-2 mb-2">
                                            <span className="text-4xl font-bold text-indigo-600">{aiCredits.remaining}</span>
                                            <span className="text-gray-600 mb-1">/ {aiCredits.monthly + aiCredits.purchased} 回</span>
                                        </div>

                                        <div className="space-y-1 text-xs text-gray-600">
                                            <div className="flex justify-between">
                                                <span>今月の使用:</span>
                                                <span className="font-medium">{aiCredits.used}回</span>
                                            </div>
                                            <div className="flex justify-between">
                                                <span>月額付与分:</span>
                                                <span className="font-medium">{aiCredits.monthly}回</span>
                                            </div>
                                            {aiCredits.purchased > 0 && (
                                                <div className="flex justify-between">
                                                    <span>追加購入分:</span>
                                                    <span className="font-medium text-green-600">{aiCredits.purchased}回</span>
                                                </div>
                                            )}
                                        </div>

                                        {/* プログレスバー */}
                                        <div className="mt-3 bg-gray-200 rounded-full h-2">
                                            <div
                                                className="bg-gradient-to-r from-indigo-500 to-purple-500 h-2 rounded-full transition-all"
                                                style={{ width: `${(aiCredits.remaining / (aiCredits.monthly + aiCredits.purchased)) * 100}%` }}
                                            />
                                        </div>
                                    </div>

                                    {/* 追加クレジット購入 */}
                                    <div className="border rounded-lg p-4">
                                        <h4 className="font-bold mb-3 flex items-center gap-2">
                                            <Icon name="ShoppingCart" size={18} className="text-green-600" />
                                            追加クレジット購入
                                        </h4>
                                        <div className="grid grid-cols-3 gap-2">
                                            {SUBSCRIPTION_PLAN.aiCredits.purchaseOptions.map(option => (
                                                <button
                                                    key={option.credits}
                                                    onClick={() => {
                                                        if (confirm(`${option.name}を¥${option.price}で購入しますか？\n\n※現在はStripe未接続のため、実際の決済は行われません。`)) {
                                                            GeminiAPI.purchaseAICredits(userId, option.credits).then(() => {
                                                                loadAICredits();
                                                                alert(`${option.credits}回分のクレジットを追加しました！`);
                                                            });
                                                        }
                                                    }}
                                                    className="border-2 border-green-300 bg-green-50 hover:bg-green-100 p-3 rounded-lg transition text-center"
                                                >
                                                    <div className="text-lg font-bold text-green-700">{option.credits}回</div>
                                                    <div className="text-xs text-gray-600">¥{option.price}</div>
                                                </button>
                                            ))}
                                        </div>
                                        <p className="text-xs text-gray-500 mt-2">※ 購入したクレジットは有効期限なし</p>
                                    </div>

                                    {/* サブスク管理 */}
                                    <div className="border-t pt-4">
                                        <button
                                            onClick={() => alert('Stripe Customer Portalへのリンクを後ほど実装します')}
                                            className="w-full px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition text-sm"
                                        >
                                            サブスクリプション管理（決済方法・解約）
                                        </button>
                                    </div>
                                </div>
                            ) : (
                                <div className="space-y-4">
                                    {/* 無料ユーザー */}
                                    <div className="bg-gray-100 p-4 rounded-lg">
                                        <div className="flex items-center gap-2 mb-2">
                                            <Icon name="User" size={20} className="text-gray-600" />
                                            <span className="font-bold">無料プラン</span>
                                        </div>
                                        <p className="text-sm text-gray-600 mb-3">基本機能のみ利用可能</p>

                                        <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-lg mb-3">
                                            <p className="text-sm font-bold text-yellow-800 mb-1">制限事項:</p>
                                            <ul className="text-xs text-gray-700 space-y-1">
                                                <li>• 履歴は7日間のみ</li>
                                                <li>• AI分析機能なし</li>
                                                <li>• コミュニティアクセスなし</li>
                                            </ul>
                                        </div>
                                    </div>

                                    {/* プレミアムプラン紹介 */}
                                    <div className="border-2 border-purple-300 rounded-lg p-4 bg-gradient-to-br from-purple-50 to-indigo-50">
                                        <div className="flex items-center gap-2 mb-3">
                                            <Icon name="Crown" size={24} className="text-purple-600" />
                                            <span className="text-xl font-bold text-purple-900">Premium プラン</span>
                                        </div>

                                        <div className="text-3xl font-bold text-purple-600 mb-3">¥{SUBSCRIPTION_PLAN.price}/月</div>

                                        <ul className="space-y-2 mb-4">
                                            {SUBSCRIPTION_PLAN.features.map((feature, i) => (
                                                <li key={i} className="flex items-start gap-2 text-sm">
                                                    <Icon name="Check" size={16} className="text-green-600 mt-0.5" />
                                                    <span>{feature}</span>
                                                </li>
                                            ))}
                                        </ul>

                                        <button
                                            onClick={() => alert('Stripe Checkout へのリンクを後ほど実装します')}
                                            className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-bold py-3 rounded-lg hover:from-purple-700 hover:to-indigo-700 transition"
                                        >
                                            プレミアムプランに登録
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    </details>

                    {/* テンプレート */}
                    <details className="border rounded-lg">
                        <summary className="cursor-pointer p-4 hover:bg-gray-50 font-medium flex items-center gap-2">
                            <Icon name="BookTemplate" size={18} className="text-indigo-600" />
                            テンプレート
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t">
                        <div className="space-y-4">
                            <p className="text-sm text-gray-600">保存したテンプレートを管理できます。ルーティンに紐づけて使用することも可能です。</p>

                            {/* 食事テンプレート */}
                            <div className="border rounded-lg p-4">
                                <div className="flex items-center justify-between mb-3">
                                    <div>
                                        <h3 className="font-semibold text-green-800">🍽️ 食事テンプレート</h3>
                                        <p className="text-xs text-gray-600">よく食べる食事の組み合わせを保存</p>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span className="text-sm text-gray-500">{mealTemplates.length}件</span>
                                        <button
                                            onClick={() => onOpenAddView && onOpenAddView('meal')}
                                            className="px-3 py-1 bg-green-600 text-white text-xs rounded-lg hover:bg-green-700 transition flex items-center gap-1"
                                        >
                                            <Icon name="Plus" size={14} />
                                            新規作成
                                        </button>
                                    </div>
                                </div>
                                {mealTemplates.length === 0 ? (
                                    <p className="text-sm text-gray-500">保存されたテンプレートはありません</p>
                                ) : (
                                    <div className="space-y-2 mt-3">
                                        {mealTemplates.map(template => {
                                            const totalCals = (template.items || []).reduce((sum, i) => sum + (i.calories || 0), 0);
                                            const totalProtein = (template.items || []).reduce((sum, i) => sum + (i.protein || 0), 0);
                                            const totalFat = (template.items || []).reduce((sum, i) => sum + (i.fat || 0), 0);
                                            const totalCarbs = (template.items || []).reduce((sum, i) => sum + (i.carbs || 0), 0);

                                            return (
                                                <details key={template.id} className="bg-gray-50 p-3 rounded-lg">
                                                    <summary className="flex items-center justify-between cursor-pointer hover:bg-gray-100 -m-3 p-3 rounded-lg">
                                                        <div className="flex-1">
                                                            <p className="font-medium text-sm">{template.name}</p>
                                                            <p className="text-xs text-gray-600">
                                                                {template.items?.length || 0}品目 | {Math.round(totalCals)}kcal
                                                            </p>
                                                        </div>
                                                        <button
                                                            onClick={async (e) => {
                                                                e.preventDefault();
                                                                if (confirm('このテンプレートを削除しますか？')) {
                                                                    await DataService.deleteMealTemplate(userId, template.id);
                                                                    await loadTemplates();
                                                                }
                                                            }}
                                                            className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded transition ml-2"
                                                        >
                                                            <Icon name="Trash2" size={16} />
                                                        </button>
                                                    </summary>
                                                    <div className="mt-3 space-y-2 border-t pt-3">
                                                        <div className="grid grid-cols-4 gap-2 text-xs bg-white p-2 rounded">
                                                            <div className="text-center">
                                                                <div className="font-medium text-gray-500">カロリー</div>
                                                                <div className="font-bold">{Math.round(totalCals)}</div>
                                                            </div>
                                                            <div className="text-center">
                                                                <div className="font-medium text-gray-500">P</div>
                                                                <div className="font-bold">{totalProtein.toFixed(1)}g</div>
                                                            </div>
                                                            <div className="text-center">
                                                                <div className="font-medium text-gray-500">F</div>
                                                                <div className="font-bold">{totalFat.toFixed(1)}g</div>
                                                            </div>
                                                            <div className="text-center">
                                                                <div className="font-medium text-gray-500">C</div>
                                                                <div className="font-bold">{totalCarbs.toFixed(1)}g</div>
                                                            </div>
                                                        </div>
                                                        {(template.items || []).map((item, idx) => (
                                                            <div key={idx} className="text-xs bg-white p-2 rounded flex justify-between">
                                                                <span className="font-medium">{item.name} ({item.amount}g)</span>
                                                                <span className="text-gray-600">
                                                                    {Math.round(item.calories)}kcal | P{item.protein.toFixed(1)} F{item.fat.toFixed(1)} C{item.carbs.toFixed(1)}
                                                                </span>
                                                            </div>
                                                        ))}
                                                    </div>
                                                </details>
                                            );
                                        })}
                                    </div>
                                )}
                            </div>

                            {/* 運動テンプレート */}
                            <div className="border rounded-lg p-4">
                                <div className="flex items-center justify-between mb-3">
                                    <div>
                                        <h3 className="font-semibold text-orange-800">💪 運動テンプレート</h3>
                                        <p className="text-xs text-gray-600">よく行う種目とセット数を保存</p>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <span className="text-sm text-gray-500">{workoutTemplates.length}件</span>
                                        <button
                                            onClick={() => onOpenAddView && onOpenAddView('workout')}
                                            className="px-3 py-1 bg-orange-600 text-white text-xs rounded-lg hover:bg-orange-700 transition flex items-center gap-1"
                                        >
                                            <Icon name="Plus" size={14} />
                                            新規作成
                                        </button>
                                    </div>
                                </div>
                                {workoutTemplates.length === 0 ? (
                                    <p className="text-sm text-gray-500">保存されたテンプレートはありません</p>
                                ) : (
                                    <div className="space-y-2 mt-3">
                                        {workoutTemplates.map(template => {
                                            const totalCals = (template.sets || []).reduce((sum, s) => sum + (s.calories || 0), 0);

                                            return (
                                                <details key={template.id} className="bg-gray-50 p-3 rounded-lg">
                                                    <summary className="flex items-center justify-between cursor-pointer hover:bg-gray-100 -m-3 p-3 rounded-lg">
                                                        <div className="flex-1">
                                                            <p className="font-medium text-sm">{template.name}</p>
                                                            <p className="text-xs text-gray-600">
                                                                {template.exercise?.name || '種目不明'} | {template.sets?.length || 0}セット | {Math.round(totalCals)}kcal
                                                            </p>
                                                        </div>
                                                        <button
                                                            onClick={async (e) => {
                                                                e.preventDefault();
                                                                if (confirm('このテンプレートを削除しますか？')) {
                                                                    await DataService.deleteWorkoutTemplate(userId, template.id);
                                                                    await loadTemplates();
                                                                }
                                                            }}
                                                            className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded transition ml-2"
                                                        >
                                                            <Icon name="Trash2" size={16} />
                                                        </button>
                                                    </summary>
                                                    <div className="mt-3 space-y-2 border-t pt-3">
                                                        {(template.sets || []).map((set, idx) => (
                                                            <div key={idx} className="text-xs bg-white p-2 rounded">
                                                                <div className="flex justify-between mb-1">
                                                                    <span className="font-medium">セット{idx + 1}</span>
                                                                    <span className="text-gray-600">{Math.round(set.calories || 0)}kcal</span>
                                                                </div>
                                                                <div className="text-gray-600 space-x-2">
                                                                    <span>{set.weight}kg</span>
                                                                    <span>×{set.reps}回</span>
                                                                    <span>| {set.distance}m</span>
                                                                    <span>| TUT {set.tut}秒</span>
                                                                    <span>| Rest {set.restInterval}秒</span>
                                                                </div>
                                                            </div>
                                                        ))}
                                                    </div>
                                                </details>
                                            );
                                        })}
                                    </div>
                                )}
                            </div>

                        </div>
                        </div>
                    </details>

                    {/* ルーティン */}
                    <details className="border rounded-lg">
                        <summary className="cursor-pointer p-4 hover:bg-gray-50 font-medium flex items-center gap-2">
                            <Icon name="Calendar" size={18} className="text-indigo-600" />
                            ルーティン
                            {!SubscriptionUtils.isPremiumUser(userProfile) && (
                                <span className="ml-2 px-2 py-0.5 bg-amber-100 text-amber-700 text-xs font-medium rounded">Premium</span>
                            )}
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t">
                            {/* プレミアムプラン制限チェック */}
                            {!SubscriptionUtils.isPremiumUser(userProfile) ? (
                                <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-lg p-4">
                                    <div className="flex items-start gap-3">
                                        <Icon name="Lock" size={20} className="text-amber-600 mt-0.5" />
                                        <div>
                                            <h4 className="font-bold text-amber-900 mb-1">ルーティン機能はプレミアムプラン限定です</h4>
                                            <p className="text-sm text-amber-700 mb-3">
                                                プレミアムプランにアップグレードすると、トレーニングルーティンを無制限に作成・管理できます。
                                            </p>
                                            <button
                                                onClick={() => {
                                                    // サブスクリプションセクションにスクロール
                                                    const subSection = document.querySelector('[data-subscription-section]');
                                                    if (subSection) {
                                                        subSection.scrollIntoView({ behavior: 'smooth' });
                                                    }
                                                }}
                                                className="px-4 py-2 bg-amber-600 text-white rounded-lg text-sm font-medium hover:bg-amber-700 transition"
                                            >
                                                プレミアムプランを見る
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            ) : (
                            /* ルーティン内容 */
                            <div className="space-y-4">
                            <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                                <h4 className="font-bold text-purple-900 mb-2">ルーティン管理</h4>
                                <p className="text-sm text-purple-700">
                                    Day1~7のデフォルトルーティンと、最大5つまで追加可能な追加枠を設定できます。
                                </p>
                            </div>

                            {(() => {
                                const saveRoutines = (updated) => {
                                    setLocalRoutines(updated);
                                    localStorage.setItem(STORAGE_KEYS.ROUTINES, JSON.stringify(updated));
                                };

                                const updateRoutine = (id, updates) => {
                                    const updated = localRoutines.map(r => r.id === id ? { ...r, ...updates } : r);
                                    saveRoutines(updated);
                                };

                                const addRoutine = () => {
                                    if (localRoutines.length >= 12) {
                                        alert('ルーティンは最大12個（Day7 + 追加5枠）まで設定できます');
                                        return;
                                    }
                                    const nextId = Math.max(...localRoutines.map(r => r.id), 0) + 1;
                                    const dayNumber = ['', '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨', '⑩', '⑪', '⑫'][nextId] || `⑧${nextId - 7}`;
                                    const updated = [...localRoutines, {
                                        id: nextId,
                                        name: `${dayNumber}追加日`,
                                        splitType: '',
                                        isRestDay: false
                                    }];
                                    saveRoutines(updated);
                                };

                                const deleteRoutine = (id) => {
                                    if (id <= 7) {
                                        alert('Day1~7は削除できません');
                                        return;
                                    }
                                    if (confirm('この追加枠を削除しますか？')) {
                                        const updated = localRoutines.filter(r => r.id !== id);
                                        saveRoutines(updated);
                                    }
                                };

                                return (
                                    <div className="space-y-6">
                                        {/* Day1~7 */}
                                        <div>
                                            <h3 className="font-semibold mb-3">Day1~7（デフォルト）</h3>
                                            <div className="space-y-3">
                                                {localRoutines.filter(r => r.id <= 7).map(routine => (
                                                    <div key={routine.id} className="border rounded-lg p-4 bg-white">
                                                        <div className="flex items-center gap-3 mb-3">
                                                            <input
                                                                type="text"
                                                                value={routine.name}
                                                                onChange={(e) => updateRoutine(routine.id, { name: e.target.value })}
                                                                className="font-bold text-indigo-600 bg-transparent border-b border-indigo-300 focus:outline-none w-32"
                                                            />
                                                            <label className="flex items-center gap-2 text-sm">
                                                                <input
                                                                    type="checkbox"
                                                                    checked={routine.isRestDay}
                                                                    onChange={(e) => updateRoutine(routine.id, {
                                                                        isRestDay: e.target.checked,
                                                                        splitType: e.target.checked ? '' : routine.splitType
                                                                    })}
                                                                    className="rounded"
                                                                />
                                                                休息日
                                                            </label>
                                                        </div>
                                                        {!routine.isRestDay && (
                                                            <div className="space-y-3">
                                                                <div>
                                                                    <label className="font-medium text-sm">分割法</label>
                                                                    <select
                                                                        value={routine.splitType}
                                                                        onChange={(e) => {
                                                                            if (e.target.value === '__custom__') {
                                                                                const custom = prompt('分割法を入力してください（例: 胸・三頭・肩）', routine.splitType);
                                                                                if (custom !== null) {
                                                                                    updateRoutine(routine.id, { splitType: custom });
                                                                                }
                                                                            } else {
                                                                                updateRoutine(routine.id, { splitType: e.target.value });
                                                                            }
                                                                        }}
                                                                        className="w-full mt-1 p-2 border rounded-lg"
                                                                    >
                                                                        <option value="">選択してください</option>
                                                                        <option value="胸">胸</option>
                                                                        <option value="背中">背中</option>
                                                                        <option value="脚">脚</option>
                                                                        <option value="肩">肩</option>
                                                                        <option value="腕">腕</option>
                                                                        <option value="尻">尻</option>
                                                                        <option value="腹筋・体幹">腹筋・体幹</option>
                                                                        <option value="上半身">上半身</option>
                                                                        <option value="下半身">下半身</option>
                                                                        <option value="全身">全身</option>
                                                                        <option value="プッシュ（押す）">プッシュ（押す）</option>
                                                                        <option value="プル（引く）">プル（引く）</option>
                                                                        <option value="有酸素">有酸素</option>
                                                                        <option value="胸・三頭">胸・三頭</option>
                                                                        <option value="背中・二頭">背中・二頭</option>
                                                                        <option value="肩・腕">肩・腕</option>
                                                                        <option value="__custom__">✏️ カスタム入力...</option>
                                                                    </select>
                                                                </div>

                                                                {/* テンプレート紐づけ */}
                                                                <details className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                                                                    <summary className="font-medium text-sm text-yellow-900 cursor-pointer flex items-center gap-2 hover:text-yellow-700">
                                                                        <Icon name="BookTemplate" size={14} />
                                                                        テンプレート紐づけ
                                                                        <Icon name="ChevronDown" size={14} className="ml-auto" />
                                                                    </summary>
                                                                    <div className="space-y-2 mt-3">
                                                                        {/* 食事テンプレート */}
                                                                        <div>
                                                                            <label className="text-xs text-gray-600">食事</label>
                                                                            <select
                                                                                value={routine.mealTemplateId || ''}
                                                                                onChange={(e) => updateRoutine(routine.id, { mealTemplateId: e.target.value || null })}
                                                                                className="w-full mt-1 p-2 border rounded text-sm"
                                                                            >
                                                                                <option value="">テンプレートなし</option>
                                                                                {mealTemplates.map(t => (
                                                                                    <option key={t.id} value={t.id}>{t.name}</option>
                                                                                ))}
                                                                            </select>
                                                                        </div>

                                                                        {/* 運動テンプレート */}
                                                                        <div>
                                                                            <label className="text-xs text-gray-600">トレーニング</label>
                                                                            <select
                                                                                value={routine.workoutTemplateId || ''}
                                                                                onChange={(e) => updateRoutine(routine.id, { workoutTemplateId: e.target.value || null })}
                                                                                className="w-full mt-1 p-2 border rounded text-sm"
                                                                            >
                                                                                <option value="">テンプレートなし</option>
                                                                                {workoutTemplates.map(t => (
                                                                                    <option key={t.id} value={t.id}>{t.name}</option>
                                                                                ))}
                                                                            </select>
                                                                        </div>

                                                                        {/* サプリメントテンプレート */}
                                                                        <div>
                                                                            <label className="text-xs text-gray-600">サプリメント</label>
                                                                            <select
                                                                                value={routine.supplementTemplateId || ''}
                                                                                onChange={(e) => updateRoutine(routine.id, { supplementTemplateId: e.target.value || null })}
                                                                                className="w-full mt-1 p-2 border rounded text-sm"
                                                                            >
                                                                                <option value="">テンプレートなし</option>
                                                                                {supplementTemplates.map(t => (
                                                                                    <option key={t.id} value={t.id}>{t.name}</option>
                                                                                ))}
                                                                            </select>
                                                                        </div>
                                                                    </div>
                                                                    <p className="text-xs text-yellow-700 mt-2">
                                                                        紐づけたテンプレートは、記録画面で自動的に読み込まれます
                                                                    </p>
                                                                </details>
                                                            </div>
                                                        )}
                                                    </div>
                                                ))}
                                            </div>
                                        </div>

                                        {/* 追加枠 */}
                                        {localRoutines.filter(r => r.id > 7).length > 0 && (
                                            <div>
                                                <h3 className="font-semibold mb-3">追加枠（最大5つ）</h3>
                                                <div className="space-y-3">
                                                    {localRoutines.filter(r => r.id > 7).map(routine => (
                                                        <div key={routine.id} className="border rounded-lg p-4 bg-gray-50">
                                                            <div className="flex justify-between items-center mb-3">
                                                                <input
                                                                    type="text"
                                                                    value={routine.name}
                                                                    onChange={(e) => updateRoutine(routine.id, { name: e.target.value })}
                                                                    className="font-bold text-indigo-600 bg-transparent border-b border-indigo-300 focus:outline-none"
                                                                />
                                                                <button
                                                                    onClick={() => deleteRoutine(routine.id)}
                                                                    className="text-red-600 hover:text-red-800"
                                                                >
                                                                    <Icon name="Trash2" size={18} />
                                                                </button>
                                                            </div>
                                                            <div className="flex items-center gap-3 mb-3">
                                                                <label className="flex items-center gap-2 text-sm">
                                                                    <input
                                                                        type="checkbox"
                                                                        checked={routine.isRestDay}
                                                                        onChange={(e) => updateRoutine(routine.id, {
                                                                            isRestDay: e.target.checked,
                                                                            splitType: e.target.checked ? '' : routine.splitType
                                                                        })}
                                                                        className="rounded"
                                                                    />
                                                                    休息日
                                                                </label>
                                                            </div>
                                                            {!routine.isRestDay && (
                                                                <div className="space-y-3">
                                                                    <div>
                                                                        <label className="font-medium text-sm">分割法</label>
                                                                        <select
                                                                            value={routine.splitType}
                                                                            onChange={(e) => {
                                                                                if (e.target.value === '__custom__') {
                                                                                    const custom = prompt('分割法を入力してください（例: 胸・三頭・肩）', routine.splitType);
                                                                                    if (custom !== null) {
                                                                                        updateRoutine(routine.id, { splitType: custom });
                                                                                    }
                                                                                } else {
                                                                                    updateRoutine(routine.id, { splitType: e.target.value });
                                                                                }
                                                                            }}
                                                                            className="w-full mt-1 p-2 border rounded-lg"
                                                                        >
                                                                            <option value="">選択してください</option>
                                                                            <option value="胸">胸</option>
                                                                            <option value="背中">背中</option>
                                                                            <option value="脚">脚</option>
                                                                            <option value="肩">肩</option>
                                                                            <option value="腕">腕</option>
                                                                            <option value="尻">尻</option>
                                                                            <option value="腹筋・体幹">腹筋・体幹</option>
                                                                            <option value="上半身">上半身</option>
                                                                            <option value="下半身">下半身</option>
                                                                            <option value="全身">全身</option>
                                                                            <option value="プッシュ（押す）">プッシュ（押す）</option>
                                                                            <option value="プル（引く）">プル（引く）</option>
                                                                            <option value="有酸素">有酸素</option>
                                                                            <option value="胸・三頭">胸・三頭</option>
                                                                            <option value="背中・二頭">背中・二頭</option>
                                                                            <option value="肩・腕">肩・腕</option>
                                                                            <option value="__custom__">✏️ カスタム入力...</option>
                                                                        </select>
                                                                    </div>

                                                                    {/* テンプレート紐づけ */}
                                                                    <details className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                                                                        <summary className="font-medium text-sm text-yellow-900 cursor-pointer flex items-center gap-2 hover:text-yellow-700">
                                                                            <Icon name="BookTemplate" size={14} />
                                                                            テンプレート紐づけ
                                                                            <Icon name="ChevronDown" size={14} className="ml-auto" />
                                                                        </summary>
                                                                        <div className="space-y-2 mt-3">
                                                                            {/* 食事テンプレート */}
                                                                            <div>
                                                                                <label className="text-xs text-gray-600">食事</label>
                                                                                <select
                                                                                    value={routine.mealTemplateId || ''}
                                                                                    onChange={(e) => updateRoutine(routine.id, { mealTemplateId: e.target.value || null })}
                                                                                    className="w-full mt-1 p-2 border rounded text-sm"
                                                                                >
                                                                                    <option value="">テンプレートなし</option>
                                                                                    {mealTemplates.map(t => (
                                                                                        <option key={t.id} value={t.id}>{t.name}</option>
                                                                                    ))}
                                                                                </select>
                                                                            </div>

                                                                            {/* 運動テンプレート */}
                                                                            <div>
                                                                                <label className="text-xs text-gray-600">トレーニング</label>
                                                                                <select
                                                                                    value={routine.workoutTemplateId || ''}
                                                                                    onChange={(e) => updateRoutine(routine.id, { workoutTemplateId: e.target.value || null })}
                                                                                    className="w-full mt-1 p-2 border rounded text-sm"
                                                                                >
                                                                                    <option value="">テンプレートなし</option>
                                                                                    {workoutTemplates.map(t => (
                                                                                        <option key={t.id} value={t.id}>{t.name}</option>
                                                                                    ))}
                                                                                </select>
                                                                            </div>

                                                                            {/* サプリメントテンプレート */}
                                                                            <div>
                                                                                <label className="text-xs text-gray-600">サプリメント</label>
                                                                                <select
                                                                                    value={routine.supplementTemplateId || ''}
                                                                                    onChange={(e) => updateRoutine(routine.id, { supplementTemplateId: e.target.value || null })}
                                                                                    className="w-full mt-1 p-2 border rounded text-sm"
                                                                                >
                                                                                    <option value="">テンプレートなし</option>
                                                                                    {supplementTemplates.map(t => (
                                                                                        <option key={t.id} value={t.id}>{t.name}</option>
                                                                                    ))}
                                                                                </select>
                                                                            </div>
                                                                        </div>
                                                                        <p className="text-xs text-yellow-700 mt-2">
                                                                            紐づけたテンプレートは、記録画面で自動的に読み込まれます
                                                                        </p>
                                                                    </details>
                                                                </div>
                                                            )}
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        {/* 追加ボタン */}
                                        {localRoutines.length < 12 && localRoutines.length >= 7 && (
                                            <button
                                                onClick={addRoutine}
                                                className="w-full py-3 border-2 border-dashed border-purple-300 rounded-lg text-purple-600 hover:bg-purple-50 transition font-medium"
                                            >
                                                <Icon name="Plus" size={18} className="inline mr-2" />
                                                追加枠を追加（{localRoutines.length - 7}/5）
                                            </button>
                                        )}

                                        {localRoutines.length === 0 && (
                                            <div className="text-center py-8">
                                                <p className="text-gray-500 mb-4">ルーティンが設定されていません</p>
                                                <button
                                                    onClick={() => {
                                                        const defaultRoutines = [
                                                            { id: 1, name: '①月曜日', splitType: '胸', isRestDay: false },
                                                            { id: 2, name: '②火曜日', splitType: '背中', isRestDay: false },
                                                            { id: 3, name: '③水曜日', splitType: '脚', isRestDay: false },
                                                            { id: 4, name: '④木曜日', splitType: '休み', isRestDay: true },
                                                            { id: 5, name: '⑤金曜日', splitType: '肩・腕', isRestDay: false },
                                                            { id: 6, name: '⑥土曜日', splitType: '全身', isRestDay: false },
                                                            { id: 7, name: '⑦日曜日', splitType: '休み', isRestDay: true }
                                                        ];
                                                        localStorage.setItem(STORAGE_KEYS.ROUTINES, JSON.stringify(defaultRoutines));
                                                        localStorage.setItem(STORAGE_KEYS.ROUTINE_START_DATE, new Date().toISOString());
                                                        localStorage.setItem(STORAGE_KEYS.ROUTINE_ACTIVE, 'true');
                                                        window.location.reload();
                                                    }}
                                                    className="px-6 py-3 bg-purple-600 text-white rounded-lg font-bold hover:bg-purple-700 transition"
                                                >
                                                    デフォルトルーティンで開始
                                                </button>
                                            </div>
                                        )}

                                        {/* 管理ボタン */}
                                        {localRoutines.length > 0 && (
                                            <div className="flex gap-3 pt-4 border-t">
                                                <button
                                                    onClick={() => {
                                                        if (confirm('ルーティンをリセットしますか？')) {
                                                            localStorage.removeItem(STORAGE_KEYS.ROUTINES);
                                                            localStorage.removeItem(STORAGE_KEYS.ROUTINE_START_DATE);
                                                            localStorage.removeItem(STORAGE_KEYS.ROUTINE_ACTIVE);
                                                            window.location.reload();
                                                        }
                                                    }}
                                                    className="flex-1 px-4 py-3 bg-red-50 text-red-600 rounded-lg hover:bg-red-100 transition font-medium border border-red-200"
                                                >
                                                    <Icon name="Trash2" size={18} className="inline mr-2" />
                                                    リセット
                                                </button>
                                                <button
                                                    onClick={() => {
                                                        localStorage.setItem(STORAGE_KEYS.ROUTINE_START_DATE, new Date().toISOString());
                                                        window.location.reload();
                                                    }}
                                                    className="flex-1 px-4 py-3 bg-indigo-50 text-indigo-600 rounded-lg hover:bg-indigo-100 transition font-medium border border-indigo-200"
                                                >
                                                    <Icon name="RotateCcw" size={18} className="inline mr-2" />
                                                    Day1から再開
                                                </button>
                                            </div>
                                        )}
                                    </div>
                                );
                            })()}
                            </div>
                            )}
                        </div>
                    </details>

                    {/* 通知 */}
                    <details className="border rounded-lg">
                        <summary className="cursor-pointer p-4 hover:bg-gray-50 font-medium flex items-center gap-2">
                            <Icon name="Bell" size={18} className="text-indigo-600" />
                            通知
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t space-y-4">
                            {/* ルーティン通知 */}
                            <div className="border rounded-lg p-3">
                                <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center gap-2">
                                        <input
                                            type="checkbox"
                                            checked={profile.notificationSettings?.routine !== false}
                                            onChange={(e) => setProfile({
                                                ...profile,
                                                notificationSettings: {
                                                    ...(profile.notificationSettings || {}),
                                                    routine: e.target.checked
                                                }
                                            })}
                                            className="rounded"
                                        />
                                        <div>
                                            <div className="font-medium text-sm">ルーティン通知</div>
                                            <div className="text-xs text-gray-600">その日のトレーニング内容をお知らせ</div>
                                        </div>
                                    </div>
                                </div>
                                <div className="ml-6">
                                    <label className="block text-xs font-medium mb-1">通知時刻</label>
                                    <input
                                        type="time"
                                        value={profile.notificationSettings?.routineTime || '08:00'}
                                        onChange={(e) => setProfile({
                                            ...profile,
                                            notificationSettings: {
                                                ...(profile.notificationSettings || {}),
                                                routineTime: e.target.value
                                            }
                                        })}
                                        className="px-3 py-2 border rounded-lg text-sm"
                                        disabled={profile.notificationSettings?.routine === false}
                                    />
                                </div>
                            </div>

                            {/* 記録リマインド */}
                            <div className="border rounded-lg p-3">
                                <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center gap-2">
                                        <input
                                            type="checkbox"
                                            checked={profile.notificationSettings?.recordReminder !== false}
                                            onChange={(e) => setProfile({
                                                ...profile,
                                                notificationSettings: {
                                                    ...(profile.notificationSettings || {}),
                                                    recordReminder: e.target.checked
                                                }
                                            })}
                                            className="rounded"
                                        />
                                        <div>
                                            <div className="font-medium text-sm">記録リマインド</div>
                                            <div className="text-xs text-gray-600">記録がない場合に通知</div>
                                        </div>
                                    </div>
                                </div>
                                <div className="ml-6">
                                    <label className="block text-xs font-medium mb-1">通知時刻</label>
                                    <input
                                        type="time"
                                        value={profile.notificationSettings?.recordReminderTime || '19:30'}
                                        onChange={(e) => setProfile({
                                            ...profile,
                                            notificationSettings: {
                                                ...(profile.notificationSettings || {}),
                                                recordReminderTime: e.target.value
                                            }
                                        })}
                                        className="px-3 py-2 border rounded-lg text-sm"
                                        disabled={profile.notificationSettings?.recordReminder === false}
                                    />
                                </div>
                            </div>

                            {/* サマリー通知 */}
                            <div className="border rounded-lg p-3">
                                <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center gap-2">
                                        <input
                                            type="checkbox"
                                            checked={profile.notificationSettings?.summary !== false}
                                            onChange={(e) => setProfile({
                                                ...profile,
                                                notificationSettings: {
                                                    ...(profile.notificationSettings || {}),
                                                    summary: e.target.checked
                                                }
                                            })}
                                            className="rounded"
                                        />
                                        <div>
                                            <div className="font-medium text-sm">サマリー通知</div>
                                            <div className="text-xs text-gray-600">1日の終わりに達成状況を要約</div>
                                        </div>
                                    </div>
                                </div>
                                <div className="ml-6">
                                    <label className="block text-xs font-medium mb-1">通知時刻</label>
                                    <input
                                        type="time"
                                        value={profile.notificationSettings?.summaryTime || '23:00'}
                                        onChange={(e) => setProfile({
                                            ...profile,
                                            notificationSettings: {
                                                ...(profile.notificationSettings || {}),
                                                summaryTime: e.target.value
                                            }
                                        })}
                                        className="px-3 py-2 border rounded-lg text-sm"
                                        disabled={profile.notificationSettings?.summary === false}
                                    />
                                </div>
                            </div>

                            {/* ミニマムタスク */}
                            <div className="border-t pt-3">
                                <label className="block text-sm font-medium mb-2">ミニマムタスク</label>
                                <input
                                    type="text"
                                    value={profile.minimumTask || ''}
                                    onChange={(e) => setProfile({...profile, minimumTask: e.target.value})}
                                    className="w-full px-3 py-2 border rounded-lg text-sm"
                                    placeholder="例: 腕立て1回"
                                />
                                <p className="text-xs text-gray-600 mt-1">
                                    「少しだけなら頑張れる」ときに提案する最低限のタスクを設定してください。
                                </p>
                            </div>
                        </div>
                    </details>

                    {/* ショートカット設定 */}
                    <details className="border rounded-lg">
                        <summary className="cursor-pointer p-4 hover:bg-gray-50 font-medium flex items-center gap-2">
                            <Icon name="Zap" size={18} className="text-indigo-600" />
                            ショートカット設定
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t space-y-4">
                            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                                <h4 className="font-bold text-blue-900 mb-2">画面端ショートカット</h4>
                                <p className="text-sm text-blue-700">
                                    左右の画面端からよく使う機能へ素早くアクセスできます
                                </p>
                            </div>

                            {(() => {
                                const [localShortcuts, setLocalShortcuts] = React.useState(() => {
                                    const saved = localStorage.getItem('chevronShortcuts');
                                    return saved ? JSON.parse(saved) : [
                                        { side: 'left', icon: 'Activity', label: '体組成', action: 'open_body_composition' },
                                        { side: 'left', icon: 'Utensils', label: '食事', action: 'open_meal' },
                                        { side: 'left', icon: 'Dumbbell', label: '運動', action: 'open_workout' },
                                        { side: 'right', icon: 'PieChart', label: '分析', action: 'open_analysis' },
                                        { side: 'right', icon: 'TrendingUp', label: '履歴', action: 'open_history' },
                                        { side: 'right', icon: 'Settings', label: '設定', action: 'open_settings' }
                                    ];
                                });

                                const [shortcutVisibility, setShortcutVisibility] = React.useState(() => {
                                    const saved = localStorage.getItem('chevronShortcutsVisibility');
                                    return saved ? JSON.parse(saved) : { left: true, right: true };
                                });

                                const saveShortcuts = (shortcuts) => {
                                    setLocalShortcuts(shortcuts);
                                    localStorage.setItem('chevronShortcuts', JSON.stringify(shortcuts));
                                    // ショートカット更新イベントを発行
                                    window.dispatchEvent(new CustomEvent('shortcutsUpdated', { detail: shortcuts }));
                                };

                                const toggleVisibility = (side) => {
                                    const newVisibility = { ...shortcutVisibility, [side]: !shortcutVisibility[side] };
                                    setShortcutVisibility(newVisibility);
                                    localStorage.setItem('chevronShortcutsVisibility', JSON.stringify(newVisibility));
                                    // 表示/非表示更新イベントを発行
                                    window.dispatchEvent(new CustomEvent('shortcutsVisibilityUpdated', { detail: newVisibility }));
                                };

                                const updateShortcut = (index, updates) => {
                                    const updated = localShortcuts.map((s, i) => i === index ? { ...s, ...updates } : s);
                                    saveShortcuts(updated);
                                };

                                const getIconColor = (action) => {
                                    const iconColors = {
                                        'open_body_composition': 'text-teal-600',
                                        'open_condition': 'text-red-600',
                                        'open_meal': 'text-green-600',
                                        'open_meal_photo': 'text-green-600',
                                        'open_workout': 'text-orange-600',
                                        'open_analysis': 'text-indigo-600',
                                        'open_history': 'text-purple-600',
                                        'open_pgbase': 'text-cyan-600',
                                        'open_community': 'text-fuchsia-600',
                                        'open_settings': 'text-gray-600'
                                    };
                                    return iconColors[action] || 'text-gray-700';
                                };

                                const availableActions = [
                                    { value: 'open_body_composition', label: '体組成', icon: 'Activity' },
                                    { value: 'open_condition', label: 'コンディション', icon: 'HeartPulse' },
                                    { value: 'open_meal', label: '食事', icon: 'Utensils' },
                                    { value: 'open_meal_photo', label: '食事写真解析', icon: 'Camera' },
                                    { value: 'open_workout', label: '運動', icon: 'Dumbbell' },
                                    { value: 'open_analysis', label: '分析', icon: 'PieChart' },
                                    { value: 'open_history', label: '履歴', icon: 'TrendingUp' },
                                    { value: 'open_pgbase', label: 'PGBASE', icon: 'BookOpen' },
                                    { value: 'open_community', label: 'COMY', icon: 'Users' },
                                    { value: 'open_settings', label: '設定', icon: 'Settings' }
                                ];

                                const leftShortcuts = localShortcuts.filter(s => s.side === 'left');
                                const rightShortcuts = localShortcuts.filter(s => s.side === 'right');

                                return (
                                    <div className="space-y-6">
                                        {/* Left Shortcuts */}
                                        <div>
                                            <div className="flex items-center justify-between mb-3">
                                                <h3 className="font-semibold flex items-center gap-2">
                                                    <Icon name="ChevronLeft" size={18} className="text-gray-600" />
                                                    左側ショートカット
                                                </h3>
                                                <button
                                                    onClick={() => toggleVisibility('left')}
                                                    className={`px-3 py-1.5 rounded-lg text-sm font-medium transition flex items-center gap-1.5 ${
                                                        shortcutVisibility.left
                                                            ? 'bg-green-100 text-green-700 hover:bg-green-200'
                                                            : 'bg-gray-100 text-gray-500 hover:bg-gray-200'
                                                    }`}
                                                >
                                                    <Icon name={shortcutVisibility.left ? 'Eye' : 'EyeOff'} size={16} />
                                                    {shortcutVisibility.left ? '表示中' : '非表示'}
                                                </button>
                                            </div>
                                            <div className="space-y-3">
                                                {leftShortcuts.map((shortcut, idx) => {
                                                    const globalIndex = localShortcuts.findIndex(s => s === shortcut);
                                                    return (
                                                        <div key={globalIndex} className="border rounded-lg p-4 bg-white">
                                                            <div className="flex items-center gap-3">
                                                                <div className="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                                                                    <Icon name={shortcut.icon} size={18} className={getIconColor(shortcut.action)} />
                                                                </div>
                                                                <div className="flex-1">
                                                                    <select
                                                                        value={shortcut.action}
                                                                        onChange={(e) => {
                                                                            const selected = availableActions.find(a => a.value === e.target.value);
                                                                            updateShortcut(globalIndex, {
                                                                                action: selected.value,
                                                                                label: selected.label,
                                                                                icon: selected.icon
                                                                            });
                                                                        }}
                                                                        className="w-full px-3 py-2 border rounded-lg text-sm"
                                                                    >
                                                                        {availableActions.map(action => (
                                                                            <option key={action.value} value={action.value}>
                                                                                {action.label}
                                                                            </option>
                                                                        ))}
                                                                    </select>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                        </div>

                                        {/* Right Shortcuts */}
                                        <div>
                                            <div className="flex items-center justify-between mb-3">
                                                <h3 className="font-semibold flex items-center gap-2">
                                                    <Icon name="ChevronRight" size={18} className="text-gray-600" />
                                                    右側ショートカット
                                                </h3>
                                                <button
                                                    onClick={() => toggleVisibility('right')}
                                                    className={`px-3 py-1.5 rounded-lg text-sm font-medium transition flex items-center gap-1.5 ${
                                                        shortcutVisibility.right
                                                            ? 'bg-green-100 text-green-700 hover:bg-green-200'
                                                            : 'bg-gray-100 text-gray-500 hover:bg-gray-200'
                                                    }`}
                                                >
                                                    <Icon name={shortcutVisibility.right ? 'Eye' : 'EyeOff'} size={16} />
                                                    {shortcutVisibility.right ? '表示中' : '非表示'}
                                                </button>
                                            </div>
                                            <div className="space-y-3">
                                                {rightShortcuts.map((shortcut, idx) => {
                                                    const globalIndex = localShortcuts.findIndex(s => s === shortcut);
                                                    return (
                                                        <div key={globalIndex} className="border rounded-lg p-4 bg-white">
                                                            <div className="flex items-center gap-3">
                                                                <div className="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                                                                    <Icon name={shortcut.icon} size={18} className={getIconColor(shortcut.action)} />
                                                                </div>
                                                                <div className="flex-1">
                                                                    <select
                                                                        value={shortcut.action}
                                                                        onChange={(e) => {
                                                                            const selected = availableActions.find(a => a.value === e.target.value);
                                                                            updateShortcut(globalIndex, {
                                                                                action: selected.value,
                                                                                label: selected.label,
                                                                                icon: selected.icon
                                                                            });
                                                                        }}
                                                                        className="w-full px-3 py-2 border rounded-lg text-sm"
                                                                    >
                                                                        {availableActions.map(action => (
                                                                            <option key={action.value} value={action.value}>
                                                                                {action.label}
                                                                            </option>
                                                                        ))}
                                                                    </select>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                        </div>

                                        {/* Action Buttons */}
                                        <div className="border-t pt-4">
                                            <button
                                                onClick={() => {
                                                    if (confirm('ショートカット設定をデフォルトに戻しますか？')) {
                                                        const defaultShortcuts = [
                                                            { side: 'left', icon: 'Activity', label: '体組成', action: 'open_body_composition' },
                                                            { side: 'left', icon: 'Utensils', label: '食事', action: 'open_meal' },
                                                            { side: 'left', icon: 'Dumbbell', label: '運動', action: 'open_workout' },
                                                            { side: 'right', icon: 'PieChart', label: '分析', action: 'open_analysis' },
                                                            { side: 'right', icon: 'TrendingUp', label: '履歴', action: 'open_history' },
                                                            { side: 'right', icon: 'Settings', label: '設定', action: 'open_settings' }
                                                        ];
                                                        saveShortcuts(defaultShortcuts);
                                                    }
                                                }}
                                                className="w-full px-4 py-3 bg-gray-50 text-gray-600 rounded-lg hover:bg-gray-100 transition font-medium border border-gray-200"
                                            >
                                                <Icon name="RotateCcw" size={18} className="inline mr-2" />
                                                デフォルトに戻す
                                            </button>
                                        </div>
                                    </div>
                                );
                            })()}
                        </div>
                    </details>

                    {/* データ管理 */}
                    <details className="border rounded-lg">
                        <summary className="cursor-pointer p-4 hover:bg-gray-50 font-medium flex items-center gap-2">
                            <Icon name="Database" size={18} className="text-indigo-600" />
                            データ管理
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t">
                        <div className="space-y-4">
                            <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                                <div className="flex items-start gap-3">
                                    <Icon name="Trash2" size={20} className="text-red-600 mt-1" />
                                    <div className="flex-1">
                                        <h4 className="font-bold mb-2 text-red-800">全データの削除</h4>
                                        <p className="text-sm text-gray-600 mb-3">
                                            すべてのデータを削除します。この操作は取り消せません。
                                        </p>
                                        <button
                                            onClick={handleClearData}
                                            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition"
                                        >
                                            全データ削除
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h4 className="font-bold mb-2">アプリ情報</h4>
                                <div className="space-y-2 text-sm">
                                    <div className="flex justify-between">
                                        <span className="text-gray-600">バージョン</span>
                                        <span className="font-medium">Beta 1.0.0</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span className="text-gray-600">開発モード</span>
                                        <span className="font-medium">{DEV_MODE ? 'ON' : 'OFF'}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        </div>
                    </details>

                    {/* 開発者 */}
                    {DEV_MODE && (
                    <details className="border rounded-lg">
                        <summary className="cursor-pointer p-4 hover:bg-gray-50 font-medium flex items-center gap-2">
                            <Icon name="Code" size={18} className="text-orange-600" />
                            開発者
                            <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                        </summary>
                        <div className="p-4 pt-0 border-t">
                            {/* 開発者モードコンテンツ */}
                            <div className="space-y-6">
                            <div className="bg-orange-50 border border-orange-200 p-4 rounded-lg">
                                <h4 className="font-bold text-orange-800 mb-2 flex items-center gap-2">
                                    <Icon name="AlertTriangle" size={18} />
                                    開発者モード
                                </h4>
                                <p className="text-sm text-orange-700">
                                    このタブは開発中のみ表示されます。守破離機能のテストや日付の手動操作が可能です。
                                </p>
                            </div>

                            {/* 日付手動進行 */}
                            <div className="border rounded-lg p-6">
                                <h4 className="font-bold mb-4 flex items-center gap-2">
                                    <Icon name="Calendar" size={18} />
                                    日付手動進行
                                </h4>
                                <div className="space-y-4">
                                    <div className="bg-gray-50 p-4 rounded-lg">
                                        <div className="flex justify-between items-center mb-3">
                                            <span className="text-sm text-gray-600">現在の利用日数</span>
                                            <span className="text-2xl font-bold text-indigo-600">{usageDays}日</span>
                                        </div>
                                        <div className="text-xs text-gray-500">
                                            現在のステージ: {
                                                usageDays < 10 ? '守 (基礎)' :
                                                usageDays < 18 ? '破 (応用)' :
                                                '離 (独自)'
                                            }
                                        </div>
                                    </div>

                                    <div className="grid grid-cols-2 gap-3">
                                        <button
                                            onClick={() => {
                                                const newDays = Math.max(0, usageDays - 1);
                                                localStorage.setItem(STORAGE_KEYS.USAGE_DAYS, newDays.toString());
                                                window.location.reload();
                                            }}
                                            className="px-4 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition font-medium"
                                        >
                                            <Icon name="ChevronLeft" size={18} className="inline mr-1" />
                                            -1日
                                        </button>
                                        <button
                                            onClick={() => {
                                                const newDays = usageDays + 1;
                                                localStorage.setItem(STORAGE_KEYS.USAGE_DAYS, newDays.toString());
                                                window.location.reload();
                                            }}
                                            className="px-4 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition font-medium"
                                        >
                                            <Icon name="ChevronRight" size={18} className="inline mr-1" />
                                            +1日
                                        </button>
                                    </div>

                                    <div className="grid grid-cols-2 gap-2 mb-2">
                                        <button
                                            onClick={() => {
                                                localStorage.setItem(STORAGE_KEYS.USAGE_DAYS, '0');
                                                // 機能開放状態もリセット
                                                localStorage.removeItem(STORAGE_KEYS.UNLOCKED_FEATURES);
                                                window.location.reload();
                                            }}
                                            className="px-3 py-2 bg-gray-100 text-gray-700 rounded text-sm hover:bg-gray-200 transition font-medium"
                                        >
                                            0日 (初期状態)
                                        </button>
                                        <button
                                            onClick={() => {
                                                localStorage.setItem(STORAGE_KEYS.USAGE_DAYS, '30');
                                                // 全機能開放
                                                const allFeatures = Object.values(FEATURES).map(f => f.id);
                                                localStorage.setItem(STORAGE_KEYS.UNLOCKED_FEATURES, JSON.stringify(allFeatures));
                                                window.location.reload();
                                            }}
                                            className="px-3 py-2 bg-purple-600 text-white rounded text-sm hover:bg-purple-700 transition font-medium"
                                        >
                                            30日 (全開放)
                                        </button>
                                    </div>
                                    <div className="grid grid-cols-3 gap-2">
                                        <button
                                            onClick={() => {
                                                localStorage.setItem(STORAGE_KEYS.USAGE_DAYS, '5');
                                                window.location.reload();
                                            }}
                                            className="px-3 py-2 bg-green-100 text-green-700 rounded text-sm hover:bg-green-200 transition"
                                        >
                                            5日 (守)
                                        </button>
                                        <button
                                            onClick={() => {
                                                localStorage.setItem(STORAGE_KEYS.USAGE_DAYS, '12');
                                                window.location.reload();
                                            }}
                                            className="px-3 py-2 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200 transition"
                                        >
                                            12日 (破)
                                        </button>
                                        <button
                                            onClick={() => {
                                                localStorage.setItem(STORAGE_KEYS.USAGE_DAYS, '25');
                                                window.location.reload();
                                            }}
                                            className="px-3 py-2 bg-purple-100 text-purple-700 rounded text-sm hover:bg-purple-200 transition"
                                        >
                                            25日 (離)
                                        </button>
                                    </div>
                                </div>
                            </div>

                            {/* 機能開放状態 */}
                            <div className="border rounded-lg p-6">
                                <h4 className="font-bold mb-4 flex items-center gap-2">
                                    <Icon name="Lock" size={18} />
                                    機能開放状態
                                </h4>
                                <div className="space-y-2">
                                    {Object.values(FEATURES).map(feature => {
                                        const isUnlocked = usageDays >= feature.requiredDays;
                                        const stageColor =
                                            feature.stage === '守' ? 'bg-green-100 text-green-700' :
                                            feature.stage === '破' ? 'bg-blue-100 text-blue-700' :
                                            'bg-purple-100 text-purple-700';
                                        return (
                                            <div key={feature.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                                <div className="flex items-center gap-3">
                                                    <span className={`text-xs px-2 py-1 rounded-full ${stageColor} font-bold`}>
                                                        {feature.stage}
                                                    </span>
                                                    <span className="font-medium">{feature.name}</span>
                                                    <span className="text-xs text-gray-500">({feature.requiredDays}日〜)</span>
                                                </div>
                                                <div>
                                                    {isUnlocked ? (
                                                        <span className="text-green-600 flex items-center gap-1">
                                                            <Icon name="CheckCircle" size={18} />
                                                            <span className="text-sm font-medium">開放済み</span>
                                                        </span>
                                                    ) : (
                                                        <span className="text-gray-400 flex items-center gap-1">
                                                            <Icon name="Lock" size={18} />
                                                            <span className="text-sm">未開放</span>
                                                        </span>
                                                    )}
                                                </div>
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>

                            {/* 有料機能開放 (テスト用) */}
                            <div className="border rounded-lg p-6 bg-purple-50 border-purple-300">
                                <h4 className="font-bold mb-4 flex items-center gap-2 text-purple-800">
                                    <Icon name="Crown" size={18} />
                                    有料機能開放 (テスト用)
                                </h4>
                                <p className="text-sm text-purple-700 mb-4">
                                    開発・テスト用にプレミアムプラン機能を一時的に開放します。
                                </p>
                                <div className="space-y-3">
                                    <button
                                        onClick={() => {
                                            // プレミアムプランを有効化
                                            const profile = JSON.parse(localStorage.getItem(STORAGE_KEYS.USER_PROFILE) || '{}');
                                            profile.subscription = {
                                                status: 'active',
                                                plan: 'premium',
                                                startDate: new Date().toISOString(),
                                                aiCredits: {
                                                    monthly: 100,
                                                    remaining: 100,
                                                    used: 0,
                                                    purchased: 0,
                                                    lastReset: new Date().toISOString().substring(0, 7)
                                                }
                                            };
                                            localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(profile));
                                            alert('プレミアムプランを有効化しました。ページをリロードします。');
                                            window.location.reload();
                                        }}
                                        className="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg hover:from-purple-700 hover:to-indigo-700 transition font-bold flex items-center justify-center gap-2"
                                    >
                                        <Icon name="Crown" size={18} />
                                        プレミアムプラン有効化
                                    </button>
                                    <button
                                        onClick={() => {
                                            // プレミアムプランを無効化
                                            const profile = JSON.parse(localStorage.getItem(STORAGE_KEYS.USER_PROFILE) || '{}');
                                            profile.subscription = {
                                                status: 'inactive',
                                                plan: 'free'
                                            };
                                            localStorage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(profile));
                                            alert('無料プランに戻しました。ページをリロードします。');
                                            window.location.reload();
                                        }}
                                        className="w-full px-4 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition font-medium flex items-center justify-center gap-2"
                                    >
                                        <Icon name="XCircle" size={18} />
                                        無料プランに戻す
                                    </button>
                                </div>
                            </div>
                        </div>
                        </div>
                    </details>
                    )}

                    {/* 管理者パネル (開発モードのみ表示) */}
                    {DEV_MODE && (
                        <details className="border rounded-lg border-red-300 bg-red-50">
                            <summary className="cursor-pointer p-4 hover:bg-red-100 font-medium flex items-center gap-2">
                                <Icon name="Shield" size={18} className="text-red-600" />
                                管理者機能
                                <Icon name="ChevronDown" size={16} className="ml-auto text-gray-400" />
                            </summary>
                            <div className="p-4 pt-0 border-t border-red-200">
                                <div className="space-y-3">
                                    <p className="text-sm text-red-700 mb-3">
                                        🔒 管理者機能へのアクセスには認証が必要です
                                    </p>
                                    <button
                                        onClick={() => {
                                            const password = prompt('管理者パスワードを入力してください:');
                                            if (password === 'admin2024') {
                                                onClose();
                                                setTimeout(() => {
                                                    document.dispatchEvent(new CustomEvent('openAdminPanel'));
                                                }, 100);
                                            } else if (password !== null) {
                                                alert('パスワードが間違っています');
                                            }
                                        }}
                                        className="w-full py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-semibold flex items-center justify-center gap-2"
                                    >
                                        <Icon name="Shield" size={18} />
                                        COMY投稿承認パネルを開く
                                    </button>
                                    <p className="text-xs text-gray-600 mt-2">
                                        ※ 本番環境では、Firebase Authenticationのカスタムクレームでadminロールを付与してください
                                    </p>
                                </div>
                            </div>
                        </details>
                    )}
            </div>
            </div>
        </div>

        {/* 情報モーダル */}
        {infoModal.show && (
            <div className="fixed inset-0 bg-black bg-opacity-50 z-[100] flex items-center justify-center p-4" onClick={() => setInfoModal({ show: false, title: '', content: '' })}>
                <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[80vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
                    <div className="sticky top-0 bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 flex justify-between items-center z-10">
                        <h3 className="font-bold text-lg">{infoModal.title}</h3>
                        <button onClick={() => setInfoModal({ show: false, title: '', content: '' })} className="w-8 h-8 flex items-center justify-center text-white hover:bg-white hover:bg-opacity-20 rounded-full">
                            <Icon name="X" size={20} />
                        </button>
                    </div>
                    <div className="p-6">
                        <p className="text-gray-700 whitespace-pre-line leading-relaxed">{infoModal.content}</p>
                    </div>
                </div>
            </div>
        )}

        {/* Visual Guide Modal */}
        {visualGuideModal.show && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                    <div className="sticky top-0 bg-gradient-to-r from-orange-600 to-pink-600 text-white p-4 flex justify-between items-center z-10">
                        <h3 className="font-bold text-lg">外見から体脂肪率を推定</h3>
                        <button onClick={() => setVisualGuideModal({ ...visualGuideModal, show: false })} className="w-8 h-8 flex items-center justify-center text-white hover:bg-white hover:bg-opacity-20 rounded-full">
                            <Icon name="X" size={20} />
                        </button>
                    </div>
                    <div className="p-6 space-y-4">
                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                            <p className="text-sm text-yellow-800 font-medium">
                                ⚠️ この推定値は外見に基づく主観的評価であり、実際の体脂肪率と±3-5%の誤差があります。正確な測定には体組成計の使用を強く推奨します。
                            </p>
                        </div>

                        <div>
                            <label className="block text-sm font-medium mb-2">性別を選択</label>
                            <div className="flex gap-2">
                                <button
                                    onClick={() => setVisualGuideModal({ ...visualGuideModal, gender: '男性' })}
                                    className={`flex-1 px-4 py-2 rounded-lg border-2 ${visualGuideModal.gender === '男性' ? 'border-orange-600 bg-orange-50 text-orange-700' : 'border-gray-300'}`}
                                >
                                    男性
                                </button>
                                <button
                                    onClick={() => setVisualGuideModal({ ...visualGuideModal, gender: '女性' })}
                                    className={`flex-1 px-4 py-2 rounded-lg border-2 ${visualGuideModal.gender === '女性' ? 'border-pink-600 bg-pink-50 text-pink-700' : 'border-gray-300'}`}
                                >
                                    女性
                                </button>
                            </div>
                        </div>

                        <div>
                            <label className="block text-sm font-medium mb-3">
                                あなたの体型に最も近いレベルを選択してください (1-10)
                            </label>
                            <div className="space-y-2">
                                {LBMUtils.getVisualGuideInfo(visualGuideModal.gender).map((guide) => {
                                    const isSelected = visualGuideModal.selectedLevel === guide.level;
                                    return (
                                        <button
                                            key={guide.level}
                                            onClick={() => setVisualGuideModal({ ...visualGuideModal, selectedLevel: guide.level })}
                                            className={`w-full text-left p-4 rounded-lg border-2 transition ${
                                                isSelected
                                                    ? 'border-orange-600 bg-orange-50'
                                                    : 'border-gray-200 hover:border-orange-300 hover:bg-gray-50'
                                            }`}
                                        >
                                            <div className="flex items-start gap-3">
                                                <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center font-bold ${
                                                    isSelected ? 'bg-orange-600 text-white' : 'bg-gray-200 text-gray-600'
                                                }`}>
                                                    {guide.level}
                                                </div>
                                                <div className="flex-1">
                                                    <div className="flex items-center gap-2 mb-1">
                                                        <span className="font-bold text-gray-900">{guide.title}</span>
                                                        <span className="text-sm text-gray-600">({guide.range})</span>
                                                    </div>
                                                    <ul className="text-sm text-gray-700 space-y-1">
                                                        {guide.features.map((feature, idx) => (
                                                            <li key={idx}>• {feature}</li>
                                                        ))}
                                                    </ul>
                                                    <p className="text-xs text-gray-500 mt-2">健康: {guide.health}</p>
                                                </div>
                                            </div>
                                        </button>
                                    );
                                })}
                            </div>
                        </div>

                        <div className="bg-gradient-to-r from-orange-50 to-pink-50 p-4 rounded-lg border border-orange-200">
                            <p className="text-sm font-medium text-gray-700 mb-2">推定結果</p>
                            <p className="text-3xl font-bold text-orange-600">
                                {LBMUtils.estimateBodyFatByAppearance(visualGuideModal.gender, visualGuideModal.selectedLevel).bodyFatPercentage}%
                            </p>
                            <p className="text-sm text-gray-600 mt-2">
                                {LBMUtils.estimateBodyFatByAppearance(visualGuideModal.gender, visualGuideModal.selectedLevel).description}
                            </p>
                        </div>

                        <div className="flex gap-3">
                            <button
                                onClick={() => setVisualGuideModal({ ...visualGuideModal, show: false })}
                                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50"
                            >
                                キャンセル
                            </button>
                            <button
                                onClick={() => {
                                    const estimate = LBMUtils.estimateBodyFatByAppearance(visualGuideModal.gender, visualGuideModal.selectedLevel);
                                    setProfile({ ...profile, bodyFatPercentage: estimate.bodyFatPercentage });
                                    setVisualGuideModal({ ...visualGuideModal, show: false });
                                }}
                                className="flex-1 px-4 py-3 bg-gradient-to-r from-orange-600 to-pink-600 text-white rounded-lg hover:from-orange-700 hover:to-pink-700 font-medium"
                            >
                                この値を使用する
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        )}

        </>
    );
};
// ===========================
// Analysis and History Components
// Extracted from index_beta.html
// ===========================

